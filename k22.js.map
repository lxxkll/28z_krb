{"version":3,"sources":["webpack://k22/webpack/universalModuleDefinition","webpack://k22/webpack/bootstrap","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/prop-types/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/warning/warning.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/invariant/browser.js","webpack://k22/wrapper.js","webpack://k22/misc.js","webpack://k22/polyfills.js","webpack://k22/core.js","webpack://k22/markerFunctions.js","webpack://k22/arrayUtils.js","webpack://k22/callableReferenceUtils.js","webpack://k22/conversions.js","webpack://k22/long.js","webpack://k22/rtti.js","webpack://k22/arrayUtils.kt","webpack://k22/./kotlin-dce/runtime/Enum.kt","webpack://k22/primitiveCompanionObjects.kt","webpack://k22/./kotlin-dce/generated/_Arrays.kt","webpack://k22/./kotlin-dce/generated/_Ranges.kt","webpack://k22/./kotlin-dce/kotlin/UByte.kt","webpack://k22/./kotlin-dce/kotlin/UInt.kt","webpack://k22/./kotlin-dce/kotlin/UShort.kt","webpack://k22/Ranges.kt","webpack://k22/./kotlin-dce/collections/Collections.kt","webpack://k22/./kotlin-dce/collections/Maps.kt","webpack://k22/./kotlin-dce/collections/Sets.kt","webpack://k22/./kotlin-dce/text/StringNumberConversions.kt","webpack://k22/./kotlin-dce/collections/Sequences.kt","webpack://k22/./kotlin-dce/generated/_Collections.kt","webpack://k22/./kotlin-dce/generated/_Sequences.kt","webpack://k22/./kotlin-dce/util/Preconditions.kt","webpack://k22/./kotlin-dce/generated/_Strings.kt","webpack://k22/./kotlin-dce/kotlin/text/string.kt","webpack://k22/Iterators.kt","webpack://k22/ProgressionIterators.kt","webpack://k22/Progressions.kt","webpack://k22/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://k22/Collections.kt","webpack://k22/Range.kt","webpack://k22/Unit.kt","webpack://k22/./kotlin-dce/internal/progressionUtil.kt","webpack://k22/./kotlin-dce/reflect/KVariance.kt","webpack://k22/./kotlin-dce/kotlin/builtins.kt","webpack://k22/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://k22/./kotlin-dce/util/Standard.kt","webpack://k22/./kotlin-dce/util/Result.kt","webpack://k22/./kotlin-dce/coroutines/Continuation.kt","webpack://k22/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://k22/./kotlin-dce/kotlin/kotlin.kt","webpack://k22/./kotlin-dce/generated/_ArraysJs.kt","webpack://k22/./kotlin-dce/kotlin/collections.kt","webpack://k22/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://k22/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://k22/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://k22/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://k22/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://k22/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://k22/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://k22/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://k22/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://k22/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://k22/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://k22/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://k22/./kotlin-dce/kotlin/console.kt","webpack://k22/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://k22/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://k22/./kotlin-dce/kotlin/exceptions.kt","webpack://k22/./kotlin-dce/kotlin/math.kt","webpack://k22/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://k22/./kotlin-dce/kotlin/numbers.kt","webpack://k22/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://k22/./kotlin-dce/kotlin/reflect/JsClass.kt","webpack://k22/./kotlin-dce/kotlin/reflect/KClassImpl.kt","webpack://k22/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://k22/./kotlin-dce/kotlin/jsOperators.kt","webpack://k22/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://k22/./kotlin-dce/kotlin/reflect/reflection.kt","webpack://k22/./kotlin-dce/kotlin/regexp.kt","webpack://k22/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://k22/./kotlin-dce/kotlin/text/char.kt","webpack://k22/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://k22/./kotlin-dce/kotlin/text/regex.kt","webpack://k22/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://k22/./kotlin-dce/text/Strings.kt","webpack://k22/./kotlin-dce/kotlin/Comparator.kt","webpack://k22/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://k22/./kotlin-dce/collections/AbstractCollection.kt","webpack://k22/./kotlin-dce/collections/AbstractList.kt","webpack://k22/./kotlin-dce/collections/AbstractMap.kt","webpack://k22/./kotlin-dce/collections/AbstractSet.kt","webpack://k22/./kotlin-dce/collections/IndexedValue.kt","webpack://k22/./kotlin-dce/collections/Iterables.kt","webpack://k22/./kotlin-dce/collections/Iterators.kt","webpack://k22/./kotlin-dce/collections/MapWithDefault.kt","webpack://k22/./kotlin-dce/collections/MutableCollections.kt","webpack://k22/./kotlin-dce/collections/SequenceBuilder.kt","webpack://k22/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://k22/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://k22/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://k22/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://k22/./kotlin-dce/random/Random.kt","webpack://k22/./kotlin-dce/random/XorWowRandom.kt","webpack://k22/./kotlin-dce/ranges/Ranges.kt","webpack://k22/./kotlin-dce/text/Appendable.kt","webpack://k22/./kotlin-dce/text/Char.kt","webpack://k22/./kotlin-dce/text/Indent.kt","webpack://k22/./kotlin-dce/text/regex/MatchResult.kt","webpack://k22/./kotlin-dce/util/Lazy.kt","webpack://k22/./kotlin-dce/util/Tuples.kt","webpack://k22/./kotlin-dce/generated/_Maps.kt","webpack://k22/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://k22/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://k22/coroutines.kt","webpack://k22/coroutinesIntrinsics.kt","webpack://k22/CoroutinesLibrary.kt","webpack://k22/Intrinsics.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/kotlinext/js/Helpers.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/node_modules/path-to-regexp/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/RBuilder.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/ReactComponent.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/hooks.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/symbol-observable/es/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/process/browser.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/object-assign/index.js","webpack://k22/./kotlin-dce/text/regex/RegexExtensions.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/api.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/attributes.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/delegating-map.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-enums.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-a.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-b.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-d.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-h.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-i.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-l.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-n.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-p.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-s.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-t.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-tags-u.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/htmltag.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/stream.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/jsMain/kotlin/dom-js.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-attr-traits.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/jsMain/kotlin/generated/gen-event-attrs-js.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/commonMain/kotlin/generated/gen-attributes.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/redux/es/redux.js","webpack://k22/(webpack)/buildin/global.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/symbol-observable/es/ponyfill.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/dom/ReactDOMTags.kt","webpack://k22/./kotlin/generated/_Collections.kt","webpack://k22/./kotlin/collections/Collections.kt","webpack://k22/./kotlin/text/Strings.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/component/app.kt","webpack://k22/./kotlin/util/Standard.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/component/currentGroupFC.kt","webpack://k22/./kotlin/kotlin/text/string.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/component/currentQuestionFC.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/component/renderByTypesFC.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/data/AnswerVariant.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/data/Question.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/data/QuestionGroup.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/data/State.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/hoc/withDisplayName.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/main.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/redux/actions.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/src/main/kotlin/redux/reducers.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react/cjs/react.production.min.js","webpack://k22/../../../../../common/src/Delay.kt","webpack://k22/../../../../../common/src/EventLoop.common.kt","webpack://k22/./kotlin-dce/text/StringBuilder.kt","webpack://k22/../../../../../common/src/internal/LockFreeTaskQueue.kt","webpack://k22/../../../../../js/src/JSDispatcher.kt","webpack://k22/../../../../../common/src/AbstractCoroutine.kt","webpack://k22/../../../../../common/src/Builders.common.kt","webpack://k22/../../../../../common/src/CancellableContinuation.kt","webpack://k22/../../../../../common/src/CancellableContinuationImpl.kt","webpack://k22/../../../../../src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://k22/../../../../../common/src/CompletableDeferred.kt","webpack://k22/../../../../../common/src/CompletedExceptionally.kt","webpack://k22/../../../../../common/src/CoroutineDispatcher.kt","webpack://k22/../../../../../common/src/CompletionHandler.common.kt","webpack://k22/../../../../../common/src/CoroutineExceptionHandler.kt","webpack://k22/../../../../../common/src/CoroutineName.kt","webpack://k22/../../../../../common/src/Job.kt","webpack://k22/../../../../../common/src/JobSupport.kt","webpack://k22/../../../../../js/src/internal/LinkedList.kt","webpack://k22/../../../../../common/src/NonCancellable.kt","webpack://k22/../../../../../common/src/Supervisor.kt","webpack://k22/../../../../../common/src/Timeout.kt","webpack://k22/../../../../../common/src/channels/AbstractChannel.kt","webpack://k22/../../../../../common/src/MainCoroutineDispatcher.kt","webpack://k22/../../../../../common/src/internal/ThreadSafeHeap.kt","webpack://k22/../../../../../common/src/selects/Select.kt","webpack://k22/../../../../../common/src/sync/Semaphore.kt","webpack://k22/../../../../../common/src/flow/terminal/Reduce.kt","webpack://k22/../../../../../common/src/internal/Atomic.kt","webpack://k22/../../../../../common/src/internal/MainDispatcherFactory.kt","webpack://k22/../../../../../common/src/internal/Scopes.kt","webpack://k22/../../../../../common/src/internal/SegmentQueue.kt","webpack://k22/../../../../../common/src/internal/SystemProps.common.kt","webpack://k22/../../../../../js/src/internal/Synchronized.kt","webpack://k22/../../../../../common/src/intrinsics/Cancellable.kt","webpack://k22/../../../../../common/src/intrinsics/Undispatched.kt","webpack://k22/../../../../../common/src/channels/Channels.common.kt","webpack://k22/../../../../../common/src/flow/Channels.kt","webpack://k22/../../../../../common/src/flow/operators/Zip.kt","webpack://k22/../../../../../common/src/flow/terminal/Collect.kt","webpack://k22/../../../../../common/src/flow/terminal/Collection.kt","webpack://k22/../../../../../common/src/internal/ArrayQueue.kt","webpack://k22/../../../../../common/src/internal/DispatchedTask.kt","webpack://k22/../../../../../common/src/internal/Symbol.kt","webpack://k22/../../../../../js/src/Runnable.kt","webpack://k22/../../../../../js/src/CompletionHandler.kt","webpack://k22/../../../../../js/src/CoroutineContext.kt","webpack://k22/../../../../../js/src/CoroutineExceptionHandlerImpl.kt","webpack://k22/../../../../../js/src/Debug.kt","webpack://k22/../../../../../js/src/Promise.kt","webpack://k22/../../../../../js/src/internal/Concurrent.kt","webpack://k22/../../../../../js/src/internal/CopyOnWriteList.kt","webpack://k22/./kotlin-dce/kotlin/jsTypeOf.kt","webpack://k22/../../../../../js/src/Dispatchers.kt","webpack://k22/../../../../../js/src/SchedulerTask.kt","webpack://k22/../../../../../js/src/Window.kt","webpack://k22/../../../../../js/src/flow/internal/SafeCollector.kt","webpack://k22/../../../../../js/src/internal/ThreadContext.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/dom/RDOMBuilder.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/dom/ReactDOM.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/dom/ReactDOMAttributes.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-dom/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-dom/cjs/react-dom.production.min.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/scheduler/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/scheduler/cjs/scheduler.production.min.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/react/router/dom/routingDsl.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/prop-types/factoryWithThrowingShims.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/node_modules/isarray/index.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/src/main/kotlin/redux/Helpers.kt","webpack://k22/(webpack)/buildin/harmony-module.js","webpack://k22/../../../../../runtime/jsMain/src/kotlinx/io/Buffers.kt","webpack://k22/../../../../../runtime/jsMain/src/kotlinx/io/Streams.kt","webpack://k22/../../../../../runtime/jsMain/src/kotlinx/serialization/DynamicObjectParser.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/ContextSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/Decoding.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/Exceptions.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/KSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/PlatformUtils.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/Polymorphic.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/SerialDescriptorBuilder.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/SerialKinds.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/Encoding.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/SerialDescriptor.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/SerializerResolving.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/Util.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/builtins/AbstractDecoder.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/builtins/AbstractEncoder.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/builtins/BuiltinSerializers.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/builtins/CollectionSerializers.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/builtins/PrimitiveSerializers.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/AbstractPolymorphicSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/CollectionDescriptors.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/CollectionSerializers.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/Enums.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/NullableSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/ObjectSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/PluginGeneratedSerialDescriptor.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/PrimitiveArraysSerializers.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/Primitives.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/Tagged.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/internal/Tuples.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/JsonElement.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/JsonElementSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/JsonExceptions.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/JsonParametricSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/JsonTransformingSerializer.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/internal/JsonReader.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/internal/StreamingJsonInput.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/internal/StreamingJsonOutput.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/internal/StringOps.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/PolymorphicModuleBuilder.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/SerialModule.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/SerialModuleBuilders.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/SerialModuleImpl.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/SerializerAlreadyRegisteredException.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/modules/StandardSubtypesOfAny.kt","webpack://k22/../../../../../runtime/jsMain/src/kotlinx/serialization/Serialization.kt","webpack://k22/../../../../../runtime/jsMain/src/kotlinx/serialization/internal/Arrays.kt","webpack://k22/../../../../../runtime/commonMain/src/kotlinx/serialization/json/Json.kt","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/redux-logger/dist/redux-logger.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/resolve-pathname/esm/resolve-pathname.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/value-equal/esm/value-equal.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/tiny-invariant/dist/tiny-invariant.esm.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/history/esm/history.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/Router.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Router.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/BrowserRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/HashRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Link.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/MemoryRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/MemoryRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/matchPath.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/Route.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Route.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/NavLink.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/Prompt.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Prompt.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/generatePath.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/Redirect.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Redirect.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/StaticRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/StaticRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/Switch.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/Switch.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/generatePath.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/matchPath.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router/es/withRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/withRouter.js","webpack://k22/C:/Users/Anna/IdeaProjects/untitled7 — копия/build/js/node_modules/react-router-dom/es/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","warning","condition","format","a","b","e","f","error","undefined","Error","args","argIndex","replace","framesToPop","Kotlin","buf","bufFloat64","bufInt32","lowIndex","highIndex","_","getObjectHashCode","obj","hash","Math","random","throwMarkerError","imul","isBooleanArray","Array","isArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toString","String","fromCharCode","map","join","getCallableRef","callableName","toByte","toChar","toBoxedChar","BoxedChar","unboxChar","equals","obj1","obj2","hashCode","objType","numberHashCode","Number","str","length","code","charCodeAt","getStringHashCode","identityHashCode","Long","this","low_","low","high_","high","$metadata$","IntCache_","fromInt","cachedObj","fromNumber","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","substring","indexOf","radixToPower","pow","result","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toInt","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","kotlin","ranges","LongRange","defineInlineFunction","fun","wrapFunction","apply","arguments","suspendCall","coroutineResult","coroutineReceiver","setCoroutineResult","getReifiedTypeParameterKType","compareTo","typeA","doubleCompareTo","primitiveCompareTo","ia","imulEmulated","doubleToRawBits","doubleFromBits","ensureNotNull","x","throwNPE","startsWith","position","lastIndexOf","searchString","endsWith","subjectString","lastIndex","sign","trunc","NaN","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","fill","TypeError","O","len","start","relativeStart","k","end","relativeEnd","final","normalizeOffset","offset","typedArraySlice","begin","constructor","subarray","arrays","TypedArray","slice","Function","self","array","callback","totalOrderComparator","sort","compareFunction","Kind","callGetter","thisObject","klass","propertyName","propertyDescriptor","getOwnPropertyDescriptor","getPrototypeOf","isType","proto","kind","OBJECT","klassMetadata","INTERFACE","isInheritanceFromInterface","ctor","iface","metadata","interfaces","superPrototype","superConstructor","isNumber","isChar","isCharSequence","CharSequence","ordinal","iterator","hasNext","NoSuchElementException","next","single","destination","item","emptySet","setOf","optimizeReadOnlySet","separator","prefix","postfix","limit","truncated","transform","buffer","count","element","to","last","first","step","EMPTY","minimumValue","maximumValue","emptySequence","TakeSequence","optimizeReadOnlyList","TransformingSequence","CharIterator","IntIterator","LongIterator","getProgressionLastElement","endInclusive","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","isEmpty","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","IntRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","index","current","v","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","CoroutineImpl","receiver","src","dst","srcLen","dstLen","source","newSize","defaultValue","ArrayList","fromIndex","toIndex","toArray","copyToArrayImpl","collection","push","pair","throwIndexOverflow","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","initialCapacity","copyToArray","elements","remove","modified","it","_index","changed","times","hasPrevious","newValue","oldValue","entries","clear","from","iter","entry","modCount","splice","concat","pop","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","createJsMap","keys","original","BaseOutput","BufferedOutput","initialResult","ClassCastException","message","cause","Exception","RuntimeException","NEGATIVE_INFINITY","toRawBits","bits","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","jClass","KClassImpl","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","state","lastEntry","_head","_tail","node","old","newEntry","println","outputStream","write","messageString","flush","console","cur","NotImplementedError","simpleName","jsClass","PrimitiveKClassImpl","functionClasses","arity","getOrCreateKClass","stringClass","SimpleKClassImpl","kClass","content","capacity","matches","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","toLowerCase","char","pattern","options","collectionSizeOrDefault","RegExp","match","IndexOutOfBoundsException","startIndex","endIndex","reversed","isLowSurrogate","isHighSurrogate","concatToString","_capacity","minimumCapacity","string","newLength","destinationOffset","dstIndex","stringCsq","reset","exec","input","test","findNext","Regex","replacement","lastStart","sb","foundMatch","range","nonGlobalOptions","subSequence","literal","AbstractList","ignoreCase","n1","n2","s1","s2","toUpperCase","regex","regionMatchesImpl","thisOffset","otherOffset","MatchGroup","previous","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","emptyList","listOf","ArithmeticException","values","contains","isVarargs","IndexingIterator","IndexedValue","checkIndexOverflow","pairs","putAll","emptyMap","filterInPlace","predicate","predicateResultToRemove","writeIndex","readIndex","removeIndex","j","copy","SequenceBuilderIterator","nextStep","block","SequenceScope","sequence","throwOnFailure","GeneratorSequence","seedFunction","nextFunction","FlatteningSequence","itemIterator","nextItemIterator","SubSequence","left","nextItem","nextState","toCollection","safe","getOrThrow","acc","removed","interceptor","CombinedContext","baseKey","operation","initial","newLeft","Random","defaultPlatformRandom","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","boundsErrorMessage","seed1","seed2","newIndent","lines","isBlank","line","resultSizeEstimate","isWhitespace","checkRadix","firstChar","limitBeforeMul","digitOf","digit","limitForMaxRadix","NumberFormatException","indices","regionMatches","currentStartIndex","strings","findAnyOf","currentIndex","second","DelimitedRangesSequence","asList","delimiters","splitToSequence","lineSequence","v0","takeUpperBits","nextSearchIndex","groupValues","initializer","isInitialized","InitializedLazyImpl","Pair","that","third","fillFrom","arrayCopyResize","type","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","stack","UnsafeLazyImpl","rangeSize","set","subrange","delegate","NullPointerException","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","toIntOrNull","numberFormatError","toLongOrNull","getOrImplicitDefault","mapOf","optimizeReadOnlyMap","replaceIndent","removeRange","NodeJsOutput","BufferedOutputToConsoleLog","assign","isarray","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","tokens","path","defaultDelimiter","delimiter","escaped","capture","group","modifier","asterisk","partial","repeat","optional","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","flags","opts","data","encode","pretty","encodeURIComponent","token","segment","JSON","stringify","attachKeys","re","sensitive","strict","route","endsWithDelimiter","groups","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","buildElements","RBuilder","handler","childList","nodes","Fragment","createElement","children","ref","props","RElementBuilder","clone","klazz","rClass","addAll","Children","attrs","functionalComponent","rawUseState","initValue","jsTuple","currentValue","setState","global","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","toObject","test1","getOwnPropertyNames","test2","test3","split","forEach","letter","err","shouldUseNative","target","symbols","SingletonStringMap","consumer","text","entity","attributeName","tag","tagName","thisRef","attributes","encoder","Attribute","trueValue","falseValue","BooleanEncoder","tickerEncode","EnumEncoder","realValue","valuesMap","joinToString","stringSetDecode","initialValues","HTMLTag","initialAttributes","DelegatingMap","attributeStringString","attributeBooleanTicker","attributeButtonFormEncTypeEnumButtonFormEncTypeValues","attributeButtonFormMethodEnumButtonFormMethodValues","attributeButtonTypeEnumButtonTypeValues","attributeInputTypeEnumInputTypeValues","attributeBooleanBooleanOnOff","attributeInputFormEncTypeEnumInputFormEncTypeValues","attributeInputFormMethodEnumInputFormMethodValues","attributeTextAreaWrapEnumTextAreaWrapValues","attributeThScopeEnumThScopeValues","immutableEntries","singletonMapOf","StringAttribute","StringSetAttribute","BooleanAttribute","TickerAttribute","EnumAttribute","buttonFormEncTypeValues","buttonFormMethodValues","buttonTypeValues","commandTypeValues","dirValues","draggableValues","formEncTypeValues","formMethodValues","iframeSandboxValues","inputFormEncTypeValues","inputFormMethodValues","inputTypeValues","keyGenKeyTypeValues","runAtValues","textAreaWrapValues","thScopeValues","coerceAtLeast","mapCapacity","mappings","maxCode","ActionTypes","INIT","REPLACE","_typeof","_extends","isPlainObject","createStore","reducer","preloadedState","enhancer","_ref2","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","dispatch","action","replaceReducer","nextReducer","_ref","outerSubscribe","observer","observeState","unsubscribe","getUndefinedStateErrorMessage","actionType","combineReducers","reducers","reducerKeys","finalReducers","finalReducerKeys","shapeAssertionError","assertReducerShape","hasChanged","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","bindActionCreators","actionCreators","boundActionCreators","compose","_len","funcs","arg","reduce","applyMiddleware","middlewares","_len2","_key2","store","_dispatch","middlewareAPI","middleware","g","REACT_STATICS","childContextTypes","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","descriptor","symbolObservablePonyfill","observable","attributesMapOf","currentGroupFC","currentQuestionFC","questionGroup","types","renderByTypesFC","getQuestionsByType","questionGroupIndex","questions","useState","visible","setVisible","document","querySelector","style","setProperty","navLink","IndicesWithQuestion","questionIndex","temp","child","typeIndex","setType","questionGroupXML","visibleImport","setVisibleImport","visibleExport","setVisibleExport","visibleExportFormat","setVisibleExportFormat","setCase","questionListToggleEdit","questionListEditable","id","question","useCase","deleteQuestion","addQuestion","submitInput","answers","fraction","answer","feedback","answersXML","questionXML","resSubstringBefore","resSubstringAfter","answersFormat","AnswerVariant","counter","Question","getFormatAnswers","quizs","QuestionGroup","getFormatQuestions","getFormatQuestionGroup","ImportQuestions","missingDelimiterValue","AddQuestion","getInputValue","DeleteQuestion","QuestionListToggleEdit","header","currentGroup","indexGroup","setUseCase","toggleEdit","currentQuestionEditable","changeQuestion","changeAnswerVariant","removeAnswerVariant","addAnswerVariant","ChangeAnswerVariant","CurrentQuestionToggleEdit","RemoveAnswerVariant","AddAnswerVariant","ChangeQuestion","inputSelector","inputElement","placeholder","currentQuestion","groupIndex","renderByTypes","fComp","hashRouter","render","rootDiv","questionGroupList","State","newID","newTitle","newQuestion","newType","newCase","questionGroupEditable","getWithNewAnswerVariant","newAnswer","newFraction","newFeedback","getWithRemovedAnswerVariant","answerIndex","getWithChangedAnswerVariant","getWithDeletedQuestion","getWithNewQuestion","newUseCase","getWithImportedQuestions","mutableListOf","counterID","rEnhancer","logger","getElementById","for","q","u","w","z","A","B","C","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","F","refs","updater","G","H","isReactComponent","forceUpdate","I","isPureReactComponent","J","K","L","__self","__source","M","h","$$typeof","_owner","P","Q","R","keyPrefix","func","S","V","T","U","done","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","only","Component","Profiler","PureComponent","StrictMode","Suspense","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","memo","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","attributesEntries","attrsMap","event","fixAttributeName","attribute","toSet","valuesArr","InnerHTML","container","toMutableMap","toMap","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","onError","da","ea","fa","ha","ja","la","ma","na","oa","currentTarget","ka","pa","qa","ra","sa","ta","ua","va","wa","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ia","Ja","_debugOwner","_debugSource","fileName","lineNumber","return","Ka","La","Ma","Na","extractEvents","eventTypes","Oa","phasedRegistrationNames","Pa","registrationName","Qa","Ra","dependencies","Sa","Ta","Ua","Va","Wa","Xa","stateNode","Ya","Za","$a","ab","bb","cb","db","eb","fb","gb","hb","ib","jb","kb","acceptsBooleans","attributeNamespace","mustUseProperty","sanitizeURL","ob","pb","qb","mb","nb","lb","removeAttribute","setAttribute","setAttributeNS","rb","nodeName","xb","_valueTracker","configurable","getValue","setValue","stopTracking","tb","yb","checked","zb","defaultChecked","_wrapperState","initialChecked","Ab","initialValue","controlled","Bb","Cb","Db","Eb","ownerDocument","activeElement","Gb","Fb","Hb","selected","defaultSelected","disabled","Ib","dangerouslySetInnerHTML","Jb","Kb","Lb","textContent","xlinkHref","Mb","Nb","Ob","Pb","Qb","MSApp","execUnsafeLocalFunction","namespaceURI","innerHTML","firstChild","removeChild","appendChild","Rb","lastChild","nodeType","nodeValue","Sb","Tb","animationend","animationiteration","animationstart","transitionend","Ub","Vb","Wb","animation","transition","Xb","Yb","Zb","$b","ac","bc","WeakMap","Map","cc","dc","alternate","effectTag","ec","memoizedState","dehydrated","fc","hc","sibling","gc","ic","jc","kc","lc","_dispatchListeners","_dispatchInstances","isPropagationStopped","isPersistent","release","mc","nc","srcElement","correspondingUseElement","parentNode","oc","pc","qc","topLevelType","nativeEvent","targetInst","ancestors","rc","eventSystemFlags","sc","containerInfo","tc","uc","has","vc","wc","xc","yc","zc","Ac","Bc","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Kc","blockedOn","Lc","delete","pointerId","Mc","Nc","Pc","unstable_runWithPriority","priority","hydrate","Qc","Rc","Sc","Tc","shift","Uc","unstable_scheduleCallback","unstable_NormalPriority","Vc","Wc","Yc","Zc","$c","ad","bubbled","captured","eventPriority","bd","cd","dd","unstable_UserBlockingPriority","ed","fd","gd","hd","addEventListener","Oc","jd","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","kd","ld","trim","md","nd","menuitem","area","base","br","col","embed","hr","img","keygen","link","meta","param","track","wbr","od","pd","is","qd","rd","sd","td","body","ud","vd","nextSibling","xd","HTMLIFrameElement","contentWindow","location","href","yd","contentEditable","Dd","Ed","Fd","autoFocus","Gd","__html","Hd","Id","Jd","Kd","previousSibling","Ld","Md","Nd","Od","Pd","Qd","Rd","Sd","Td","dispatchConfig","Ud","_targetInst","Vd","Wd","Xd","Yd","Zd","$d","ae","be","ce","Interface","isDefaultPrevented","defaultPrevented","returnValue","ee","eventPool","fe","destructor","de","getPooled","preventDefault","stopPropagation","cancelBubble","persist","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","extend","ge","he","ie","je","ke","documentMode","le","me","ne","oe","beforeInput","compositionEnd","compositionStart","compositionUpdate","pe","qe","keyCode","detail","se","ve","locale","which","te","ctrlKey","altKey","metaKey","ue","we","color","date","datetime","email","month","number","password","search","tel","time","url","week","xe","ye","change","ze","Ae","Be","Ce","De","Ee","Fe","Ge","detachEvent","He","Ie","attachEvent","Je","Ke","Le","Me","_isInputEventSupported","Ne","view","Oe","Alt","Control","Meta","Shift","Pe","getModifierState","Qe","Re","Se","Te","Ue","Ve","screenX","screenY","clientX","clientY","pageX","pageY","shiftKey","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","We","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Xe","mouseEnter","mouseLeave","pointerEnter","pointerLeave","Ye","defaultView","parentWindow","$e","af","bf","cf","df","select","ef","ff","gf","hf","jf","selectionStart","selectionEnd","anchorNode","getSelection","anchorOffset","focusNode","focusOffset","kf","onSelect","lf","animationName","elapsedTime","pseudoElement","mf","clipboardData","nf","of","charCode","pf","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","qf","8","9","12","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","rf","sf","dataTransfer","tf","touches","targetTouches","changedTouches","uf","vf","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","wf","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin","yf","zf","Af","Bf","Cf","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Df","Ef","Ff","getChildContext","Gf","__reactInternalMemoizedMergedChildContext","Hf","If","Jf","Kf","unstable_cancelCallback","Lf","unstable_requestPaint","Mf","unstable_now","Nf","unstable_getCurrentPriorityLevel","Of","unstable_ImmediatePriority","Pf","Qf","Rf","unstable_LowPriority","Sf","unstable_IdlePriority","Tf","Uf","unstable_shouldYield","Vf","Wf","Xf","Yf","Zf","$f","ag","bg","cg","dg","eg","fg","gg","hg","ig","jg","kg","lg","mg","ng","og","pg","childExpirationTime","qg","firstContext","expirationTime","rg","sg","observedBits","responders","tg","ug","updateQueue","baseState","baseQueue","shared","pending","effects","vg","wg","suspenseConfig","payload","xg","yg","zg","ca","Ag","Bg","Cg","Dg","Eg","Fg","Jg","_reactInternalFiber","Gg","Hg","Ig","Kg","shouldComponentUpdate","Lg","contextType","Mg","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Ng","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Og","Pg","_stringRef","Qg","Rg","lastEffect","nextEffect","firstEffect","Sg","Tg","elementType","Ug","implementation","Vg","Wg","Xg","Yg","Zg","$g","ah","bh","ch","dh","documentElement","eh","fh","gh","hh","memoizedProps","revealOrder","ih","responder","jh","kh","lh","mh","nh","oh","ph","qh","rh","sh","th","uh","vh","wh","lastRenderedReducer","eagerReducer","eagerState","lastRenderedState","xh","yh","zh","Ah","destroy","deps","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","Jh","Kh","Lh","Mh","Nh","readContext","useResponder","useDeferredValue","useTransition","Oh","Ph","Qh","Rh","Sh","Th","pendingProps","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","di","ei","fi","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","gi","getDerivedStateFromError","hi","pendingContext","ni","pi","qi","ii","retryTime","ji","fallback","unstable_avoidThisFallback","ki","li","isBackwards","rendering","renderingStartTime","tail","tailExpiration","tailMode","mi","ri","si","wasMultiple","multiple","onClick","onclick","createElementNS","createTextNode","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","WeakSet","Set","Ci","Fi","Ei","Gi","__reactInternalSnapshotBeforeUpdate","Hi","Ii","Ji","focus","Ki","Li","componentWillUnmount","Di","Mi","Ni","Oi","Pi","Qi","insertBefore","_reactRootContainer","Ri","Si","Ti","display","Ui","Vi","then","Wi","Xi","Yi","Zi","$i","componentDidCatch","aj","componentStack","Rj","bj","cj","dj","kj","lj","mj","nj","oj","qj","rj","sj","tj","uj","vj","wj","timeoutMs","xj","yj","zj","lastExpiredTime","Aj","firstPendingTime","lastPingedTime","nextKnownPendingLevel","callbackExpirationTime","callbackPriority","callbackNode","Bj","Cj","Dj","Ej","Fj","Gj","Hj","finishedWork","finishedExpirationTime","lastSuspendedTime","Ij","timeoutHandle","Jj","busyMinDurationMs","busyDelayMs","Kj","Mj","Nj","pingCache","Oj","ub","Pj","Xc","Qj","Sj","firstSuspendedTime","rangeCount","wb","activeElementDetached","focusedElem","selectionRange","Tj","wd","compareDocumentPosition","createRange","setStart","removeAllRanges","addRange","setEnd","scrollLeft","top","scrollTop","vb","Uj","Vj","Wj","hidden","default","Ha","Xj","unstable_observedBits","Zj","pendingChildren","ak","bk","ck","dk","ek","fk","Jc","_internalRoot","gk","ik","hasAttribute","hk","jk","kk","unmount","querySelectorAll","form","Lj","lk","Events","findFiberByHostInstance","bundleType","rendererPackageName","isDisabled","supportsFiber","inject","onCommitFiberRoot","onCommitFiberUnmount","Yj","overrideHookState","overrideProps","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","createPortal","findDOMNode","flushSync","unmountComponentAtNode","unstable_batchedUpdates","unstable_createPortal","unstable_renderSubtreeIntoContainer","MessageChannel","unstable_forceFrameRate","performance","cancelAnimationFrame","requestAnimationFrame","port2","port1","onmessage","postMessage","sortIndex","startTime","priorityLevel","unstable_Profiling","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","delay","unstable_wrapCallback","exact","className","activeClassName","isActive","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","propFullName","secret","getShim","isRequired","ReactPropTypes","bool","symbol","any","arrayOf","instanceOf","objectOf","oneOf","oneOfType","shape","checkPropTypes","PropTypes","arr","wrapperReducer","initialState","originalModule","webpackPolyfill","toDouble","toDoubleOrNull","super_","writable","prefilter","normalize","lhs","rhs","filter","groupCollapsed","groupEnd","actionTransformer","titleFormatter","timestamp","duration","toFixed","collapsed","colors","level","diff","started","startedTime","prevState","took","stateTransformer","errorTransformer","logErrors","diffPredicate","getHours","getMinutes","getSeconds","getMilliseconds","DeepDiff","defineProperties","observableDiff","applyDiff","applyChange","revertChange","isConflict","noConflict","transformer","defaults","createLogger","isAbsolute","pathname","spliceOne","list","hasTrailingSlash","toParts","fromParts","isToAbs","isFromAbs","mustEndAbs","up","part","unshift","valueEqual","every","aValue","bValue","addLeadingSlash","stripLeadingSlash","stripBasename","hasBasename","stripTrailingSlash","createPath","createLocation","currentLocation","hashIndex","searchIndex","parsePath","decodeURI","URIError","createTransitionManager","prompt","setPrompt","nextPrompt","confirmTransitionTo","getUserConfirmation","appendListener","fn","notifyListeners","canUseDOM","getConfirmation","confirm","getHistoryState","history","createBrowserHistory","globalHistory","canUseHistory","navigator","userAgent","needsHashChangeListener","_props","_props$forceRefresh","forceRefresh","_props$getUserConfirm","_props$keyLength","keyLength","basename","getDOMLocation","historyState","_window$location","createKey","transitionManager","handlePopState","isExtraneousPopstateEvent","handlePop","handleHashChange","forceNextPop","ok","fromLocation","toLocation","allKeys","go","revertPop","initialLocation","createHref","listenerCount","checkDOMListeners","removeEventListener","isBlocked","pushState","prevIndex","nextKeys","replaceState","goBack","goForward","unblock","listen","unlisten","HashPathCoders","hashbang","encodePath","decodePath","noslash","slash","stripHash","getHashPath","replaceHashPath","createHashHistory","_props$hashType","hashType","_HashPathCoders$hashT","ignorePath","encodedPath","prevLocation","allPaths","baseTag","getAttribute","pushHashPath","nextPaths","clamp","lowerBound","upperBound","createMemoryHistory","_props$initialEntries","initialEntries","_props$initialIndex","initialIndex","nextEntries","canGo","_classCallCheck","Constructor","_possibleConstructorReturn","ReferenceError","_React$Component","Router","_temp","_this","computeMatch","subClass","superClass","setPrototypeOf","_inherits","router","params","isExact","_this2","nextProps","BrowserRouter","HashRouter","isModifiedEvent","Link","handleClick","_this$props","innerRef","_objectWithoutProperties","MemoryRouter","patternCache","cacheCount","cacheKey","cache","compiledPattern","parent","_options","_options$exact","_options$strict","_options$sensitive","_compilePath","Route","computedMatch","component","nextContext","_context$router","staticContext","activeStyle","getIsActive","ariaCurrent","rest","escapedPath","Prompt","enable","disable","when","compiledGenerator","generator","Redirect","isStatic","perform","prevProps","prevTo","nextTo","computeTo","addBasename","methodName","StaticRouter","handlePush","handleReplace","_this$props2","handleListen","handleBlock","Switch","_element$props","pathProp","wrappedComponentRef","remainingProps","routeComponentProps","WrappedComponent"],"mappings":"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MAwMoG,GAApE,OK7HtC,GCPK,kBLwiDkDxD,GKxiD3CirB,GAAN,YDON,GL3EA,cK4EO,GL1EL5+B,UAFyB,OAArB,MAwMoG,GAApE,OK7HtC,GCJK,kBLqiDkD2T,GKriD9Cyd,ODIT,GL3EA,cK4EO,GL1ELpxB,UAFyB,OAArB,MAwMoG,GAApE,OK7HtC,GCDK,kBLkiDkD2T,GKliD9CkrB,UDCT,GL3EA,cK4EO,GL1EL7+B,UAFyB,OAArB,MAwMoG,GAApE,OK7HtC,GCEK,kBL+hDkD2T,GK/hD9CmV,MDFT,GL3EA,cK4EO,GL1EL9oB,UAFyB,OAArB,MAwMoG,GAApE,OK7HtC,GCKK,kBL4hDkD2T,GK5hD3CmrB,QAAN,YDLN,GL3EA,cK4EO,GL1EL9+B,UAFyB,OAArB,MAwMoG,GAApE,OMjHlC,GAJC29B,EDRL,GCQa,wCAAR,qCAAuD,IDR5D,GL3EA,cK4EO,GL1EL39B,UMqFKi7B,EAAM1C,WAAWoG,qB,CNvFG,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KMyDlG,UDdvB,GCeO,kBAAC,WACD,EDhBP,GCgBOpP,MAAwBwP,GAAe,EAAf,KDhB/B,GL3EA,cK4EO,GL1EL/+B,UKyEF,GL3EA,cK4EO,GL1ELA,UKyEF,GL3EA,cK4EO,GL1ELA,UMgGA,GAAGi7B,EAAM1C,WAAWoG,qB,CNlGK,OAArB,MAwNoG,GAApE,OAxNX,GAArB,MAwMoG,GAApE,OAxMX,GAArB,MA8GqO,YAA3J,KAAqC,KAAsB,KAAyB,OKnCpK,GC2BMpP,MAAA,YAAoB,KACpB,ED5BN,GC4BMA,MAAW,UD5BjB,GL3EA,cK4EO,GL1ELvvB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MA8GqO,UAA3J,KAAqC,KAAsB,KAAyB,OKnCpK,GCiCMuvB,MAAA,YAAoB,QACpB,EDlCN,GCkCMA,MAAW,aDlCjB,GL3EA,cK4EO,GL1ELvvB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MA8GqO,UAA3J,KAAqC,KAAsB,KAAyB,OKnCpK,GCuCMuvB,MAAA,YAAoB,WACpB,EDxCN,GCwCMA,MAAW,gBDxCjB,GL3EA,cK4EO,GL1ELvvB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KMuFnG,UD5CtB,GC6CM,kBAAC+8B,EAAA,gBACD,ED9CN,GC8CMxN,OAAwB,sBAExB,OADC,GAAwB,IAAb,GAAgB,EAAO,GACnC,KDhDN,GL3EA,cK4EO,GL1ELvvB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KM+FnG,UDpDtB,GCqDM,kBAAC,cACD,EDtDN,GCsDMuvB,OAAwB,sBAExB,OADC,IAAS,IACV,KDxDN,GL3EA,cK4EO,GL1ELvvB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OK2ClJ,GC6DM,kBAAC,YACD,ED9DN,GC8DMuvB,MAAwByP,GAAY,EAAOjC,EAAA,eAAnB,ID9D9B,GL3EA,cK4EO,GL1EL/8B,UKyEF,GL3EA,cK4EO,GL1ELA,UKyEF,GL3EA,cK4EO,GL1ELA,UKyEF,EL3EA,cK4EO,GL1ELA,UKyEF,EL3EA,cK4EO,EL1ELA,UAFyB,IMmJA,MAUC,MN7JD,GAArB,MA6DsG,GMkFxG,kBN/IuB,GAArB,MA6DsG,GMmFvG,gBNhJsB,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OMqHhJ,GD1EF,GCuEG,kBAAC,WACD,EDxEH,GCwEGuvB,OAAwB,sBAAiC,OAAhC,IAAkB,IAAc,KDxE5D,GL3EA,cK4EO,GL1ELvvB,UMmJA,E,CNrJyB,OAArB,MAIgJ,mCAAE,cAAE,GAAgB,OAAQ,EAAM,SAAU,EAAQ,QAAS,IAAU8Z,IAAvE,CAApH,KAAwB,KAAyB,OKuEnF,GC4EIyV,MAAA,KACC,wCAA0ChC,mBAAmB,iCNxJvC,OAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OK2ClJ,GC8Ea,kBAAC,WD9Ed,GL3EA,cK4EO,GL1ELvtB,UKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,OAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OM+H/I,GDpFH,GCiFI,kBAAC,wCACD,EDlFJ,GCkFIuvB,OAAwB,sBAA+C,OAA7C,IAAwB,IAAqB,KDlF3E,GL3EA,cK4EO,GL1ELvvB,UM6JKu+B,E,CN/JoB,OAArB,MA8JsG,+BAAE,cAAI5B,EAAgB,QAAS,GAAU7iB,IAAzC,CAArE,OKnFvC,GCqFI,qBDrFJ,GL3EA,cK4EO,GL1EL9Z,WKyEF,GL3EA,cK4EO,GL1ELA,UAFyB,IMuKA,MNvKA,GAArB,MA6DsG,GMuG7F,eNpKY,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OMyIhJ,GD9FF,GC2FG,kBAAC,UACD,ED5FH,GC4FGuvB,OAAwB,sBAAiC,OAAhC,IAAkB,IAAc,KD5F5D,GL3EA,cK4EO,GL1ELvvB,UMuKA,E,CNzKyB,OAArB,MA2MwL,qCAAE,cAAS,GAAgB,OAAQ,EAAM,OAAQ,EAAM,OAAQ,kBAAoB,QAAS,IAAU8Z,IAAtG,CAArJ,KAAsB,KAA4B,KAAyB,OMhChH,EDhGJ,GCgGIyV,MAAW,gBDhGf,GCiGIA,MAAA,YAAoB,0BDjGxB,GL3EA,cK4EO,GL1ELvvB,UAFyB,OAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OM+I9I,EDpGJ,GCoGIuvB,MAAwB0P,GAAY,IDpGxC,GCqGI,kBAAC,iBDrGL,GL3EA,cK4EO,GL1ELj/B,UMqLL,OD5GG,GL3EA,cK4EO,GL1ELA,UKyEF,EL3EA,cK4EO,GL1ELA,UKyEF,EL3EA,cK4EO,EL1ELA,UAFF,gBK4EO,EL1ELA,UMqLL,GArKD,iBACC,OAAAwvB,EAAgC,SAqKjC,eAEC,ILw6CmB,EKx6CfvoB,EAAS,CAAboQ,EAAa,ILw6CV,IAAgB,EKv6CnB6nB,ELu6CmB,wB,CAAA,eKt6ClBj4B,EAAA,GAAS,qBLs6CsBsN,EKt6CG4qB,SAAzB,yBLs6CsB5qB,EKp6CN6qB,OAFhB,oDLs6CsB7qB,EKh6CL8qB,SANjB,gDAWV,OAAOp4B,EAAA,EAGR,eAC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KAAyB,OKnCpK,GGgGMxN,MAAA,YPi8CiD5b,GOj8C1ByrB,OACvB,EHjGN,GGiGM7P,MAAW,yCHjGjB,GL3EA,cK4EO,GL1ELvvB,eKyEF,GG6FK,kBPo8CkD2T,GOp8C9CyrB,QH7FT,GL3EA,cK4EO,GL1ELp/B,UAFyB,OAArB,MAwMoG,GAApE,OQxBlC,GAAIi7B,EAAM1C,WAAWuI,wB,CRhLE,OAArB,MA8GqO,UAA3J,KAAqC,KAAsB,KAAyB,OKnCpK,GGyGMvR,MAAA,YPw7CiD5b,GOx7C1B0rB,SACvB,EH1GN,GG0GM9P,MAAW,2CH1GjB,GL3EA,cK4EO,GL1ELvvB,eKyEF,GGsGK,kBP27CkD2T,GO37C9C0rB,UHtGT,GL3EA,cK4EO,GL1ELr/B,UAFyB,OAArB,MAwMoG,GAApE,OQflC,GAAIi7B,EAAM1C,WAAWuI,wB,CRzLE,OAArB,MA8GqO,YAA3J,KAAqC,KAAsB,KAAyB,OKnCpK,GGkHMvR,MAAA,YP+6CiD5b,GO/6CvBwrB,SAAN,WACpB,EHnHN,GGmHM5P,MAAW,2CHnHjB,GL3EA,cK4EO,GL1ELvvB,eKyEF,GG+GK,kBPk7CkD2T,GOl7C3CwrB,SAAN,YAOH,GHtHH,GL3EA,cK4EO,GL1ELn/B,UQ+LIi7B,EAAM1C,WAAWuI,wB,CRjMI,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OK2ClJ,GGyHM,kBAAC,YACD,EH1HN,GG0HMvR,MAAwByR,GAAoB,GAApB,QH1H9B,GL3EA,cK4EO,GL1ELhhC,UKyEF,GL3EA,cK4EO,GL1ELA,UQsMC,GAAGi7B,EAAM1C,WAAWuI,wB,CRxMI,OAArB,MAwMoG,GAApE,OAxMX,GAArB,MAgCoN,GAAjK,KAAsC,KAA0B,KAAyB,OK2ClJ,GGgIM,kBAAC,WACD,EHjIN,GGiIMvR,MAAwB0R,GAAoB,GAApB,QHjI9B,GL3EA,cK4EO,GL1ELjhC,UKyEF,GL3EA,cK4EO,GL1ELA,UKyEF,GL3EA,cK4EO,GL1ELA,UQ+MD,GAAGi7B,EAAM1C,WAAWuI,wB,CRjNM,OAArB,MAwNoG,GAApE,OAxNX,GAArB,MAwM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M4H,GAA7F,KAAyB,OKpI9D,EI7DI,kBAAC,aJ6DL,EL3EA,cK4EO,EL1ELA,UAFyB,MAArB,MA+M4H,GAA7F,KAAyB,OKpI9D,EI1DI,kBAAC,UJ0DL,EL3EA,cK4EO,EL1ELA,UAFyB,MAArB,MA+M4H,GAA7F,KAAyB,OKpI9D,EIvDI,kBAAC,eJuDL,EL3EA,cK4EO,EL1ELA,UAFyB,MAArB,MA+M4H,GAA7F,KAAyB,OKpI9D,EIpDI,kBAAC,iBJoDL,EL3EA,cK4EO,EL1ELA,UAFyB,MAArB,MA+M4H,GAA7F,KAAyB,OKpI9D,EIjDI,kBAAC,UJiDL,EL3EA,cK4EO,EL1ELA,UKyEF,EL3EA,cK4EO,EL1ELA,UKyEF,EL3EA,cK4EO,EL1ELA,UAFyB,ICkmDX,EDlmDW,EAArB,MAsM0G,+BAAE,aAAM28B,EAAgB,QAAS,GAAU7iB,IAA3C,CAAvE,OC45CzC,IAAgB,EQnkDR,EAAAqjB,URmkDQ,wB,CAAA,eDlmDW,EAArB,MAwNoG,GAApE,OAxNX,EAArB,MAwMoG,GAApE,OK7HtC,EIzCK,kBRgkDwB5oB,EQhkDjBsqB,SAASD,GAAf,YJyCN,EL3EA,cK4EO,EL1EL5+B,UAFyB,MAArB,MAwMoG,GAApE,OK7HtC,EItCK,kBR6jDwBuU,EQ7jDpBsqB,SAASzN,OJsClB,EL3EA,cK4EO,EL1ELpxB,UAFyB,MAArB,MAwMoG,GAApE,OK7HtC,EInCK,kBR0jDwBuU,EQ1jDpBsqB,SAASA,UJmClB,EL3EA,cK4EO,EL1EL7+B,UAFyB,MAArB,MAwMoG,GAApE,OK7HtC,EIhCK,kBRujDwBuU,EQvjDpBsqB,SAAS/V,MJgClB,EL3EA,cK4EO,EL1EL9oB,UAFyB,MAArB,MAwMoG,GAApE,OK7HtC,EI7BK,kBRojDwBuU,EQpjDjBsqB,SAASC,QAAf,YJ6BN,EL3EA,cK4EO,EL1EL9+B,UAFyB,MAArB,MAwMoG,GAApE,OSvJjC29B,EJ0BL,EI1Ba,0BRijDgBppB,EQjjDa2oB,mBAA7B,IRijDgB3oB,EQjjDsCspB,mBAA9D,qCAA8E,IJ0BnF,EL3EA,cK4EO,EL1EL79B,UKyEF,EL3EA,cK4EO,EL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BACA,MACA,QACA,eACA,YACA,WACA,UACA,cACA,cACA,YACA,UACA,UACA,OACA,UACA,YACA,UACA,OACA,UACA,kBACA,cACA,WACA,SACA,cACA,OACA,WACA,UACA,QACA,MACA,WACA,WACA,YACA,UACA,OACA,aACA,cACA,aACA,iBACA,aACA,cACA,UACA,SACA,SACA,OACA,OACA,WACA,UACA,YACA,OACA,KACA,YACA,YACA,KACA,YACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,WACA,eACA,cACA,MACA,YACA,QACA,aACA,SACA,MACA,YACA,WACA,QACA,OACA,aACA,QACA,OACA,UACA,UACA,cACA,SACA,UACA,UACA,aACA,WACA,MACA,WACA,WACA,OACA,UACA,OACA,UACA,QACA,SACA,YACA,WACA,WACA,QACA,OACA,QACA,OACA,aACA,MACA,SACA,UACA,SACA,QACA,OACA,QACA,UACA,WACA,SACA,QACA,OACA,SACA,QACA,QACA,QACA,SzMuoCO,EAAM,EAAapD,EAAwB,OAqElD,IAAa,4B,CAAA,eACT1L,EAAY,UyM3sCgB,EzM2sCFC,EIjuCkCqL,cJiuClCrL,IyM3sCkD,MAAfi2B,EAARC,EzM4sClDn2B,IgBp0CP,EyLyHA,YAAI,QAAS,azLzHb,EyL0HA,YAAI,aAAc,iB,EzLzHX,E,EyLuII,IAGW,IAEG,IAEP,I,2EC/NtB,SAASo2B,IAEP,GAC4C,oBAAnCC,gCAC4C,mBAA5CA,+BAA+BD,SAFxC,CAMI,EAUJ,IAEEC,+BAA+BD,SAASA,GACxC,MAAO1W,GAGPvV,QAAQ5c,MAAMmyB,KAOhB0W,GACA3rC,EAAOD,QAAU,EAAQ,K;;;;;;;;GCtBd,IAAIooC,EAAG,EAAQ,GAASnmC,EAAE,EAAQ,IAAiBX,EAAE,EAAQ,IAAa,SAASokC,EAAE/iC,GAAG,IAAI,IAAIC,EAAE,yDAAyDD,EAAE9B,EAAE,EAAEA,EAAE2N,UAAU3H,OAAOhG,IAAI+B,GAAG,WAAWysB,mBAAmB7gB,UAAU3N,IAAI,MAAM,yBAAyB8B,EAAE,WAAWC,EAAE,iHAAiH,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","file":"k22.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"k22\"] = factory();\n\telse\n\t\troot[\"k22\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    String.prototype.startsWith = function(searchString, position) {\n        position = position || 0;\n        return this.lastIndexOf(searchString, position) === position;\n    };\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    String.prototype.endsWith = function(searchString, position) {\n        var subjectString = this.toString();\n        if (position === undefined || position > subjectString.length) {\n            position = subjectString.length;\n        }\n        position -= searchString.length;\n        var lastIndex = subjectString.indexOf(searchString, position);\n        return lastIndex !== -1 && lastIndex === position;\n    };\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Array.prototype.fill = function() {\n      // Steps 1-2.\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      var O = Object(this);\n\n      // Steps 3-5.\n      var len = O.length >>> 0;\n\n      // Steps 6-7.\n      var start = arguments[1];\n      var relativeStart = start >> 0;\n\n      // Step 8.\n      var k = relativeStart < 0 ?\n        Math.max(len + relativeStart, 0) :\n        Math.min(relativeStart, len);\n\n      // Steps 9-10.\n      var end = arguments[2];\n      var relativeEnd = end === undefined ?\n        len : end >> 0;\n\n      // Step 11.\n      var final = relativeEnd < 0 ?\n        Math.max(len + relativeEnd, 0) :\n        Math.min(relativeEnd, len);\n\n      // Step 12.\n      while (k < final) {\n        O[k] = value;\n        k++;\n      }\n\n      // Step 13.\n      return O;\n    };\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            TypedArray.prototype.fill = Array.prototype.fill;\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashSet<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashSet<E>(mapCapacity(capacity)).apply(builderAction)\n}\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@scan) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@scanIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement = last.toInt()\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first.toInt() else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toInt()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start.toLong(), endInclusive.toLong(), step).toLong()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\n@file:UseExperimental(ExperimentalUnsignedTypes::class)\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant on its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant on its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant on its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant on its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant on its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant on its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant on its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant on its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant on its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant on its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        return null as V\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The mutable map is invariant on its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.reflect\n\n/**\n * Represents variance applied to a type parameter on the declaration site (*declaration-site variance*),\n * or to a type in a projection (*use-site variance*).\n *\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/generics.html#variance)\n * for more information.\n *\n * @see [KTypeParameter.variance]\n * @see [KTypeProjection]\n */\n@SinceKotlin(\"1.1\")\nenum class KVariance {\n    /**\n     * The affected type parameter or type is *invariant*, which means it has no variance applied to it.\n     */\n    INVARIANT,\n\n    /**\n     * The affected type parameter or type is *contravariant*. Denoted by the `in` modifier in the source code.\n     */\n    IN,\n\n    /**\n     * The affected type parameter or type is *covariant*. Denoted by the `out` modifier in the source code.\n     */\n    OUT,\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        js(\"Error\").captureStackTrace(instance, instance::class.js);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @InlineOnly\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant on its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean = (this as MutableIterable<E>).removeAll { it in elements }\n    actual override fun retainAll(elements: Collection<E>): Boolean = (this as MutableIterable<E>).removeAll { it !in elements }\n\n    actual override fun clear(): Unit {\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant on its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean = removeAll { it in elements }\n    actual override fun retainAll(elements: Collection<E>): Boolean = removeAll { it !in elements }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            this@AbstractMutableList[last] = element\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The map is invariant on its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant on its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n    override fun toArray(): Array<Any?> = js(\"[]\").slice.call(array)\n\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    private val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n    }\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove workarounds for KT-22053 from direct Throwable inheritors\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null) {\n        Error::class.js.asDynamic().call(this, null, null)\n    }\n\n    actual constructor(message: String?) : this(message, null) {\n        Error::class.js.asDynamic().call(this, message, null)\n    }\n\n    actual constructor(cause: Throwable?) : this(undefined, cause) {\n        Error::class.js.asDynamic().call(this, undefined, cause)\n    }\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null) {\n        Exception::class.js.asDynamic().call(this, null, null)\n    }\n\n    actual constructor(message: String?) : this(message, null) {\n        Exception::class.js.asDynamic().call(this, message, null)\n    }\n\n    actual constructor(cause: Throwable?) : this(undefined, cause) {\n        Exception::class.js.asDynamic().call(this, undefined, cause)\n    }\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError private constructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"DEPRECATION\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = kotlin.js.Math.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport getKClass\nimport kotlin.reflect.KClass\nimport kotlin.reflect.js.internal.KClassImpl\n\n/**\n * Represents the constructor of a class. Instances of `JsClass` can be passed to JavaScript APIs that expect a constructor reference.\n */\nexternal interface JsClass<T : Any> {\n    /**\n     * Returns the unqualified name of the class represented by this instance.\n     */\n    val name: String\n}\n\n@Deprecated(\"Use class literal and extension property `js` instead.\", replaceWith = ReplaceWith(\"T::class.js\"), level = DeprecationLevel.ERROR)\nexternal fun <T : Any> jsClass(): JsClass<T>\n\n@Deprecated(\"Use class literal and extension property `js` instead.\", replaceWith = ReplaceWith(\"this::class.js\"), level = DeprecationLevel.ERROR)\nval <T : Any> T.jsClass: JsClass<T>\n    get() = when (jsTypeOf(this)) {\n        \"string\" -> js(\"String\")\n        \"number\" -> js(\"Number\")\n        \"boolean\" -> js(\"Boolean\")\n        else -> js(\"Object\").getPrototypeOf(this).constructor\n    }\n\n/**\n * Obtains a constructor reference for the given `KClass`.\n */\nval <T : Any> KClass<T>.js: JsClass<T>\n    get() = (this as KClassImpl<T>).jClass\n\n/**\n * Obtains a `KClass` instance for the given constructor reference.\n */\nval <T : Any> JsClass<T>.kotlin: KClass<T>\n    get() = getKClass(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n    override val annotations: List<Annotation>\n        get() = TODO()\n    override val constructors: Collection<KFunction<T>>\n        get() = TODO()\n    override val isAbstract: Boolean\n        get() = TODO()\n    override val isCompanion: Boolean\n        get() = TODO()\n    override val isData: Boolean\n        get() = TODO()\n    override val isFinal: Boolean\n        get() = TODO()\n    override val isInner: Boolean\n        get() = TODO()\n    override val isOpen: Boolean\n        get() = TODO()\n    override val isSealed: Boolean\n        get() = TODO()\n    override val members: Collection<KCallable<*>>\n        get() = TODO()\n    override val nestedClasses: Collection<KClass<*>>\n        get() = TODO()\n    override val objectInstance: T?\n        get() = TODO()\n    override val qualifiedName: String?\n        get() = TODO()\n    override val supertypes: List<KType>\n        get() = TODO()\n    override val typeParameters: List<KTypeParameter>\n        get() = TODO()\n    override val sealedSubclasses: List<KClass<out T>>\n        get() = TODO()\n    override val visibility: KVisibility?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: JsClass<T>): KClass<T> = getOrCreateKClass(jClass)\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getOrCreateKClass(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\nprivate fun <T : Any> getOrCreateKClass(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n        this.asDynamic()._capacity = capacity\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    @UseExperimental(ExperimentalStdlibApi::class)\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder = this.appendRange(value, startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun append(value: CharArray): StringBuilder {\n        string += value.concatToString()\n        return this\n    }\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    actual fun append(value: String): StringBuilder {\n        this.string += value\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun capacity(): Int = if (this.asDynamic()._capacity !== undefined) maxOf(this.asDynamic()._capacity, length) else length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun ensureCapacity(minimumCapacity: Int) {\n        if (minimumCapacity > capacity()) {\n            this.asDynamic()._capacity = minimumCapacity\n        }\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: String): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        this.string = this.string.substring(0, index) + value + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun trimToSize() {\n        if (this.asDynamic()._capacity !== undefined) {\n            this.asDynamic()._capacity = length\n        }\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n     *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n// actually \\s is enough to match all whitespace, but \\xA0 added because of different regexp behavior of Rhino used in Selenium tests\npublic actual fun Char.isWhitespace(): Boolean = toString().matches(\"[\\\\s\\\\xA0]\")\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = js(\"String.fromCharCode\")(toInt()).toLowerCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = js(\"String.fromCharCode\")(toInt()).toUpperCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the contents of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\npublic actual fun String.toBoolean(): Boolean = toLowerCase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.toLowerCase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? = nativePattern.findNext(input.toString(), startIndex)\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> =\n        generateSequence({ find(input, startIndex) }, { match -> match.next() })\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    if (this == null)\n        other == null\n    else if (!ignoreCase)\n        this == other\n    else\n        other != null && this.toLowerCase() == other.toLowerCase()\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter uppercased, or the original string,\n * if it's empty or already starts with an upper case letter.\n *\n * @sample samples.text.Strings.capitalize\n */\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased, or the original string,\n * if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gi\" else \"g\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gi\" else \"g\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"i\" else \"\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"i\" else \"\"), newChar.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The map is covariant on its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Data class representing a value from a collection or sequence, along with its index in that collection or sequence.\n *\n * @property value the underlying value.\n * @property index the index of the value in the collection or sequence.\n */\npublic data class IndexedValue<out T>(public val index: Int, public val value: T)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n\n/**\n * Returns the given iterator itself. This allows to use an instance of iterator in a `for` loop.\n * @sample samples.collections.Iterators.iterator\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Iterator<T>.iterator(): Iterator<T> = this\n\n/**\n * Returns an [Iterator] that wraps each element produced by the original iterator\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * @sample samples.collections.Iterators.withIndexIterator\n */\npublic fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>> = IndexingIterator(this)\n\n/**\n * Performs the given [operation] on each element of this [Iterator].\n * @sample samples.collections.Iterators.forEachIterator\n */\npublic inline fun <T> Iterator<T>.forEach(operation: (T) -> Unit): Unit {\n    for (element in this) operation(element)\n}\n\n/**\n * Iterator transforming original `iterator` into iterator of [IndexedValue], counting index from zero.\n */\ninternal class IndexingIterator<out T>(private val iterator: Iterator<T>) : Iterator<IndexedValue<T>> {\n    private var index = 0\n    final override fun hasNext(): Boolean = iterator.hasNext()\n    final override fun next(): IndexedValue<T> = IndexedValue(checkIndexOverflow(index++), iterator.next())\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:UseExperimental(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'sequence { }' function instead.\", ReplaceWith(\"sequence(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(builderAction) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'iterator { }' function instead.\", ReplaceWith(\"iterator(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildIterator(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T> = iterator(builderAction)\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\n@Deprecated(\"Use SequenceScope class instead.\", ReplaceWith(\"SequenceScope<T>\"), level = DeprecationLevel.ERROR)\npublic typealias SequenceBuilder<T> = SequenceScope<T>\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element is it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T =\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random() {\n\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray = defaultRandom.nextBytes(array, fromIndex, toIndex)\n\n        @Deprecated(\"Use Default companion object instead\", level = DeprecationLevel.HIDDEN)\n        @Suppress(\"DEPRECATION_ERROR\")\n        @kotlin.jvm.JvmField\n        public val Companion: Random.Companion = Random.Companion\n    }\n\n    @Deprecated(\"Use Default companion object instead\", level = DeprecationLevel.HIDDEN)\n    public object Companion : Random() {\n        override fun nextBits(bitCount: Int): Int = Default.nextBits(bitCount)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@UseExperimental(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom\ninternal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random() {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T : Appendable> T.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes\n * the first and the last lines if they are blank (notice difference blank vs empty).\n *\n * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.\n *\n * Doesn't preserve the original line endings.\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n *\n * @sample samples.text.Strings.trimMargin\n * @see trimIndent\n * @see kotlin.text.isWhitespace\n */\npublic fun String.trimMargin(marginPrefix: String = \"|\"): String =\n    replaceIndentByMargin(\"\", marginPrefix)\n\n/**\n * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n */\npublic fun String.replaceIndentByMargin(newIndent: String = \"\", marginPrefix: String = \"|\"): String {\n    require(marginPrefix.isNotBlank()) { \"marginPrefix must be non-blank string.\" }\n    val lines = lines()\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->\n        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }\n\n        when {\n            firstNonWhitespaceIndex == -1 -> null\n            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)\n            else -> null\n        }\n    })\n}\n\n/**\n * Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\n * lines if they are blank (notice difference blank vs empty).\n *\n * Note that blank lines do not affect the detected indent level.\n *\n * In case if there are non-blank lines with no leading whitespace characters (no indent at all) then the\n * common indent is 0, and therefore this function doesn't change the indentation.\n *\n * Doesn't preserve the original line endings.\n *\n * @sample samples.text.Strings.trimIndent\n * @see trimMargin\n * @see kotlin.text.isBlank\n */\npublic fun String.trimIndent(): String = replaceIndent(\"\")\n\n/**\n * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].\n */\npublic fun String.replaceIndent(newIndent: String = \"\"): String {\n    val lines = lines()\n\n    val minCommonIndent = lines\n        .filter(String::isNotBlank)\n        .map(String::indentWidth)\n        .min() ?: 0\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })\n}\n\n/**\n * Prepends [indent] to every line of the original string.\n *\n * Doesn't preserve the original line endings.\n */\npublic fun String.prependIndent(indent: String = \"    \"): String =\n    lineSequence()\n        .map {\n            when {\n                it.isBlank() -> {\n                    when {\n                        it.length < indent.length -> indent\n                        else -> it\n                    }\n                }\n                else -> indent + it\n            }\n        }\n        .joinToString(\"\\n\")\n\nprivate fun String.indentWidth(): Int = indexOfFirst { !it.isWhitespace() }.let { if (it == -1) length else it }\n\nprivate fun getIndentFunction(indent: String) = when {\n    indent.isEmpty() -> { line: String -> line }\n    else -> { line: String -> indent + line }\n}\n\nprivate inline fun List<String>.reindent(\n    resultSizeEstimate: Int,\n    indentAddFunction: (String) -> String,\n    indentCutFunction: (String) -> String?\n): String {\n    val lastIndex = lastIndex\n    return mapIndexedNotNull { index, value ->\n        if ((index == 0 || index == lastIndex) && value.isBlank())\n            null\n        else\n            indentCutFunction(value)?.let(indentAddFunction) ?: value\n    }\n        .joinTo(StringBuilder(resultSizeEstimate), \"\\n\")\n        .toString()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@UseExperimental(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].toInt()\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].toInt()\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}",null,null,null,null,"package kotlinext.js\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T {\n    val obj: T = js(\"({})\")\n    return obj.apply {\n        builder()\n    }\n}\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = Object.assign(jsObject<T> {}, obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\n@Deprecated(\n    message = \"Use Object.assign instead\",\n    replaceWith = ReplaceWith(\"Object.assign(dest, src)\", \"kotlinext.js\")\n)\nfun <T, R : T> assign(dest: R, src: T): R = Object.assign(dest, src)\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","package react\n\nimport kotlinext.js.*\nimport kotlin.reflect.*\n\n@DslMarker\nannotation class ReactDsl\n\n@ReactDsl\nopen class RBuilder {\n    val childList = mutableListOf<Any>()\n\n    fun child(element: ReactElement): ReactElement {\n        childList.add(element)\n        return element\n    }\n\n    operator fun String.unaryPlus() {\n        childList.add(this)\n    }\n\n    fun <P : RProps> child(type: Any, props: P, children: List<Any>) =\n        child(createElement(type, props, *children.toTypedArray()))\n\n    fun <P : RProps> child(type: Any, props: P, handler: RHandler<P>): ReactElement {\n        val children = with(RElementBuilder(props)) {\n            handler()\n            childList\n        }\n        return child(type, props, children)\n    }\n\n    operator fun <P : RProps> RClass<P>.invoke(handler: RHandler<P>) =\n        child(this, jsObject {}, handler)\n\n    operator fun <T> RProvider<T>.invoke(value: T, handler: RHandler<RProviderProps<T>>) =\n        child(this, jsObject { this.value = value }, handler)\n\n    operator fun <T> RConsumer<T>.invoke(handler: RBuilder.(T) -> Unit) =\n        child(this, jsObject<RConsumerProps<T>> {\n            this.children = { value ->\n                buildElements { handler(value) }\n            }\n        }) {}\n\n    fun <P : RProps> RClass<P>.node(\n        props: P,\n        children: List<Any> = emptyList()\n    ) = child(this, clone(props), children)\n\n    fun <P : RProps, C : Component<P, *>> child(klazz: KClass<C>, handler: RHandler<P>): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass(handler)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> child(noinline handler: RHandler<P>) =\n        child(C::class, handler)\n\n    fun <P : RProps, C : Component<P, *>> node(\n        klazz: KClass<C>,\n        props: P,\n        children: List<Any> = emptyList()\n    ): ReactElement {\n        val rClass = klazz.js as RClass<P>\n        return rClass.node(props, children)\n    }\n\n    inline fun <P : RProps, reified C : Component<P, *>> node(props: P, children: List<Any> = emptyList()) =\n        node(C::class, props, children)\n\n    fun RProps.children() {\n        childList.addAll(Children.toArray(children))\n    }\n}\n\nopen class RBuilderMultiple : RBuilder() {\n}\n\nfun buildElements(handler: RBuilder.() -> Unit): dynamic {\n    val nodes = RBuilder().apply(handler).childList\n    return when {\n        nodes.size == 0 -> null\n        nodes.size == 1 -> nodes.first()\n        else -> createElement(Fragment, js {}, *nodes.toTypedArray())\n    }\n}\n\nopen class RBuilderSingle : RBuilder() {\n}\n\ninline fun buildElement(handler: RBuilder.() -> Unit): ReactElement? =\n    RBuilder().apply(handler).childList.first() as ReactElement?\n\nopen class RElementBuilder<out P : RProps>(open val attrs: P) : RBuilder() {\n    fun attrs(handler: P.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = attrs.key\n        set(value) {\n            attrs.key = value\n        }\n\n    var ref: RRef\n        get() = attrs.ref\n        set(value) {\n            attrs.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        attrs.ref(handler)\n    }\n}\n\ntypealias RHandler<P> = RElementBuilder<P>.() -> Unit\n\nfun <P : RProps> forwardRef(handler: RBuilder.(RProps, RRef) -> Unit): RClass<P> {\n    return rawForwardRef { props, ref ->\n        buildElements { handler(props, ref) }\n    }\n}\n\ntypealias FunctionalComponent<P> = (props: P) -> dynamic\n\n/**\n * Get functional component from [func]\n */\nfun <P : RProps> functionalComponent(\n    func: RBuilder.(props: P) -> Unit\n): FunctionalComponent<P> {\n    return { props: P ->\n        buildElements {\n            func(props)\n        }\n    }\n}\n\n/**\n * Append functional component [functionalComponent] as child of current builder\n */\nfun <P : RProps> RBuilder.child(\n    functionalComponent: FunctionalComponent<P>,\n    props: P = jsObject {},\n    handler: RHandler<P> = {}\n): ReactElement {\n    return child(functionalComponent, props, handler)\n}\n","package react\n\nimport kotlinext.js.*\n\n// Props\nexternal interface RProps\n\nval RProps.children: Any get() = asDynamic().children\nvar RProps.key: String\n    get() = error(\"key cannot be read from props\")\n    set(value) {\n        asDynamic().key = value\n    }\n\nvar RProps.ref: RRef\n    get() = error(\"ref cannot be read from props\")\n    set(value) {\n        asDynamic().ref = value\n    }\n\nfun <T> RProps.ref(ref: (T?) -> Unit) {\n    asDynamic().ref = ref\n}\n\n// State\nexternal interface RState\n\nclass BoxedState<T>(var state: T) : RState\n\n// Error info\nexternal interface RErrorInfo\n\nval RErrorInfo.componentStack: Any get() = asDynamic().componentStack\n\n// TODO: Should extend RComponentClassStatics, but has problems with generic params\nexternal interface RClass<in P : RProps> : RComponentClassStatics<RProps, RState, RContext<Any>?>\n\nexternal interface RComponentClassStatics<P : RProps, S : RState, C : RContext<Any>?> {\n    var displayName: String?\n\n    var defaultProps: P?\n\n    var contextType: C\n\n    var getDerivedStateFromProps: ((P, S) -> S?)?\n\n    var getDerivedStateFromError: ((Throwable) -> S?)?\n}\n\nexternal interface RProviderProps<T> : RProps {\n    var value: T\n}\n\nexternal interface RProvider<T> : RClass<RProviderProps<T>>\n\nexternal interface RConsumerProps<T> : RProps {\n    var children: (T) -> Any\n}\n\nexternal interface RConsumer<T> : RClass<RConsumerProps<T>>\n\n// Context (16.3+)\nexternal interface RContext<T> {\n    val Provider: RProvider<T>\n    val Consumer: RConsumer<T>\n}\n\n// Refs (16.3+)\nexternal interface RRef\n\nexternal interface RReadableRef<out T> : RRef {\n    val current: T?\n}\n\nfun <S : RState> Component<*, S>.setState(buildState: S.() -> Unit) =\n    setState({ assign(it, buildState) })\n\ninline fun <P : RProps> rFunction(\n    displayName: String,\n    crossinline render: RBuilder.(P) -> Unit\n): RClass<P> {\n    val fn = { props: P -> buildElements { render(props) } } as RClass<P>\n    fn.displayName = displayName\n    return fn\n}\n\nabstract class RComponent<P : RProps, S : RState> : Component<P, S> {\n    constructor() : super() {\n        state = jsObject { init() }\n    }\n\n    constructor(props: P) : super(props) {\n        state = jsObject { init(props) }\n    }\n\n    open fun S.init() {}\n\n    // if you use this method, don't forget to pass props to the constructor first\n    open fun S.init(props: P) {}\n\n    fun RBuilder.children() {\n        props.children()\n    }\n\n    abstract fun RBuilder.render()\n\n    override fun render() = buildElements { render() }\n}\n\nabstract class RPureComponent<P : RProps, S : RState> : PureComponent<P, S> {\n    constructor() : super() {\n        state = jsObject { init() }\n    }\n\n    constructor(props: P) : super(props) {\n        state = jsObject { init(props) }\n    }\n\n    open fun S.init() {}\n\n    // if you use this method, don't forget to pass props to the constructor first\n    open fun S.init(props: P) {}\n\n    fun RBuilder.children() {\n        props.children()\n    }\n\n    abstract fun RBuilder.render()\n\n    override fun render() = buildElements { render() }\n}\n","package react\n\ntypealias RDependenciesArray = Array<dynamic>\ntypealias RDependenciesList = List<dynamic>\n\ntypealias RSetState<T> = (value: T) -> Unit\n\nfun <T> useState(initValue: T): Pair<T, RSetState<T>> {\n    val jsTuple = rawUseState(initValue)\n    val currentValue = jsTuple[0] as T\n    val setState = jsTuple[1] as RSetState<T>\n    return currentValue to setState\n}\n\nfun <T> useState(valueInitializer: () -> T): Pair<T, RSetState<T>> {\n    val jsTuple = rawUseState(valueInitializer)\n    val currentValue = jsTuple[0] as T\n    val setState = jsTuple[1] as RSetState<T>\n    return currentValue to setState\n}\n\ntypealias RReducer<S, A> = (state: S, action: A) -> S\ntypealias RDispatch<A> = (action: A) -> Unit\n\nfun <S, A> useReducer(reducer: RReducer<S, A>, initState: S, initialAction: A? = null): Pair<S, RDispatch<A>> {\n    val jsTuple = if (initialAction != null) {\n        rawUseReducer(reducer, initState, initialAction)\n    } else {\n        rawUseReducer(reducer, initState)\n    }\n    val currentState = jsTuple[0] as S\n    val dispatch = jsTuple[1] as RDispatch<A>\n    return currentState to dispatch\n}\n\nfun <S, A> useReducer(reducer: RReducer<S?, A>): Pair<S?, RDispatch<A>> {\n    return useReducer(reducer, null)\n}\n\ntypealias RCleanup = () -> Unit\n\nfun useEffectWithCleanup(dependencies: RDependenciesList? = null, effect: () -> RCleanup) {\n    if (dependencies != null) {\n        rawUseEffect(effect, dependencies.toTypedArray())\n    } else {\n        rawUseEffect(effect)\n    }\n}\n\nfun useEffect(dependencies: RDependenciesList? = null, effect: () -> Unit) {\n    val rawEffect = {\n        effect()\n        undefined\n    }\n    if (dependencies != null) {\n        rawUseEffect(rawEffect, dependencies.toTypedArray())\n    } else {\n        rawUseEffect(rawEffect)\n    }\n}\n\nfun useLayoutEffectWithCleanup(dependencies: RDependenciesList? = null, effect: () -> RCleanup) {\n    if (dependencies != null) {\n        rawUseLayoutEffect(effect, dependencies.toTypedArray())\n    } else {\n        rawUseLayoutEffect(effect)\n    }\n}\n\nfun useLayoutEffect(dependencies: RDependenciesList? = null, effect: () -> Unit) {\n    val rawEffect = {\n        effect()\n        undefined\n    }\n    if (dependencies != null) {\n        rawUseLayoutEffect(rawEffect, dependencies.toTypedArray()\n        )\n    } else {\n        rawUseLayoutEffect(rawEffect)\n    }\n}\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","package kotlinx.html\r\n\r\nimport org.w3c.dom.events.*\r\n\r\ninterface TagConsumer<out R> {\r\n    fun onTagStart(tag: Tag)\r\n    fun onTagAttributeChange(tag: Tag, attribute: String, value: String?)\r\n    fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit)\r\n    fun onTagEnd(tag: Tag)\r\n    fun onTagContent(content: CharSequence)\r\n    fun onTagContentEntity(entity: Entities)\r\n    fun onTagContentUnsafe(block: Unsafe.() -> Unit)\r\n    fun onTagComment(content: CharSequence)\r\n    fun onTagError(tag: Tag, exception: Throwable): Unit = throw exception\r\n    fun finalize(): R\r\n}\r\n\r\n@HtmlTagMarker\r\ninterface Tag {\r\n    val tagName: String\r\n    val consumer: TagConsumer<*>\r\n    val namespace: String?\r\n\r\n    val attributes: MutableMap<String, String>\r\n    val attributesEntries: Collection<Map.Entry<String, String>>\r\n\r\n    val inlineTag: Boolean\r\n    val emptyTag: Boolean\r\n\r\n    operator fun Entities.unaryPlus(): Unit {\r\n        entity(this)\r\n    }\r\n\r\n    operator fun String.unaryPlus(): Unit {\r\n        text(this)\r\n    }\r\n\r\n    fun text(s: String) {\r\n        consumer.onTagContent(s)\r\n    }\r\n\r\n    fun text(n: Number) {\r\n        text(n.toString())\r\n    }\r\n\r\n    fun entity(e: Entities) {\r\n        consumer.onTagContentEntity(e)\r\n    }\r\n\r\n    fun comment(s: String) {\r\n        consumer.onTagComment(s)\r\n    }\r\n}\r\n\r\n@HtmlTagMarker\r\ninterface Unsafe {\r\n    operator fun String.unaryPlus()\r\n    operator fun Entities.unaryPlus() = +text\r\n\r\n    fun raw(s: String) {\r\n        +s\r\n    }\r\n\r\n    fun raw(entity: Entities) {\r\n        +entity\r\n    }\r\n\r\n    fun raw(n: Number) {\r\n        +n.toString()\r\n    }\r\n}\r\n\r\ninterface AttributeEnum {\r\n    val realValue: String\r\n}\r\n\r\ninline fun <T : Tag> T.visit(crossinline block: T.() -> Unit) = visitTag { block() }\r\n\r\ninline fun <T : Tag, R> T.visitAndFinalize(consumer: TagConsumer<R>, crossinline block: T.() -> Unit): R\r\n        = visitTagAndFinalize(consumer) { block() }\r\n\r\nfun attributesMapOf() = emptyMap\r\nfun attributesMapOf(key: String, value: String?): Map<String, String> = when (value) {\r\n    null -> emptyMap\r\n    else -> singletonMapOf(key, value)\r\n}\r\n\r\nfun attributesMapOf(vararg pairs: String?): Map<String, String> {\r\n    var result: MutableMap<String, String>? = null\r\n\r\n    for (i in 0..pairs.size - 1 step 2) {\r\n        val k = pairs[i]\r\n        val v = pairs[i + 1]\r\n        if (k != null && v != null) {\r\n            if (result == null) {\r\n                result = linkedMapOf()\r\n            }\r\n            result.put(k, v)\r\n        }\r\n    }\r\n\r\n    return result ?: emptyMap\r\n}\r\n\r\nfun singletonMapOf(key: String, value: String): Map<String, String> = SingletonStringMap(key, value)\r\n\r\nfun HTMLTag.unsafe(block: Unsafe.() -> Unit): Unit = consumer.onTagContentUnsafe(block)\r\n\r\nval emptyMap: Map<String, String> = emptyMap()\r\n\r\nclass DefaultUnsafe : Unsafe {\r\n    private val sb = StringBuilder()\r\n\r\n    override fun String.unaryPlus() {\r\n        sb.append(this)\r\n    }\r\n\r\n    override fun toString(): String = sb.toString()\r\n}\r\n\r\n@DslMarker\r\nannotation class HtmlTagMarker\r\n\r\ntypealias HtmlContent = FlowOrPhrasingContent\r\n\r\nprivate data class SingletonStringMap(override val key: String, override val value: String) : Map<String, String>, Map.Entry<String, String> {\r\n    override val entries: Set<Map.Entry<String, String>>\r\n        get() = setOf(this)\r\n\r\n    override val keys: Set<String>\r\n        get() = setOf(key)\r\n\r\n    override val size: Int\r\n        get() = 1\r\n\r\n    override val values: Collection<String>\r\n        get() = listOf(value)\r\n\r\n    override fun containsKey(key: String) = key == this.key\r\n    override fun containsValue(value: String) = value == this.value\r\n    override fun get(key: String): String? = if (key == this.key) value else null\r\n    override fun isEmpty() = false\r\n}\r\n","package kotlinx.html.attributes\r\n\r\nimport kotlinx.html.*\r\n\r\ninterface AttributeEncoder<T> {\r\n    fun encode(attributeName: String, value : T) : String\r\n    fun decode(attributeName: String, value : String) : T\r\n    fun empty(attributeName: String, tag: Tag) : T = throw IllegalStateException(\"Attribute $attributeName is not yet defined for tag ${tag.tagName}\")\r\n}\r\n\r\nabstract class Attribute<T>(val encoder : AttributeEncoder<T>) {\r\n    open operator fun get(thisRef: Tag, attributeName: String) : T =\r\n            thisRef.attributes[attributeName]?.let {\r\n                encoder.decode(attributeName, it)\r\n            } ?: encoder.empty(attributeName, thisRef)\r\n\r\n    open operator fun set(thisRef: Tag, attributeName: String, value : T) {\r\n        thisRef.attributes.put(attributeName, encoder.encode(attributeName, value))\r\n    }\r\n}\r\n\r\nobject StringEncoder : AttributeEncoder<String> {\r\n    override fun encode(attributeName: String, value: String): String = value\r\n    override fun decode(attributeName: String, value: String): String = value\r\n}\r\n\r\nclass StringAttribute : Attribute<String>(StringEncoder)\r\n\r\n//public class IntAttribute : Attribute<Int>() {\r\n//    override fun encode(desc: PropertyMetadata, value: Int): String = value.toString()\r\n//    override fun decode(desc: PropertyMetadata, value: String): Int = value.toInt()\r\n//}\r\n\r\nfun Boolean.booleanEncode() = toString()\r\nclass BooleanEncoder(val trueValue: String = \"true\", val falseValue: String = \"false\") : AttributeEncoder<Boolean> {\r\n    override fun encode(attributeName: String, value : Boolean): String = if (value) trueValue else falseValue\r\n    override fun decode(attributeName: String, value: String): Boolean = when (value) {\r\n        trueValue -> true\r\n        falseValue -> false\r\n        else -> throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\r\n    }\r\n}\r\n\r\nclass BooleanAttribute(trueValue: String = \"true\", falseValue: String = \"false\") : Attribute<Boolean>(BooleanEncoder(trueValue, falseValue))\r\n\r\nfun Boolean.tickerEncode(attributeName: String) : String = if (this) attributeName else \"\"\r\nobject TickerEncoder : AttributeEncoder<Boolean> {\r\n    override fun encode(attributeName: String, value: Boolean): String = value.tickerEncode(attributeName)\r\n    override fun decode(attributeName: String, value: String): Boolean = value == attributeName\r\n}\r\n\r\nclass TickerAttribute : Attribute<Boolean>(TickerEncoder) {\r\n    override fun set(thisRef: Tag, attributeName: String, value: Boolean) {\r\n        if (value) {\r\n            thisRef.attributes.put(attributeName, attributeName)\r\n        } else {\r\n            thisRef.attributes.remove(attributeName)\r\n        }\r\n    }\r\n}\r\n\r\nclass EnumEncoder<T : AttributeEnum>(val valuesMap : Map<String, T>) : AttributeEncoder<T> {\r\n    override fun encode(attributeName: String, value: T): String = value.realValue\r\n    override fun decode(attributeName: String, value: String): T = valuesMap[value] ?: throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\r\n}\r\n\r\nfun AttributeEnum.enumEncode() : String = realValue\r\nclass EnumAttribute<T : AttributeEnum>(val values : Map<String, T>) : Attribute<T>(EnumEncoder(values))\r\n\r\nfun stringSetDecode(value: String?): Set<String>? = value?.split(\"\\\\s+\".toRegex())?.filterNot {it.isEmpty()}?.toSet()\r\nfun Set<String>.stringSetEncode() = joinToString(\" \")\r\nobject StringSetEncoder : AttributeEncoder<Set<String>> {\r\n    override fun encode(attributeName: String, value: Set<String>): String = value.joinToString(\" \")\r\n    override fun decode(attributeName: String, value: String): Set<String> = stringSetDecode(value)!!\r\n    override fun empty(attributeName: String, tag: Tag) = emptySet<String>()\r\n}\r\nclass StringSetAttribute : Attribute<Set<String>>(StringSetEncoder)","package kotlinx.html.impl\r\n\r\nimport kotlinx.html.*\r\n\r\nclass DelegatingMap(initialValues : Map<String, String>, private val tag : Tag, private val consumer : () -> TagConsumer<*>) : MutableMap<String, String> {\r\n    private var backing: Map<String, String> = initialValues\r\n    private var backingMutable = false\r\n\r\n    override val size: Int\r\n        get() = backing.size\r\n\r\n    override fun isEmpty(): Boolean = backing.isEmpty()\r\n\r\n    override fun containsKey(key: String): Boolean = backing.containsKey(key)\r\n    override fun containsValue(value: String): Boolean = backing.containsValue(value)\r\n    override fun get(key: String): String? = backing[key]\r\n\r\n    override fun put(key: String, value: String): String? {\r\n        val mutable = switchToMutable()\r\n\r\n        val old = mutable.put(key, value)\r\n        if (old != value) {\r\n            consumer().onTagAttributeChange(tag, key, value)\r\n        }\r\n\r\n        return old\r\n    }\r\n\r\n    override fun remove(key: String): String? {\r\n        val mutable = switchToMutable()\r\n\r\n        return mutable.remove(key)?.let { removed ->\r\n            consumer().onTagAttributeChange(tag, key, null)\r\n            removed\r\n        }\r\n    }\r\n\r\n    override fun putAll(from: Map<out String, String>) {\r\n        if (from.isEmpty()) return\r\n\r\n        val consumer = consumer()\r\n        val mutable = switchToMutable()\r\n\r\n        from.entries.forEach { e ->\r\n            if (mutable.put(e.key, e.value) != e.value) {\r\n                consumer.onTagAttributeChange(tag, e.key, e.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun clear() {\r\n        backing.forEach { e -> consumer().onTagAttributeChange(tag, e.key, null) }\r\n        backing = emptyMap()\r\n        backingMutable = false\r\n    }\r\n\r\n    val immutableEntries: Collection<Map.Entry<String, String>>\r\n        get() = backing.entries\r\n\r\n    private fun switchToMutable(): MutableMap<String, String> = if (backingMutable) {\r\n        backing\r\n    } else {\r\n        backingMutable = true\r\n        backing = LinkedHashMap(backing)\r\n        backing\r\n    } as MutableMap\r\n\r\n    override val keys: MutableSet<String>\r\n        get() = switchToMutable().keys  // TODO we need to handle changes too\r\n\r\n    override val values: MutableCollection<String>\r\n        get() = switchToMutable().values  // TODO we need to handle changes too\r\n\r\n    override val entries: MutableSet<MutableMap.MutableEntry<String, String>>\r\n        get() = switchToMutable().entries   // TODO we need to handle changes too\r\n}\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nenum class Dir(override val realValue : String) : AttributeEnum {\r\n    ltr(\"ltr\"),\r\n    rtl(\"rtl\")\r\n}\r\n\r\ninternal val dirValues : Map<String, Dir> = Dir.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class Draggable(override val realValue : String) : AttributeEnum {\r\n    htmlTrue(\"true\"),\r\n    htmlFalse(\"false\"),\r\n    auto(\"auto\")\r\n}\r\n\r\ninternal val draggableValues : Map<String, Draggable> = Draggable.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class RunAt(override val realValue : String) : AttributeEnum {\r\n    server(\"server\")\r\n}\r\n\r\ninternal val runAtValues : Map<String, RunAt> = RunAt.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject ATarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject ARel {\r\n    val alternate : String = \"Alternate\"\r\n    val appEndIx : String = \"Appendix\"\r\n    val bookmark : String = \"Bookmark\"\r\n    val chapter : String = \"Chapter\"\r\n    val contentS : String = \"Contents\"\r\n    val copyright : String = \"Copyright\"\r\n    val glossary : String = \"Glossary\"\r\n    val help : String = \"Help\"\r\n    val index : String = \"Index\"\r\n    val next : String = \"Next\"\r\n    val prev : String = \"Prev\"\r\n    val section : String = \"Section\"\r\n    val start : String = \"Start\"\r\n    val stylesheet : String = \"Stylesheet\"\r\n    val subsection : String = \"Subsection\"\r\n\r\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject AType {\r\n    val textAsp : String = \"text/asp\"\r\n    val textAsa : String = \"text/asa\"\r\n    val textCss : String = \"text/css\"\r\n    val textHtml : String = \"text/html\"\r\n    val textJavaScript : String = \"text/javascript\"\r\n    val textPlain : String = \"text/plain\"\r\n    val textScriptLet : String = \"text/scriptlet\"\r\n    val textXComponent : String = \"text/x-component\"\r\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\r\n    val textXml : String = \"text/xml\"\r\n\r\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class AreaShape(override val realValue : String) : AttributeEnum {\r\n    rect(\"rect\"),\r\n    circle(\"circle\"),\r\n    poly(\"poly\"),\r\n    default(\"default\")\r\n}\r\n\r\ninternal val areaShapeValues : Map<String, AreaShape> = AreaShape.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject AreaTarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject AreaRel {\r\n    val alternate : String = \"Alternate\"\r\n    val appEndIx : String = \"Appendix\"\r\n    val bookmark : String = \"Bookmark\"\r\n    val chapter : String = \"Chapter\"\r\n    val contentS : String = \"Contents\"\r\n    val copyright : String = \"Copyright\"\r\n    val glossary : String = \"Glossary\"\r\n    val help : String = \"Help\"\r\n    val index : String = \"Index\"\r\n    val next : String = \"Next\"\r\n    val prev : String = \"Prev\"\r\n    val section : String = \"Section\"\r\n    val start : String = \"Start\"\r\n    val stylesheet : String = \"Stylesheet\"\r\n    val subsection : String = \"Subsection\"\r\n\r\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject BaseTarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class ButtonFormEncType(override val realValue : String) : AttributeEnum {\r\n    multipartFormData(\"multipart/form-data\"),\r\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\r\n    textPlain(\"text/plain\")\r\n}\r\n\r\ninternal val buttonFormEncTypeValues : Map<String, ButtonFormEncType> = ButtonFormEncType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class ButtonFormMethod(override val realValue : String) : AttributeEnum {\r\n    get(\"get\"),\r\n    post(\"post\"),\r\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\r\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\r\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\r\n}\r\n\r\ninternal val buttonFormMethodValues : Map<String, ButtonFormMethod> = ButtonFormMethod.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject ButtonFormTarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class ButtonType(override val realValue : String) : AttributeEnum {\r\n    button(\"button\"),\r\n    reset(\"reset\"),\r\n    submit(\"submit\")\r\n}\r\n\r\ninternal val buttonTypeValues : Map<String, ButtonType> = ButtonType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class CommandType(override val realValue : String) : AttributeEnum {\r\n    command(\"command\"),\r\n    checkBox(\"checkbox\"),\r\n    radio(\"radio\")\r\n}\r\n\r\ninternal val commandTypeValues : Map<String, CommandType> = CommandType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class FormEncType(override val realValue : String) : AttributeEnum {\r\n    multipartFormData(\"multipart/form-data\"),\r\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\r\n    textPlain(\"text/plain\")\r\n}\r\n\r\ninternal val formEncTypeValues : Map<String, FormEncType> = FormEncType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class FormMethod(override val realValue : String) : AttributeEnum {\r\n    get(\"get\"),\r\n    post(\"post\"),\r\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\r\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\r\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\r\n}\r\n\r\ninternal val formMethodValues : Map<String, FormMethod> = FormMethod.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject FormTarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject IframeName {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class IframeSandbox(override val realValue : String) : AttributeEnum {\r\n    allowSameOrigin(\"allow-same-origin\"),\r\n    allowFormS(\"allow-forms\"),\r\n    allowScripts(\"allow-scripts\")\r\n}\r\n\r\ninternal val iframeSandboxValues : Map<String, IframeSandbox> = IframeSandbox.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class InputType(override val realValue : String) : AttributeEnum {\r\n    button(\"button\"),\r\n    checkBox(\"checkbox\"),\r\n    color(\"color\"),\r\n    date(\"date\"),\r\n    dateTime(\"datetime\"),\r\n    dateTimeLocal(\"datetime-local\"),\r\n    email(\"email\"),\r\n    file(\"file\"),\r\n    hidden(\"hidden\"),\r\n    image(\"image\"),\r\n    month(\"month\"),\r\n    number(\"number\"),\r\n    password(\"password\"),\r\n    radio(\"radio\"),\r\n    range(\"range\"),\r\n    reset(\"reset\"),\r\n    search(\"search\"),\r\n    submit(\"submit\"),\r\n    text(\"text\"),\r\n    tel(\"tel\"),\r\n    time(\"time\"),\r\n    url(\"url\"),\r\n    week(\"week\")\r\n}\r\n\r\ninternal val inputTypeValues : Map<String, InputType> = InputType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class InputFormEncType(override val realValue : String) : AttributeEnum {\r\n    multipartFormData(\"multipart/form-data\"),\r\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\r\n    textPlain(\"text/plain\")\r\n}\r\n\r\ninternal val inputFormEncTypeValues : Map<String, InputFormEncType> = InputFormEncType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class InputFormMethod(override val realValue : String) : AttributeEnum {\r\n    get(\"get\"),\r\n    post(\"post\"),\r\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\r\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\r\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\r\n}\r\n\r\ninternal val inputFormMethodValues : Map<String, InputFormMethod> = InputFormMethod.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject InputFormTarget {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class KeyGenKeyType(override val realValue : String) : AttributeEnum {\r\n    rsa(\"rsa\")\r\n}\r\n\r\ninternal val keyGenKeyTypeValues : Map<String, KeyGenKeyType> = KeyGenKeyType.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nobject LinkRel {\r\n    val alternate : String = \"Alternate\"\r\n    val appEndIx : String = \"Appendix\"\r\n    val bookmark : String = \"Bookmark\"\r\n    val chapter : String = \"Chapter\"\r\n    val contentS : String = \"Contents\"\r\n    val copyright : String = \"Copyright\"\r\n    val glossary : String = \"Glossary\"\r\n    val help : String = \"Help\"\r\n    val index : String = \"Index\"\r\n    val next : String = \"Next\"\r\n    val prev : String = \"Prev\"\r\n    val section : String = \"Section\"\r\n    val start : String = \"Start\"\r\n    val stylesheet : String = \"Stylesheet\"\r\n    val subsection : String = \"Subsection\"\r\n\r\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject LinkMedia {\r\n    val screen : String = \"screen\"\r\n    val print : String = \"print\"\r\n    val tty : String = \"tty\"\r\n    val tv : String = \"tv\"\r\n    val projection : String = \"projection\"\r\n    val handheld : String = \"handheld\"\r\n    val braille : String = \"braille\"\r\n    val aural : String = \"aural\"\r\n    val all : String = \"all\"\r\n\r\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject LinkType {\r\n    val textAsp : String = \"text/asp\"\r\n    val textAsa : String = \"text/asa\"\r\n    val textCss : String = \"text/css\"\r\n    val textHtml : String = \"text/html\"\r\n    val textJavaScript : String = \"text/javascript\"\r\n    val textPlain : String = \"text/plain\"\r\n    val textScriptLet : String = \"text/scriptlet\"\r\n    val textXComponent : String = \"text/x-component\"\r\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\r\n    val textXml : String = \"text/xml\"\r\n\r\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject MetaHttpEquiv {\r\n    val contentLanguage : String = \"content-language\"\r\n    val contentType : String = \"content-type\"\r\n    val defaultStyle : String = \"default-style\"\r\n    val refresh : String = \"refresh\"\r\n\r\n    val values : List<String> = listOf(\"contentLanguage\", \"contentType\", \"defaultStyle\", \"refresh\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject ObjectName {\r\n    val blank : String = \"_blank\"\r\n    val parent : String = \"_parent\"\r\n    val self : String = \"_self\"\r\n    val top : String = \"_top\"\r\n\r\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject ScriptType {\r\n    val textEcmaScript : String = \"text/ecmascript\"\r\n    val textJavaScript : String = \"text/javascript\"\r\n    val textJavaScript10 : String = \"text/javascript1.0\"\r\n    val textJavaScript11 : String = \"text/javascript1.1\"\r\n    val textJavaScript12 : String = \"text/javascript1.2\"\r\n    val textJavaScript13 : String = \"text/javascript1.3\"\r\n    val textJavaScript14 : String = \"text/javascript1.4\"\r\n    val textJavaScript15 : String = \"text/javascript1.5\"\r\n    val textJScript : String = \"text/jscript\"\r\n    val textXJavaScript : String = \"text/x-javascript\"\r\n    val textXEcmaScript : String = \"text/x-ecmascript\"\r\n    val textVbScript : String = \"text/vbscript\"\r\n\r\n    val values : List<String> = listOf(\"textEcmaScript\", \"textJavaScript\", \"textJavaScript10\", \"textJavaScript11\", \"textJavaScript12\", \"textJavaScript13\", \"textJavaScript14\", \"textJavaScript15\", \"textJScript\", \"textXJavaScript\", \"textXEcmaScript\", \"textVbScript\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject StyleType {\r\n    val textCss : String = \"text/css\"\r\n\r\n    val values : List<String> = listOf(\"textCss\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nobject StyleMedia {\r\n    val screen : String = \"screen\"\r\n    val print : String = \"print\"\r\n    val tty : String = \"tty\"\r\n    val tv : String = \"tv\"\r\n    val projection : String = \"projection\"\r\n    val handheld : String = \"handheld\"\r\n    val braille : String = \"braille\"\r\n    val aural : String = \"aural\"\r\n    val all : String = \"all\"\r\n\r\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\r\n}\r\n\r\n@Suppress(\"unused\")\r\nenum class TextAreaWrap(override val realValue : String) : AttributeEnum {\r\n    hard(\"hard\"),\r\n    soft(\"soft\")\r\n}\r\n\r\ninternal val textAreaWrapValues : Map<String, TextAreaWrap> = TextAreaWrap.values().associateBy { it.realValue }\r\n@Suppress(\"unused\")\r\nenum class ThScope(override val realValue : String) : AttributeEnum {\r\n    col(\"col\"),\r\n    colGroup(\"colgroup\"),\r\n    row(\"row\"),\r\n    rowGroup(\"rowgroup\")\r\n}\r\n\r\ninternal val thScopeValues : Map<String, ThScope> = ThScope.values().associateBy { it.realValue }\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class A(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"a\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var href : String\r\n        get()  = attributeStringString.get(this, \"href\")\r\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\r\n\r\n    var target : String\r\n        get()  = attributeStringString.get(this, \"target\")\r\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\r\n\r\n    var ping : String\r\n        get()  = attributeStringString.get(this, \"ping\")\r\n        set(newValue) {attributeStringString.set(this, \"ping\", newValue)}\r\n\r\n    var rel : String\r\n        get()  = attributeStringString.get(this, \"rel\")\r\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\r\n\r\n    var hrefLang : String\r\n        get()  = attributeStringString.get(this, \"hreflang\")\r\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\r\n\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n\r\n}\r\nval A.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval A.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval A.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class ABBR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"abbr\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval ABBR.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval ABBR.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class ADDRESS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"address\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class AREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"area\", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {\r\n    var coords : String\r\n        get()  = attributeStringString.get(this, \"coords\")\r\n        set(newValue) {attributeStringString.set(this, \"coords\", newValue)}\r\n\r\n    var href : String\r\n        get()  = attributeStringString.get(this, \"href\")\r\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\r\n\r\n    var hrefLang : String\r\n        get()  = attributeStringString.get(this, \"hreflang\")\r\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\r\n\r\n    var alt : String\r\n        get()  = attributeStringString.get(this, \"alt\")\r\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\r\n\r\n    var target : String\r\n        get()  = attributeStringString.get(this, \"target\")\r\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\r\n\r\n    var media : String\r\n        get()  = attributeStringString.get(this, \"media\")\r\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\r\n\r\n    var rel : String\r\n        get()  = attributeStringString.get(this, \"rel\")\r\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\r\n\r\n    var ping : String\r\n        get()  = attributeStringString.get(this, \"ping\")\r\n        set(newValue) {attributeStringString.set(this, \"ping\", newValue)}\r\n\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n\r\n}\r\nval AREA.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval AREA.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class ARTICLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"article\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\r\n\r\n}\r\nval ARTICLE.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval ARTICLE.asSectioningContent : SectioningContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class ASIDE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"aside\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\r\n\r\n}\r\nval ASIDE.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval ASIDE.asSectioningContent : SectioningContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class AUDIO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"audio\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var autoBuffer : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autobuffer\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autobuffer\", newValue)}\r\n\r\n    var autoPlay : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autoplay\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autoplay\", newValue)}\r\n\r\n    var loop : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"loop\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"loop\", newValue)}\r\n\r\n    var controls : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"controls\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"controls\", newValue)}\r\n\r\n\r\n}\r\n/**\r\n * Media source for \r\n */\r\n@HtmlTagMarker\r\ninline fun AUDIO.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : Unit = SOURCE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\nval AUDIO.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval AUDIO.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval AUDIO.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class B(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"b\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval B.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval B.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class BASE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"base\", consumer, initialAttributes, null, true, true), HtmlHeadTag {\r\n    var href : String\r\n        get()  = attributeStringString.get(this, \"href\")\r\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\r\n\r\n    var target : String\r\n        get()  = attributeStringString.get(this, \"target\")\r\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class BDI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"bdi\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval BDI.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval BDI.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class BDO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"bdo\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval BDO.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval BDO.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class BLOCKQUOTE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"blockquote\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var cite : String\r\n        get()  = attributeStringString.get(this, \"cite\")\r\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class BODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"body\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var onAfterprint : String\r\n        get()  = attributeStringString.get(this, \"onafterprint\")\r\n        set(newValue) {attributeStringString.set(this, \"onafterprint\", newValue)}\r\n\r\n    var onBeforeprint : String\r\n        get()  = attributeStringString.get(this, \"onbeforeprint\")\r\n        set(newValue) {attributeStringString.set(this, \"onbeforeprint\", newValue)}\r\n\r\n    var onBeforeunLoad : String\r\n        get()  = attributeStringString.get(this, \"onbeforeunload\")\r\n        set(newValue) {attributeStringString.set(this, \"onbeforeunload\", newValue)}\r\n\r\n    var onHashChange : String\r\n        get()  = attributeStringString.get(this, \"onhashchange\")\r\n        set(newValue) {attributeStringString.set(this, \"onhashchange\", newValue)}\r\n\r\n    var onMessage : String\r\n        get()  = attributeStringString.get(this, \"onmessage\")\r\n        set(newValue) {attributeStringString.set(this, \"onmessage\", newValue)}\r\n\r\n    var onOffline : String\r\n        get()  = attributeStringString.get(this, \"onoffline\")\r\n        set(newValue) {attributeStringString.set(this, \"onoffline\", newValue)}\r\n\r\n    var onOnline : String\r\n        get()  = attributeStringString.get(this, \"ononline\")\r\n        set(newValue) {attributeStringString.set(this, \"ononline\", newValue)}\r\n\r\n    var onPopstate : String\r\n        get()  = attributeStringString.get(this, \"onpopstate\")\r\n        set(newValue) {attributeStringString.set(this, \"onpopstate\", newValue)}\r\n\r\n    var onRedo : String\r\n        get()  = attributeStringString.get(this, \"onredo\")\r\n        set(newValue) {attributeStringString.set(this, \"onredo\", newValue)}\r\n\r\n    var onResize : String\r\n        get()  = attributeStringString.get(this, \"onresize\")\r\n        set(newValue) {attributeStringString.set(this, \"onresize\", newValue)}\r\n\r\n    var onStorage : String\r\n        get()  = attributeStringString.get(this, \"onstorage\")\r\n        set(newValue) {attributeStringString.set(this, \"onstorage\", newValue)}\r\n\r\n    var onUndo : String\r\n        get()  = attributeStringString.get(this, \"onundo\")\r\n        set(newValue) {attributeStringString.set(this, \"onundo\", newValue)}\r\n\r\n    var onUnLoad : String\r\n        get()  = attributeStringString.get(this, \"onunload\")\r\n        set(newValue) {attributeStringString.set(this, \"onunload\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class BR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"br\", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {\r\n\r\n}\r\nval BR.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval BR.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class BUTTON(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"button\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var autoFocus : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\r\n\r\n    var disabled : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\r\n\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var formAction : String\r\n        get()  = attributeStringString.get(this, \"formaction\")\r\n        set(newValue) {attributeStringString.set(this, \"formaction\", newValue)}\r\n\r\n    var formEncType : ButtonFormEncType\r\n        get()  = attributeButtonFormEncTypeEnumButtonFormEncTypeValues.get(this, \"formenctype\")\r\n        set(newValue) {attributeButtonFormEncTypeEnumButtonFormEncTypeValues.set(this, \"formenctype\", newValue)}\r\n\r\n    var formMethod : ButtonFormMethod\r\n        get()  = attributeButtonFormMethodEnumButtonFormMethodValues.get(this, \"formmethod\")\r\n        set(newValue) {attributeButtonFormMethodEnumButtonFormMethodValues.set(this, \"formmethod\", newValue)}\r\n\r\n    var formNovalidate : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"formnovalidate\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"formnovalidate\", newValue)}\r\n\r\n    var formTarget : String\r\n        get()  = attributeStringString.get(this, \"formtarget\")\r\n        set(newValue) {attributeStringString.set(this, \"formtarget\", newValue)}\r\n\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var value : String\r\n        get()  = attributeStringString.get(this, \"value\")\r\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\r\n\r\n    var type : ButtonType\r\n        get()  = attributeButtonTypeEnumButtonTypeValues.get(this, \"type\")\r\n        set(newValue) {attributeButtonTypeEnumButtonTypeValues.set(this, \"type\", newValue)}\r\n\r\n\r\n}\r\nval BUTTON.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval BUTTON.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval BUTTON.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class DATALIST(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"datalist\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\ninline fun DATALIST.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\nfun DATALIST.option(classes : String? = null, content : String = \"\") : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit({+content})\r\n\r\nval DATALIST.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval DATALIST.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class DD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dd\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class DEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"del\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\r\n    var cite : String\r\n        get()  = attributeStringString.get(this, \"cite\")\r\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\r\n\r\n    var dateTime : String\r\n        get()  = attributeStringString.get(this, \"datetime\")\r\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\r\n\r\n\r\n}\r\nval DEL.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval DEL.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class DETAILS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"details\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractiveContent {\r\n    var open : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"open\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"open\", newValue)}\r\n\r\n\r\n}\r\n/**\r\n * Fieldset legend\r\n */\r\n@HtmlTagMarker\r\ninline fun DETAILS.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : Unit = LEGEND(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\nval DETAILS.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval DETAILS.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class DFN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dfn\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval DFN.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval DFN.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class DIALOG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dialog\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class DIV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"div\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class DL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dl\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n/**\r\n * Definition description\r\n */\r\n@HtmlTagMarker\r\ninline fun DL.dd(classes : String? = null, crossinline block : DD.() -> Unit = {}) : Unit = DD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Definition term\r\n */\r\n@HtmlTagMarker\r\ninline fun DL.dt(classes : String? = null, crossinline block : DT.() -> Unit = {}) : Unit = DT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class DT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dt\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\r\n\r\n}\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class H1(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h1\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class H2(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h2\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class H3(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h3\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class H4(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h4\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class H5(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h5\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class H6(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h6\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"head\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun Entities.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") entity(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun String.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") text(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(s : String) : Unit {\r\n        super<HTMLTag>.text(s)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(n : Number) : Unit {\r\n        super<HTMLTag>.text(n)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun entity(e : Entities) : Unit {\r\n        super<HTMLTag>.entity(e)\r\n    }\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class HEADER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"header\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class HGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hgroup\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingContent {\r\n\r\n}\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun HGROUP.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\nval HGROUP.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval HGROUP.asHeadingContent : HeadingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class HR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hr\", consumer, initialAttributes, null, false, true), HtmlBlockTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>, namespace : String? = null) : HTMLTag(\"html\", consumer, initialAttributes, namespace, false, false), CommonAttributeGroupFacade {\r\n    var manifest : String\r\n        get()  = attributeStringString.get(this, \"manifest\")\r\n        set(newValue) {attributeStringString.set(this, \"manifest\", newValue)}\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun Entities.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") entity(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun String.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") text(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(s : String) : Unit {\r\n        super<HTMLTag>.text(s)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(n : Number) : Unit {\r\n        super<HTMLTag>.text(n)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun entity(e : Entities) : Unit {\r\n        super<HTMLTag>.entity(e)\r\n    }\r\n\r\n}\r\n/**\r\n * Document body\r\n */\r\n@HtmlTagMarker\r\ninline fun HTML.body(classes : String? = null, crossinline block : BODY.() -> Unit = {}) : Unit = BODY(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\ninline fun HTML.head(crossinline block : HEAD.() -> Unit = {}) : Unit = HEAD(emptyMap, consumer).visit(block)\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\nfun HTML.head(content : String = \"\") : Unit = HEAD(emptyMap, consumer).visit({+content})\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class I(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"i\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval I.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval I.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class IFRAME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"iframe\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var height : String\r\n        get()  = attributeStringString.get(this, \"height\")\r\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\r\n\r\n    var width : String\r\n        get()  = attributeStringString.get(this, \"width\")\r\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\r\n\r\n    var sandbox : IframeSandbox\r\n        get()  = attributeIframeSandboxEnumIframeSandboxValues.get(this, \"sandbox\")\r\n        set(newValue) {attributeIframeSandboxEnumIframeSandboxValues.set(this, \"sandbox\", newValue)}\r\n\r\n    var seamless : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"seamless\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"seamless\", newValue)}\r\n\r\n\r\n}\r\nval IFRAME.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval IFRAME.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval IFRAME.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class IMG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"img\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var alt : String\r\n        get()  = attributeStringString.get(this, \"alt\")\r\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\r\n\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var height : String\r\n        get()  = attributeStringString.get(this, \"height\")\r\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\r\n\r\n    var width : String\r\n        get()  = attributeStringString.get(this, \"width\")\r\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\r\n\r\n    var usemap : String\r\n        get()  = attributeStringString.get(this, \"usemap\")\r\n        set(newValue) {attributeStringString.set(this, \"usemap\", newValue)}\r\n\r\n    var ismap : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"ismap\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"ismap\", newValue)}\r\n\r\n\r\n}\r\nval IMG.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval IMG.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval IMG.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class INPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"input\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var type : InputType\r\n        get()  = attributeInputTypeEnumInputTypeValues.get(this, \"type\")\r\n        set(newValue) {attributeInputTypeEnumInputTypeValues.set(this, \"type\", newValue)}\r\n\r\n    var accept : String\r\n        get()  = attributeStringString.get(this, \"accept\")\r\n        set(newValue) {attributeStringString.set(this, \"accept\", newValue)}\r\n\r\n    var alt : String\r\n        get()  = attributeStringString.get(this, \"alt\")\r\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\r\n\r\n    var autoFocus : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\r\n\r\n    var autoComplete : Boolean\r\n        get()  = attributeBooleanBooleanOnOff.get(this, \"autocomplete\")\r\n        set(newValue) {attributeBooleanBooleanOnOff.set(this, \"autocomplete\", newValue)}\r\n\r\n    var checked : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"checked\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"checked\", newValue)}\r\n\r\n    var disabled : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\r\n\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var formAction : String\r\n        get()  = attributeStringString.get(this, \"formaction\")\r\n        set(newValue) {attributeStringString.set(this, \"formaction\", newValue)}\r\n\r\n    var formEncType : InputFormEncType\r\n        get()  = attributeInputFormEncTypeEnumInputFormEncTypeValues.get(this, \"formenctype\")\r\n        set(newValue) {attributeInputFormEncTypeEnumInputFormEncTypeValues.set(this, \"formenctype\", newValue)}\r\n\r\n    var formMethod : InputFormMethod\r\n        get()  = attributeInputFormMethodEnumInputFormMethodValues.get(this, \"formmethod\")\r\n        set(newValue) {attributeInputFormMethodEnumInputFormMethodValues.set(this, \"formmethod\", newValue)}\r\n\r\n    var formNovalidate : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"formnovalidate\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"formnovalidate\", newValue)}\r\n\r\n    var formTarget : String\r\n        get()  = attributeStringString.get(this, \"formtarget\")\r\n        set(newValue) {attributeStringString.set(this, \"formtarget\", newValue)}\r\n\r\n    var height : String\r\n        get()  = attributeStringString.get(this, \"height\")\r\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\r\n\r\n    var list : String\r\n        get()  = attributeStringString.get(this, \"list\")\r\n        set(newValue) {attributeStringString.set(this, \"list\", newValue)}\r\n\r\n    var max : String\r\n        get()  = attributeStringString.get(this, \"max\")\r\n        set(newValue) {attributeStringString.set(this, \"max\", newValue)}\r\n\r\n    var maxLength : String\r\n        get()  = attributeStringString.get(this, \"maxlength\")\r\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\r\n\r\n    var minLength : String\r\n        get()  = attributeStringString.get(this, \"minlength\")\r\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\r\n\r\n    var min : String\r\n        get()  = attributeStringString.get(this, \"min\")\r\n        set(newValue) {attributeStringString.set(this, \"min\", newValue)}\r\n\r\n    var multiple : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"multiple\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"multiple\", newValue)}\r\n\r\n    var pattern : String\r\n        get()  = attributeStringString.get(this, \"pattern\")\r\n        set(newValue) {attributeStringString.set(this, \"pattern\", newValue)}\r\n\r\n    var placeholder : String\r\n        get()  = attributeStringString.get(this, \"placeholder\")\r\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\r\n\r\n    var readonly : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\r\n\r\n    var required : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"required\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\r\n\r\n    var size : String\r\n        get()  = attributeStringString.get(this, \"size\")\r\n        set(newValue) {attributeStringString.set(this, \"size\", newValue)}\r\n\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var step : String\r\n        get()  = attributeStringString.get(this, \"step\")\r\n        set(newValue) {attributeStringString.set(this, \"step\", newValue)}\r\n\r\n    var width : String\r\n        get()  = attributeStringString.get(this, \"width\")\r\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\r\n\r\n    var files : String\r\n        get()  = attributeStringString.get(this, \"files\")\r\n        set(newValue) {attributeStringString.set(this, \"files\", newValue)}\r\n\r\n    var value : String\r\n        get()  = attributeStringString.get(this, \"value\")\r\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\r\n\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n\r\n}\r\nval INPUT.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval INPUT.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval INPUT.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class INS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ins\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\r\n    var cite : String\r\n        get()  = attributeStringString.get(this, \"cite\")\r\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\r\n\r\n    var dateTime : String\r\n        get()  = attributeStringString.get(this, \"datetime\")\r\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\r\n\r\n\r\n}\r\nval INS.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval INS.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class LABEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"label\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var htmlFor : String\r\n        get()  = attributeStringString.get(this, \"for\")\r\n        set(newValue) {attributeStringString.set(this, \"for\", newValue)}\r\n\r\n\r\n}\r\nval LABEL.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval LABEL.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval LABEL.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class LEGEND(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"legend\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval LEGEND.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval LEGEND.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class LI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"li\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var value : String\r\n        get()  = attributeStringString.get(this, \"value\")\r\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class LINK(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"link\", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\r\n    var href : String\r\n        get()  = attributeStringString.get(this, \"href\")\r\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\r\n\r\n    var hrefLang : String\r\n        get()  = attributeStringString.get(this, \"hreflang\")\r\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\r\n\r\n    var rel : String\r\n        get()  = attributeStringString.get(this, \"rel\")\r\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\r\n\r\n    var media : String\r\n        get()  = attributeStringString.get(this, \"media\")\r\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\r\n\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n    var sizes : String\r\n        get()  = attributeStringString.get(this, \"sizes\")\r\n        set(newValue) {attributeStringString.set(this, \"sizes\", newValue)}\r\n\r\n    var integrity : String\r\n        get()  = attributeStringString.get(this, \"integrity\")\r\n        set(newValue) {attributeStringString.set(this, \"integrity\", newValue)}\r\n\r\n\r\n}\r\nval LINK.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval LINK.asMetaDataContent : MetaDataContent\r\n    get()  = this\r\n\r\nval LINK.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class NAV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"nav\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\r\n\r\n}\r\nval NAV.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval NAV.asSectioningContent : SectioningContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class NOSCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"noscript\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\r\n\r\n}\r\nval NOSCRIPT.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval NOSCRIPT.asMetaDataContent : MetaDataContent\r\n    get()  = this\r\n\r\nval NOSCRIPT.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class P(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"p\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval P.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval P.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class PARAM(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"param\", consumer, initialAttributes, null, true, true) {\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var value : String\r\n        get()  = attributeStringString.get(this, \"value\")\r\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class PRE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"pre\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval PRE.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval PRE.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class PROGRESS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"progress\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n    var value : String\r\n        get()  = attributeStringString.get(this, \"value\")\r\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\r\n\r\n    var max : String\r\n        get()  = attributeStringString.get(this, \"max\")\r\n        set(newValue) {attributeStringString.set(this, \"max\", newValue)}\r\n\r\n\r\n}\r\nval PROGRESS.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval PROGRESS.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class SAMP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"samp\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SAMP.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SAMP.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"script\", consumer, initialAttributes, null, false, false), FlowMetaDataPhrasingContent {\r\n    var charset : String\r\n        get()  = attributeStringString.get(this, \"charset\")\r\n        set(newValue) {attributeStringString.set(this, \"charset\", newValue)}\r\n\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var defer : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"defer\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"defer\", newValue)}\r\n\r\n    var async : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"async\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"async\", newValue)}\r\n\r\n    var nonce : String\r\n        get()  = attributeStringString.get(this, \"nonce\")\r\n        set(newValue) {attributeStringString.set(this, \"nonce\", newValue)}\r\n\r\n    var integrity : String\r\n        get()  = attributeStringString.get(this, \"integrity\")\r\n        set(newValue) {attributeStringString.set(this, \"integrity\", newValue)}\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun Entities.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") entity(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun String.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") text(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(s : String) : Unit {\r\n        super<HTMLTag>.text(s)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(n : Number) : Unit {\r\n        super<HTMLTag>.text(n)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun entity(e : Entities) : Unit {\r\n        super<HTMLTag>.entity(e)\r\n    }\r\n\r\n}\r\nval SCRIPT.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SCRIPT.asMetaDataContent : MetaDataContent\r\n    get()  = this\r\n\r\nval SCRIPT.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SECTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"section\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\r\n\r\n}\r\nval SECTION.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SECTION.asSectioningContent : SectioningContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SELECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"select\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var autoFocus : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\r\n\r\n    var disabled : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\r\n\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var multiple : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"multiple\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"multiple\", newValue)}\r\n\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var size : String\r\n        get()  = attributeStringString.get(this, \"size\")\r\n        set(newValue) {attributeStringString.set(this, \"size\", newValue)}\r\n\r\n    var required : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"required\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\r\n\r\n\r\n}\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\ninline fun SELECT.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\nfun SELECT.option(classes : String? = null, content : String = \"\") : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit({+content})\r\n\r\n/**\r\n * Option group\r\n */\r\n@HtmlTagMarker\r\ninline fun SELECT.optGroup(label : String? = null, classes : String? = null, crossinline block : OPTGROUP.() -> Unit = {}) : Unit = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), consumer).visit(block)\r\n\r\nval SELECT.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SELECT.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval SELECT.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SMALL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"small\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SMALL.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SMALL.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SOURCE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"source\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacade {\r\n    var src : String\r\n        get()  = attributeStringString.get(this, \"src\")\r\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\r\n\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n    var media : String\r\n        get()  = attributeStringString.get(this, \"media\")\r\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"span\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SPAN.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SPAN.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class STRONG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"strong\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval STRONG.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval STRONG.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class STYLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"style\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowMetaDataContent {\r\n    var type : String\r\n        get()  = attributeStringString.get(this, \"type\")\r\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\r\n\r\n    var media : String\r\n        get()  = attributeStringString.get(this, \"media\")\r\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\r\n\r\n    var scoped : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"scoped\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"scoped\", newValue)}\r\n\r\n    var nonce : String\r\n        get()  = attributeStringString.get(this, \"nonce\")\r\n        set(newValue) {attributeStringString.set(this, \"nonce\", newValue)}\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun Entities.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") entity(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override operator fun String.unaryPlus() : Unit {\r\n        @Suppress(\"DEPRECATION\") text(this)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(s : String) : Unit {\r\n        super<HTMLTag>.text(s)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun text(n : Number) : Unit {\r\n        super<HTMLTag>.text(n)\r\n    }\r\n\r\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\r\n    override fun entity(e : Entities) : Unit {\r\n        super<HTMLTag>.entity(e)\r\n    }\r\n\r\n}\r\nval STYLE.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval STYLE.asMetaDataContent : MetaDataContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SUB(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"sub\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SUB.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SUB.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SUMMARY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"summary\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class SUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"sup\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SUP.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SUP.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class SVG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"svg\", consumer, initialAttributes, \"http://www.w3.org/2000/svg\", false, false), HtmlBlockInlineTag {\r\n\r\n}\r\nval SVG.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval SVG.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"table\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var summary : String\r\n        get()  = attributeStringString.get(this, \"summary\")\r\n        set(newValue) {attributeStringString.set(this, \"summary\", newValue)}\r\n\r\n\r\n}\r\n/**\r\n * Table caption\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : Unit = CAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table column group\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : Unit = COLGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table header\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : Unit = THEAD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table footer\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : Unit = TFOOT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table body\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : Unit = TBODY(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tbody\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TBODY.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"td\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var headers : String\r\n        get()  = attributeStringString.get(this, \"headers\")\r\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\r\n\r\n    var rowSpan : String\r\n        get()  = attributeStringString.get(this, \"rowspan\")\r\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\r\n\r\n    var colSpan : String\r\n        get()  = attributeStringString.get(this, \"colspan\")\r\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"textarea\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var autoFocus : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\r\n\r\n    var disabled : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\r\n\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var maxLength : String\r\n        get()  = attributeStringString.get(this, \"maxlength\")\r\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\r\n\r\n    var minLength : String\r\n        get()  = attributeStringString.get(this, \"minlength\")\r\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\r\n\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var placeholder : String\r\n        get()  = attributeStringString.get(this, \"placeholder\")\r\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\r\n\r\n    var readonly : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\r\n\r\n    var required : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"required\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\r\n\r\n    var rows : String\r\n        get()  = attributeStringString.get(this, \"rows\")\r\n        set(newValue) {attributeStringString.set(this, \"rows\", newValue)}\r\n\r\n    var cols : String\r\n        get()  = attributeStringString.get(this, \"cols\")\r\n        set(newValue) {attributeStringString.set(this, \"cols\", newValue)}\r\n\r\n    var wrap : TextAreaWrap\r\n        get()  = attributeTextAreaWrapEnumTextAreaWrapValues.get(this, \"wrap\")\r\n        set(newValue) {attributeTextAreaWrapEnumTextAreaWrapValues.set(this, \"wrap\", newValue)}\r\n\r\n\r\n}\r\nval TEXTAREA.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval TEXTAREA.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval TEXTAREA.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tfoot\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TFOOT.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"th\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\r\n    var headers : String\r\n        get()  = attributeStringString.get(this, \"headers\")\r\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\r\n\r\n    var rowSpan : String\r\n        get()  = attributeStringString.get(this, \"rowspan\")\r\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\r\n\r\n    var colSpan : String\r\n        get()  = attributeStringString.get(this, \"colspan\")\r\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\r\n\r\n    var scope : ThScope\r\n        get()  = attributeThScopeEnumThScopeValues.get(this, \"scope\")\r\n        set(newValue) {attributeThScopeEnumThScopeValues.set(this, \"scope\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"thead\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun THEAD.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"time\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n    var dateTime : String\r\n        get()  = attributeStringString.get(this, \"datetime\")\r\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\r\n\r\n\r\n}\r\nval TIME.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval TIME.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"title\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tr\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table header cell\r\n */\r\n@HtmlTagMarker\r\ninline fun TR.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.colTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.col.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.colGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.colGroup.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.rowTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.row.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.rowGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.rowGroup.realValue,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table data cell\r\n */\r\n@HtmlTagMarker\r\ninline fun TR.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : Unit = TD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class UL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ul\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n\r\n}\r\n/**\r\n * List item\r\n */\r\n@HtmlTagMarker\r\ninline fun UL.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : Unit = LI(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.impl.*\r\n\r\nopen class HTMLTag(\r\n        override val tagName : String,\r\n        override val consumer : TagConsumer<*>,\r\n        initialAttributes : Map<String, String>,\r\n        override val namespace : String? = null,\r\n        override val inlineTag: Boolean,\r\n        override val emptyTag: Boolean) : Tag {\r\n\r\n    override val attributes : DelegatingMap = DelegatingMap(initialAttributes, this) { consumer }\r\n\r\n    override val attributesEntries: Collection<Map.Entry<String, String>>\r\n        get() = attributes.immutableEntries\r\n}\r\n","package kotlinx.html.stream\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.consumers.*\r\nimport org.w3c.dom.events.*\r\n\r\nclass HTMLStreamBuilder<out O : Appendable>(val out : O, val prettyPrint : Boolean, val xhtmlCompatible: Boolean) : TagConsumer<O> {\r\n    private var level = 0\r\n    private var ln = true\r\n\r\n    override fun onTagStart(tag: Tag) {\r\n        if (prettyPrint && !tag.inlineTag) {\r\n            indent()\r\n        }\r\n        level++\r\n\r\n        out.append(\"<\")\r\n        out.append(tag.tagName)\r\n\r\n        if (tag.namespace != null) {\r\n            out.append(\" xmlns=\\\"\")\r\n            out.append(tag.namespace)\r\n            out.append(\"\\\"\")\r\n        }\r\n\r\n        if (tag.attributes.isNotEmpty()) {\r\n            tag.attributesEntries.forEachIndexed { _, e ->\r\n                if (!e.key.isValidXmlAttributeName()) {\r\n                    throw IllegalArgumentException(\"Tag ${tag.tagName} has invalid attribute name ${e.key}\")\r\n                }\r\n\r\n                out.append(' ')\r\n                out.append(e.key)\r\n                out.append(\"=\\\"\")\r\n                out.escapeAppend(e.value)\r\n                out.append('\\\"')\r\n            }\r\n        }\r\n\r\n        if (xhtmlCompatible && tag.emptyTag) {\r\n            out.append(\"/\")\r\n        }\r\n\r\n        out.append(\">\")\r\n        ln = false\r\n    }\r\n\r\n    override fun onTagAttributeChange(tag : Tag, attribute: String, value: String?) {\r\n        throw UnsupportedOperationException(\"tag attribute can't be changed as it was already written to the stream. Use with DelayedConsumer to be able to modify attributes\")\r\n    }\r\n\r\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\r\n        throw UnsupportedOperationException(\"you can't assign lambda event handler when building text\")\r\n    }\r\n\r\n    override fun onTagEnd(tag: Tag) {\r\n        level--\r\n        if (ln) {\r\n            indent()\r\n        }\r\n\r\n        if (!tag.emptyTag) {\r\n            out.append(\"</\")\r\n            out.append(tag.tagName)\r\n            out.append(\">\")\r\n        }\r\n\r\n        if (prettyPrint && !tag.inlineTag) {\r\n            appendln()\r\n        }\r\n    }\r\n\r\n    override fun onTagContent(content: CharSequence) {\r\n        out.escapeAppend(content)\r\n        ln = false\r\n    }\r\n\r\n    override fun onTagContentEntity(entity: Entities) {\r\n        out.append(entity.text)\r\n        ln = false\r\n    }\r\n\r\n    override fun finalize(): O = out\r\n\r\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\r\n        UnsafeImpl.block()\r\n    }\r\n\r\n    override fun onTagComment(content: CharSequence) {\r\n        if (prettyPrint) {\r\n            indent()\r\n        }\r\n\r\n        out.append(\"<!--\")\r\n        out.escapeComment(content)\r\n        out.append(\"-->\")\r\n\r\n        ln = false\r\n    }\r\n\r\n    val UnsafeImpl = object : Unsafe {\r\n        override operator fun String.unaryPlus() {\r\n            out.append(this)\r\n        }\r\n    }\r\n\r\n    private fun appendln() {\r\n        if (prettyPrint && !ln) {\r\n            out.append(\"\\n\")\r\n            ln = true\r\n        }\r\n    }\r\n\r\n    private fun indent() {\r\n        if (prettyPrint) {\r\n            if (!ln) {\r\n                out.append(\"\\n\")\r\n            }\r\n            var remaining = level\r\n            while (remaining >= 4) {\r\n                out.append(\"        \")\r\n                remaining -= 4\r\n            }\r\n            while (remaining >= 2) {\r\n                out.append(\"    \")\r\n                remaining -= 2\r\n            }\r\n            if (remaining > 0) {\r\n                out.append(\"  \")\r\n            }\r\n            ln = false\r\n        }\r\n    }\r\n}\r\n\r\nprivate val AVERAGE_PAGE_SIZE = 32768\r\n\r\nfun createHTML(prettyPrint: Boolean = true, xhtmlCompatible: Boolean = false): TagConsumer<String> =\r\n        HTMLStreamBuilder(StringBuilder(AVERAGE_PAGE_SIZE), prettyPrint, xhtmlCompatible).onFinalizeMap { sb, _ -> sb.toString() }.delayed()\r\n\r\nfun <O : Appendable> O.appendHTML(prettyPrint: Boolean = true, xhtmlCompatible: Boolean = false): TagConsumer<O> =\r\n        HTMLStreamBuilder(this, prettyPrint, xhtmlCompatible).delayed()\r\n\r\n@Deprecated(\"Should be resolved to the previous implementation\", level = DeprecationLevel.HIDDEN)\r\nfun <O : Appendable> O.appendHTML(prettyPrint: Boolean = true): TagConsumer<O> =\r\n        appendHTML(prettyPrint, false)\r\n\r\nprivate val escapeMap = mapOf(\r\n        '<' to \"&lt;\",\r\n        '>' to \"&gt;\",\r\n        '&' to \"&amp;\",\r\n        '\\\"' to \"&quot;\"\r\n).let { mappings ->\r\n    val maxCode = mappings.keys.map { it.toInt() }.max() ?: -1\r\n\r\n    Array(maxCode + 1) { mappings[it.toChar()] }\r\n}\r\n\r\nprivate val letterRangeLowerCase = 'a' .. 'z'\r\nprivate val letterRangeUpperCase = 'A' .. 'Z'\r\nprivate val digitRange = '0' .. '9'\r\n\r\nprivate fun Char._isLetter() = this in letterRangeLowerCase || this in letterRangeUpperCase\r\nprivate fun Char._isDigit() = this in digitRange\r\n\r\nprivate fun String.isValidXmlAttributeName() =\r\n        !startsWithXml()\r\n                && this.isNotEmpty()\r\n                && (this[0]._isLetter() || this[0] == '_')\r\n                && this.all { it._isLetter() || it._isDigit() || it in \"._:-\" }\r\n\r\nprivate fun String.startsWithXml() = length >= 3\r\n        && (this[0].let { it == 'x' || it == 'X' })\r\n        && (this[1].let { it == 'm' || it == 'M' })\r\n        && (this[2].let { it == 'l' || it == 'L' })\r\n\r\nprivate fun Appendable.escapeAppend(s : CharSequence) {\r\n    var lastIndex = 0\r\n    val mappings = escapeMap\r\n    val size = mappings.size\r\n\r\n    for (idx in 0 .. s.length - 1) {\r\n        val ch = s[idx].toInt()\r\n        if (ch < 0 || ch >= size) continue\r\n        val escape = mappings[ch]\r\n        if (escape != null) {\r\n            append(s.substring(lastIndex, idx))\r\n            append(escape)\r\n            lastIndex = idx + 1\r\n        }\r\n    }\r\n\r\n    if (lastIndex < s.length) {\r\n        append(s.substring(lastIndex, s.length))\r\n    }\r\n}\r\n\r\nprivate fun Appendable.escapeComment(s: CharSequence) {\r\n    var start = 0\r\n    while (start < s.length) {\r\n        val index = s.indexOf(\"--\")\r\n        if (index == -1) {\r\n            if (start == 0) {\r\n                append(s)\r\n            } else {\r\n                append(s, start, s.length)\r\n            }\r\n            break\r\n        }\r\n\r\n        append(s, start, index)\r\n        start += 2\r\n    }\r\n}","package kotlinx.html.dom\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.consumers.*\r\nimport org.w3c.dom.*\r\nimport org.w3c.dom.events.*\r\n\r\n@Suppress(\"NOTHING_TO_INLINE\")\r\nprivate inline fun HTMLElement.setEvent(name: String, noinline callback : (Event) -> Unit) : Unit {\r\n    asDynamic()[name] = callback\r\n}\r\n\r\nclass JSDOMBuilder<out R : HTMLElement>(val document : Document) : TagConsumer<R> {\r\n    private val path = arrayListOf<HTMLElement>()\r\n    private var lastLeaved : HTMLElement? = null\r\n\r\n    override fun onTagStart(tag: Tag) {\r\n        val element: HTMLElement = when {\r\n            tag.namespace != null -> document.createElementNS(tag.namespace!!, tag.tagName).asDynamic()\r\n            else -> document.createElement(tag.tagName) as HTMLElement\r\n        }\r\n\r\n        tag.attributesEntries.forEach {\r\n            element.setAttribute(it.key, it.value)\r\n        }\r\n\r\n        if (path.isNotEmpty()) {\r\n            path.last().appendChild(element)\r\n        }\r\n\r\n        path.add(element)\r\n    }\r\n\r\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\r\n        when {\r\n            path.isEmpty() -> throw IllegalStateException(\"No current tag\")\r\n            path.last().tagName.toLowerCase() != tag.tagName.toLowerCase() -> throw IllegalStateException(\"Wrong current tag\")\r\n            else -> path.last().let { node ->\r\n                if (value == null) {\r\n                    node.removeAttribute(attribute)\r\n                } else {\r\n                    node.setAttribute(attribute, value)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\r\n        when {\r\n            path.isEmpty() -> throw IllegalStateException(\"No current tag\")\r\n            path.last().tagName.toLowerCase() != tag.tagName.toLowerCase() -> throw IllegalStateException(\"Wrong current tag\")\r\n            else -> path.last().setEvent(event, value)\r\n        }\r\n    }\r\n\r\n    override fun onTagEnd(tag: Tag) {\r\n        if (path.isEmpty() || path.last().tagName.toLowerCase() != tag.tagName.toLowerCase()) {\r\n            throw IllegalStateException(\"We haven't entered tag ${tag.tagName} but trying to leave\")\r\n        }\r\n\r\n        lastLeaved = path.removeAt(path.lastIndex)\r\n    }\r\n\r\n    override fun onTagContent(content: CharSequence) {\r\n        if (path.isEmpty()) {\r\n            throw IllegalStateException(\"No current DOM node\")\r\n        }\r\n\r\n        path.last().appendChild(document.createTextNode(content.toString()))\r\n    }\r\n\r\n    override fun onTagContentEntity(entity: Entities) {\r\n        if (path.isEmpty()) {\r\n            throw IllegalStateException(\"No current DOM node\")\r\n        }\r\n\r\n        // stupid hack as browsers doesn't support createEntityReference\r\n        val s = document.createElement(\"span\") as HTMLElement\r\n        s.innerHTML = entity.text\r\n        path.last().appendChild(s.childNodes.asList().filter { it.nodeType == Node.TEXT_NODE }.first())\r\n\r\n        // other solution would be\r\n//        pathLast().innerHTML += entity.text\r\n    }\r\n\r\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\r\n        with(DefaultUnsafe()) {\r\n            block()\r\n\r\n            path.last().innerHTML += toString()\r\n        }\r\n    }\r\n\r\n\r\n    override fun onTagComment(content: CharSequence) {\r\n        if (path.isEmpty()) {\r\n            throw IllegalStateException(\"No current DOM node\")\r\n        }\r\n\r\n        path.last().appendChild(document.createComment(content.toString()))\r\n    }\r\n\r\n    override fun finalize(): R = lastLeaved?.asR() ?: throw IllegalStateException(\"We can't finalize as there was no tags\")\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    private fun HTMLElement.asR(): R = this.asDynamic()\r\n\r\n}\r\n\r\n\r\n fun Document.createTree() : TagConsumer<HTMLElement> = JSDOMBuilder(this)\r\n val Document.create : TagConsumer<HTMLElement>\r\n    get() = JSDOMBuilder(this)\r\n\r\nfun Node.append(block: TagConsumer<HTMLElement>.() -> Unit): List<HTMLElement> =\r\n    ArrayList<HTMLElement>().let { result ->\r\n        ownerDocumentExt.createTree().onFinalize { it, partial ->\r\n            if (!partial) {\r\n                result.add(it); appendChild(it)\r\n            }\r\n        }.block()\r\n\r\n        result\r\n    }\r\n\r\nfun Node.prepend(block: TagConsumer<HTMLElement>.() -> Unit): List<HTMLElement> =\r\n    ArrayList<HTMLElement>().let { result ->\r\n        ownerDocumentExt.createTree().onFinalize { it, partial ->\r\n            if (!partial) {\r\n                result.add(it)\r\n                insertBefore(it, firstChild)\r\n            }\r\n        }.block()\r\n\r\n        result\r\n    }\r\n\r\nval HTMLElement.append: TagConsumer<HTMLElement>\r\n    get() = ownerDocumentExt.createTree().onFinalize { element, partial ->\r\n        if (!partial) {\r\n            this@append.appendChild(element)\r\n        }\r\n    }\r\n\r\nval HTMLElement.prepend: TagConsumer<HTMLElement>\r\n    get() = ownerDocumentExt.createTree().onFinalize { element, partial ->\r\n        if (!partial) {\r\n            this@prepend.insertBefore(element, this@prepend.firstChild)\r\n        }\r\n    }\r\n\r\nprivate val Node.ownerDocumentExt: Document\r\n    get() = when {\r\n        this is Document -> this\r\n        else -> ownerDocument ?: throw IllegalStateException(\"Node has no ownerDocument\")\r\n    }\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\ninterface CommonAttributeGroupFacade : Tag {\r\n}\r\nvar CommonAttributeGroupFacade.enableTheming : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"EnableTheming\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"EnableTheming\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.enableViewState : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"EnableViewState\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"EnableViewState\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.skinID : String\r\n    get()  = attributeStringString.get(this, \"SkinID\")\r\n    set(newValue) {attributeStringString.set(this, \"SkinID\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.visible : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"Visible\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"Visible\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.accessKey : String\r\n    get()  = attributeStringString.get(this, \"accesskey\")\r\n    set(newValue) {attributeStringString.set(this, \"accesskey\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.classes : Set<String>\r\n    get()  = attributeSetStringStringSet.get(this, \"class\")\r\n    set(newValue) {attributeSetStringStringSet.set(this, \"class\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.contentEditable : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"contenteditable\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"contenteditable\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.contextMenu : String\r\n    get()  = attributeStringString.get(this, \"contextmenu\")\r\n    set(newValue) {attributeStringString.set(this, \"contextmenu\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.dataFolderName : String\r\n    get()  = attributeStringString.get(this, \"data-FolderName\")\r\n    set(newValue) {attributeStringString.set(this, \"data-FolderName\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.dataMsgId : String\r\n    get()  = attributeStringString.get(this, \"data-MsgId\")\r\n    set(newValue) {attributeStringString.set(this, \"data-MsgId\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.dir : Dir\r\n    get()  = attributeDirEnumDirValues.get(this, \"dir\")\r\n    set(newValue) {attributeDirEnumDirValues.set(this, \"dir\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.draggable : Draggable\r\n    get()  = attributeDraggableEnumDraggableValues.get(this, \"draggable\")\r\n    set(newValue) {attributeDraggableEnumDraggableValues.set(this, \"draggable\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.hidden : Boolean\r\n    get()  = attributeBooleanTicker.get(this, \"hidden\")\r\n    set(newValue) {attributeBooleanTicker.set(this, \"hidden\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.id : String\r\n    get()  = attributeStringString.get(this, \"id\")\r\n    set(newValue) {attributeStringString.set(this, \"id\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.itemProp : String\r\n    get()  = attributeStringString.get(this, \"itemprop\")\r\n    set(newValue) {attributeStringString.set(this, \"itemprop\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.lang : String\r\n    get()  = attributeStringString.get(this, \"lang\")\r\n    set(newValue) {attributeStringString.set(this, \"lang\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onAbort : String\r\n    get()  = attributeStringString.get(this, \"onabort\")\r\n    set(newValue) {attributeStringString.set(this, \"onabort\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onBlur : String\r\n    get()  = attributeStringString.get(this, \"onblur\")\r\n    set(newValue) {attributeStringString.set(this, \"onblur\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onCanPlay : String\r\n    get()  = attributeStringString.get(this, \"oncanplay\")\r\n    set(newValue) {attributeStringString.set(this, \"oncanplay\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onCanPlayThrough : String\r\n    get()  = attributeStringString.get(this, \"oncanplaythrough\")\r\n    set(newValue) {attributeStringString.set(this, \"oncanplaythrough\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onChange : String\r\n    get()  = attributeStringString.get(this, \"onchange\")\r\n    set(newValue) {attributeStringString.set(this, \"onchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onClick : String\r\n    get()  = attributeStringString.get(this, \"onclick\")\r\n    set(newValue) {attributeStringString.set(this, \"onclick\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onContextMenu : String\r\n    get()  = attributeStringString.get(this, \"oncontextmenu\")\r\n    set(newValue) {attributeStringString.set(this, \"oncontextmenu\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDoubleClick : String\r\n    get()  = attributeStringString.get(this, \"ondblclick\")\r\n    set(newValue) {attributeStringString.set(this, \"ondblclick\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDrag : String\r\n    get()  = attributeStringString.get(this, \"ondrag\")\r\n    set(newValue) {attributeStringString.set(this, \"ondrag\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragEnd : String\r\n    get()  = attributeStringString.get(this, \"ondragend\")\r\n    set(newValue) {attributeStringString.set(this, \"ondragend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragEnter : String\r\n    get()  = attributeStringString.get(this, \"ondragenter\")\r\n    set(newValue) {attributeStringString.set(this, \"ondragenter\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragLeave : String\r\n    get()  = attributeStringString.get(this, \"ondragleave\")\r\n    set(newValue) {attributeStringString.set(this, \"ondragleave\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragOver : String\r\n    get()  = attributeStringString.get(this, \"ondragover\")\r\n    set(newValue) {attributeStringString.set(this, \"ondragover\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragStart : String\r\n    get()  = attributeStringString.get(this, \"ondragstart\")\r\n    set(newValue) {attributeStringString.set(this, \"ondragstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDrop : String\r\n    get()  = attributeStringString.get(this, \"ondrop\")\r\n    set(newValue) {attributeStringString.set(this, \"ondrop\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDurationChange : String\r\n    get()  = attributeStringString.get(this, \"ondurationchange\")\r\n    set(newValue) {attributeStringString.set(this, \"ondurationchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onEmptied : String\r\n    get()  = attributeStringString.get(this, \"onemptied\")\r\n    set(newValue) {attributeStringString.set(this, \"onemptied\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onEnded : String\r\n    get()  = attributeStringString.get(this, \"onended\")\r\n    set(newValue) {attributeStringString.set(this, \"onended\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onError : String\r\n    get()  = attributeStringString.get(this, \"onerror\")\r\n    set(newValue) {attributeStringString.set(this, \"onerror\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocus : String\r\n    get()  = attributeStringString.get(this, \"onfocus\")\r\n    set(newValue) {attributeStringString.set(this, \"onfocus\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocusIn : String\r\n    get()  = attributeStringString.get(this, \"onfocusin\")\r\n    set(newValue) {attributeStringString.set(this, \"onfocusin\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocusOut : String\r\n    get()  = attributeStringString.get(this, \"onfocusout\")\r\n    set(newValue) {attributeStringString.set(this, \"onfocusout\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFormChange : String\r\n    get()  = attributeStringString.get(this, \"onformchange\")\r\n    set(newValue) {attributeStringString.set(this, \"onformchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFormInput : String\r\n    get()  = attributeStringString.get(this, \"onforminput\")\r\n    set(newValue) {attributeStringString.set(this, \"onforminput\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onInput : String\r\n    get()  = attributeStringString.get(this, \"oninput\")\r\n    set(newValue) {attributeStringString.set(this, \"oninput\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onInvalid : String\r\n    get()  = attributeStringString.get(this, \"oninvalid\")\r\n    set(newValue) {attributeStringString.set(this, \"oninvalid\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyDown : String\r\n    get()  = attributeStringString.get(this, \"onkeydown\")\r\n    set(newValue) {attributeStringString.set(this, \"onkeydown\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyPress : String\r\n    get()  = attributeStringString.get(this, \"onkeypress\")\r\n    set(newValue) {attributeStringString.set(this, \"onkeypress\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyUp : String\r\n    get()  = attributeStringString.get(this, \"onkeyup\")\r\n    set(newValue) {attributeStringString.set(this, \"onkeyup\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoad : String\r\n    get()  = attributeStringString.get(this, \"onload\")\r\n    set(newValue) {attributeStringString.set(this, \"onload\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadedData : String\r\n    get()  = attributeStringString.get(this, \"onloadeddata\")\r\n    set(newValue) {attributeStringString.set(this, \"onloadeddata\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadedMetaData : String\r\n    get()  = attributeStringString.get(this, \"onloadedmetadata\")\r\n    set(newValue) {attributeStringString.set(this, \"onloadedmetadata\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadStart : String\r\n    get()  = attributeStringString.get(this, \"onloadstart\")\r\n    set(newValue) {attributeStringString.set(this, \"onloadstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseDown : String\r\n    get()  = attributeStringString.get(this, \"onmousedown\")\r\n    set(newValue) {attributeStringString.set(this, \"onmousedown\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseMove : String\r\n    get()  = attributeStringString.get(this, \"onmousemove\")\r\n    set(newValue) {attributeStringString.set(this, \"onmousemove\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseOut : String\r\n    get()  = attributeStringString.get(this, \"onmouseout\")\r\n    set(newValue) {attributeStringString.set(this, \"onmouseout\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseOver : String\r\n    get()  = attributeStringString.get(this, \"onmouseover\")\r\n    set(newValue) {attributeStringString.set(this, \"onmouseover\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseUp : String\r\n    get()  = attributeStringString.get(this, \"onmouseup\")\r\n    set(newValue) {attributeStringString.set(this, \"onmouseup\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseWheel : String\r\n    get()  = attributeStringString.get(this, \"onmousewheel\")\r\n    set(newValue) {attributeStringString.set(this, \"onmousewheel\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPause : String\r\n    get()  = attributeStringString.get(this, \"onpause\")\r\n    set(newValue) {attributeStringString.set(this, \"onpause\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPlay : String\r\n    get()  = attributeStringString.get(this, \"onplay\")\r\n    set(newValue) {attributeStringString.set(this, \"onplay\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPlaying : String\r\n    get()  = attributeStringString.get(this, \"onplaying\")\r\n    set(newValue) {attributeStringString.set(this, \"onplaying\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onProgress : String\r\n    get()  = attributeStringString.get(this, \"onprogress\")\r\n    set(newValue) {attributeStringString.set(this, \"onprogress\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onRateChange : String\r\n    get()  = attributeStringString.get(this, \"onratechange\")\r\n    set(newValue) {attributeStringString.set(this, \"onratechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onReadyStateChange : String\r\n    get()  = attributeStringString.get(this, \"onreadystatechange\")\r\n    set(newValue) {attributeStringString.set(this, \"onreadystatechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onScroll : String\r\n    get()  = attributeStringString.get(this, \"onscroll\")\r\n    set(newValue) {attributeStringString.set(this, \"onscroll\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSearch : String\r\n    get()  = attributeStringString.get(this, \"onsearch\")\r\n    set(newValue) {attributeStringString.set(this, \"onsearch\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSeeked : String\r\n    get()  = attributeStringString.get(this, \"onseeked\")\r\n    set(newValue) {attributeStringString.set(this, \"onseeked\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSeeking : String\r\n    get()  = attributeStringString.get(this, \"onseeking\")\r\n    set(newValue) {attributeStringString.set(this, \"onseeking\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSelect : String\r\n    get()  = attributeStringString.get(this, \"onselect\")\r\n    set(newValue) {attributeStringString.set(this, \"onselect\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onShow : String\r\n    get()  = attributeStringString.get(this, \"onshow\")\r\n    set(newValue) {attributeStringString.set(this, \"onshow\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onStalled : String\r\n    get()  = attributeStringString.get(this, \"onstalled\")\r\n    set(newValue) {attributeStringString.set(this, \"onstalled\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSubmit : String\r\n    get()  = attributeStringString.get(this, \"onsubmit\")\r\n    set(newValue) {attributeStringString.set(this, \"onsubmit\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSuspend : String\r\n    get()  = attributeStringString.get(this, \"onsuspend\")\r\n    set(newValue) {attributeStringString.set(this, \"onsuspend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTimeUpdate : String\r\n    get()  = attributeStringString.get(this, \"ontimeupdate\")\r\n    set(newValue) {attributeStringString.set(this, \"ontimeupdate\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchCancel : String\r\n    get()  = attributeStringString.get(this, \"ontouchcancel\")\r\n    set(newValue) {attributeStringString.set(this, \"ontouchcancel\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchEnd : String\r\n    get()  = attributeStringString.get(this, \"ontouchend\")\r\n    set(newValue) {attributeStringString.set(this, \"ontouchend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchMove : String\r\n    get()  = attributeStringString.get(this, \"ontouchmove\")\r\n    set(newValue) {attributeStringString.set(this, \"ontouchmove\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchStart : String\r\n    get()  = attributeStringString.get(this, \"ontouchstart\")\r\n    set(newValue) {attributeStringString.set(this, \"ontouchstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onVolumeChange : String\r\n    get()  = attributeStringString.get(this, \"onvolumechange\")\r\n    set(newValue) {attributeStringString.set(this, \"onvolumechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onWaiting : String\r\n    get()  = attributeStringString.get(this, \"onwaiting\")\r\n    set(newValue) {attributeStringString.set(this, \"onwaiting\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onWheel : String\r\n    get()  = attributeStringString.get(this, \"onwheel\")\r\n    set(newValue) {attributeStringString.set(this, \"onwheel\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.role : String\r\n    get()  = attributeStringString.get(this, \"role\")\r\n    set(newValue) {attributeStringString.set(this, \"role\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.runAt : RunAt\r\n    get()  = attributeRunAtEnumRunAtValues.get(this, \"runat\")\r\n    set(newValue) {attributeRunAtEnumRunAtValues.set(this, \"runat\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.spellCheck : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"spellcheck\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"spellcheck\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.style : String\r\n    get()  = attributeStringString.get(this, \"style\")\r\n    set(newValue) {attributeStringString.set(this, \"style\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.subject : String\r\n    get()  = attributeStringString.get(this, \"subject\")\r\n    set(newValue) {attributeStringString.set(this, \"subject\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.tabIndex : String\r\n    get()  = attributeStringString.get(this, \"tabIndex\")\r\n    set(newValue) {attributeStringString.set(this, \"tabIndex\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.title : String\r\n    get()  = attributeStringString.get(this, \"title\")\r\n    set(newValue) {attributeStringString.set(this, \"title\", newValue)}\r\n\r\n\r\ninterface FormServerAttributeGroupFacade : Tag {\r\n}\r\nvar FormServerAttributeGroupFacade.defaultButton : String\r\n    get()  = attributeStringString.get(this, \"DefaultButton\")\r\n    set(newValue) {attributeStringString.set(this, \"DefaultButton\", newValue)}\r\n\r\nvar FormServerAttributeGroupFacade.defaultFocus : String\r\n    get()  = attributeStringString.get(this, \"DefaultFocus\")\r\n    set(newValue) {attributeStringString.set(this, \"DefaultFocus\", newValue)}\r\n\r\nvar FormServerAttributeGroupFacade.submitDisabledControls : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"SubmitDisabledControls\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"SubmitDisabledControls\", newValue)}\r\n\r\n\r\ninterface InputServerAttributeGroupFacade : Tag {\r\n}\r\nvar InputServerAttributeGroupFacade.causesValidation : Boolean\r\n    get()  = attributeBooleanBoolean.get(this, \"CausesValidation\")\r\n    set(newValue) {attributeBooleanBoolean.set(this, \"CausesValidation\", newValue)}\r\n\r\nvar InputServerAttributeGroupFacade.validationGroup : String\r\n    get()  = attributeStringString.get(this, \"ValidationGroup\")\r\n    set(newValue) {attributeStringString.set(this, \"ValidationGroup\", newValue)}\r\n\r\n\r\ninterface SelectServerAttributeGroupFacade : Tag {\r\n}\r\nvar SelectServerAttributeGroupFacade.dataSourceID : String\r\n    get()  = attributeStringString.get(this, \"DataSourceID\")\r\n    set(newValue) {attributeStringString.set(this, \"DataSourceID\", newValue)}\r\n\r\nvar SelectServerAttributeGroupFacade.dataTextField : String\r\n    get()  = attributeStringString.get(this, \"DataTextField\")\r\n    set(newValue) {attributeStringString.set(this, \"DataTextField\", newValue)}\r\n\r\nvar SelectServerAttributeGroupFacade.dataValueField : String\r\n    get()  = attributeStringString.get(this, \"DataValueField\")\r\n    set(newValue) {attributeStringString.set(this, \"DataValueField\", newValue)}\r\n\r\n\r\n","package kotlinx.html.js\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.attributes.*\r\nimport kotlinx.html.dom.*\r\nimport org.w3c.dom.events.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\nvar CommonAttributeGroupFacade.onAbortFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onAbort\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onabort\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onBlurFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onBlur\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onblur\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onCanPlayFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onCanPlay\")\r\n    set(newValue) {consumer.onTagEvent(this, \"oncanplay\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onCanPlayThroughFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onCanPlayThrough\")\r\n    set(newValue) {consumer.onTagEvent(this, \"oncanplaythrough\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onClickFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onClick\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onclick\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onContextMenuFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onContextMenu\")\r\n    set(newValue) {consumer.onTagEvent(this, \"oncontextmenu\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDoubleClickFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDoubleClick\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondblclick\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDrag\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondrag\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragEndFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragEnd\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondragend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragEnterFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragEnter\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondragenter\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragLeaveFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragLeave\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondragleave\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragOverFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragOver\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondragover\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDragStartFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragStart\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondragstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDropFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDrop\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondrop\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onDurationChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDurationChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ondurationchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onEmptiedFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onEmptied\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onemptied\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onEndedFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onEnded\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onended\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onErrorFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onError\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onerror\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocusFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFocus\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onfocus\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocusInFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFocusIn\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onfocusin\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFocusOutFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFocusOut\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onfocusout\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFormChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFormChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onformchange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onFormInputFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFormInput\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onforminput\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onInputFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onInput\")\r\n    set(newValue) {consumer.onTagEvent(this, \"oninput\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onInvalidFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onInvalid\")\r\n    set(newValue) {consumer.onTagEvent(this, \"oninvalid\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyDownFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyDown\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onkeydown\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyPressFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyPress\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onkeypress\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onKeyUpFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyUp\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onkeyup\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoad\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onload\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadedDataFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadedData\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onloadeddata\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadedMetaDataFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadedMetaData\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onloadedmetadata\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onLoadStartFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadStart\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onloadstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseDownFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseDown\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmousedown\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseMoveFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseMove\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmousemove\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseOutFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseOut\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmouseout\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseOverFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseOver\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmouseover\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseUpFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseUp\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmouseup\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onMouseWheelFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseWheel\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onmousewheel\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPauseFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPause\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onpause\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPlayFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPlay\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onplay\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onPlayingFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPlaying\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onplaying\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onProgressFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onProgress\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onprogress\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onRateChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onRateChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onratechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onReadyStateChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onReadyStateChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onreadystatechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onScrollFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onScroll\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onscroll\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSearchFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSearch\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onsearch\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSeekedFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSeeked\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onseeked\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSeekingFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSeeking\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onseeking\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSelectFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSelect\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onselect\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onShowFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onShow\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onshow\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onStalledFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onStalled\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onstalled\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSubmitFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSubmit\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onsubmit\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onSuspendFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSuspend\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onsuspend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTimeUpdateFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTimeUpdate\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ontimeupdate\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchCancelFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTouchCancel\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ontouchcancel\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchEndFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTouchEnd\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ontouchend\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchMoveFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTouchMove\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ontouchmove\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onTouchStartFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTouchStart\")\r\n    set(newValue) {consumer.onTagEvent(this, \"ontouchstart\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onVolumeChangeFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onVolumeChange\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onvolumechange\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onWaitingFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onWaiting\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onwaiting\", newValue)}\r\n\r\nvar CommonAttributeGroupFacade.onWheelFunction : (Event) -> Unit\r\n    get()  = throw UnsupportedOperationException(\"You can't read variable onWheel\")\r\n    set(newValue) {consumer.onTagEvent(this, \"onwheel\", newValue)}\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\ninternal val attributeStringString : Attribute<String> = StringAttribute()\r\n\r\ninternal val attributeSetStringStringSet : Attribute<Set<String>> = StringSetAttribute()\r\n\r\ninternal val attributeBooleanBoolean : Attribute<Boolean> = BooleanAttribute()\r\n\r\ninternal val attributeBooleanBooleanOnOff : Attribute<Boolean> = BooleanAttribute(\"on\", \"off\")\r\n\r\ninternal val attributeBooleanTicker : Attribute<Boolean> = TickerAttribute()\r\n\r\ninternal val attributeButtonFormEncTypeEnumButtonFormEncTypeValues : Attribute<ButtonFormEncType> = EnumAttribute(buttonFormEncTypeValues)\r\n\r\ninternal val attributeButtonFormMethodEnumButtonFormMethodValues : Attribute<ButtonFormMethod> = EnumAttribute(buttonFormMethodValues)\r\n\r\ninternal val attributeButtonTypeEnumButtonTypeValues : Attribute<ButtonType> = EnumAttribute(buttonTypeValues)\r\n\r\ninternal val attributeCommandTypeEnumCommandTypeValues : Attribute<CommandType> = EnumAttribute(commandTypeValues)\r\n\r\ninternal val attributeDirEnumDirValues : Attribute<Dir> = EnumAttribute(dirValues)\r\n\r\ninternal val attributeDraggableEnumDraggableValues : Attribute<Draggable> = EnumAttribute(draggableValues)\r\n\r\ninternal val attributeFormEncTypeEnumFormEncTypeValues : Attribute<FormEncType> = EnumAttribute(formEncTypeValues)\r\n\r\ninternal val attributeFormMethodEnumFormMethodValues : Attribute<FormMethod> = EnumAttribute(formMethodValues)\r\n\r\ninternal val attributeIframeSandboxEnumIframeSandboxValues : Attribute<IframeSandbox> = EnumAttribute(iframeSandboxValues)\r\n\r\ninternal val attributeInputFormEncTypeEnumInputFormEncTypeValues : Attribute<InputFormEncType> = EnumAttribute(inputFormEncTypeValues)\r\n\r\ninternal val attributeInputFormMethodEnumInputFormMethodValues : Attribute<InputFormMethod> = EnumAttribute(inputFormMethodValues)\r\n\r\ninternal val attributeInputTypeEnumInputTypeValues : Attribute<InputType> = EnumAttribute(inputTypeValues)\r\n\r\ninternal val attributeKeyGenKeyTypeEnumKeyGenKeyTypeValues : Attribute<KeyGenKeyType> = EnumAttribute(keyGenKeyTypeValues)\r\n\r\ninternal val attributeRunAtEnumRunAtValues : Attribute<RunAt> = EnumAttribute(runAtValues)\r\n\r\ninternal val attributeTextAreaWrapEnumTextAreaWrapValues : Attribute<TextAreaWrap> = EnumAttribute(textAreaWrapValues)\r\n\r\ninternal val attributeThScopeEnumThScopeValues : Attribute<ThScope> = EnumAttribute(thScopeValues)\r\n\r\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = {\n  INIT: '@@redux/INIT' + Math.random().toString(36).substring(7).split('').join('.'),\n  REPLACE: '@@redux/REPLACE' + Math.random().toString(36).substring(7).split('').join('.')\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) return false;\n\n  var proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.REPLACE });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && 'action \"' + String(actionType) + '\"' || 'an action';\n\n  return 'Given ' + actionDescription + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning('No reducer provided for key \"' + key + '\"');\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  var unexpectedKeyCache = void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError = void 0;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments[1];\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) !== 'object' || actionCreators === null) {\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var store = createStore.apply(undefined, args);\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(undefined, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(undefined, chain)(store.dispatch);\n\n      return _extends({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning(\"You are currently using minified code outside of NODE_ENV === 'production'. \" + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { createStore, combineReducers, bindActionCreators, applyMiddleware, compose, ActionTypes as __DO_NOT_USE__ActionTypes };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try { // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","package react.dom\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport react.*\n\ninline fun <T : Tag> RBuilder.tag(block: RDOMBuilder<T>.() -> Unit, noinline factory: (TagConsumer<Unit>) -> T): ReactElement =\n    child(RDOMBuilder(factory).apply {\n        block()\n    }.create())\n\ninline fun RBuilder.a(href: String? = null, target: String? = null, classes: String? = null, block: RDOMBuilder<A>.() -> Unit): ReactElement = tag(block) { A(attributesMapOf(\"href\", href, \"target\", target, \"class\", classes), it) }\n\ninline fun RBuilder.abbr(classes: String? = null, block: RDOMBuilder<ABBR>.() -> Unit): ReactElement = tag(block) { ABBR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.address(classes: String? = null, block: RDOMBuilder<ADDRESS>.() -> Unit): ReactElement = tag(block) { ADDRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.area(shape: AreaShape? = null, alt: String? = null, classes: String? = null, block: RDOMBuilder<AREA>.() -> Unit): ReactElement = tag(block) { AREA(attributesMapOf(\"Shape\", shape?.enumEncode(), \"alt\", alt, \"class\", classes), it) }\n\ninline fun RBuilder.article(classes: String? = null, block: RDOMBuilder<ARTICLE>.() -> Unit): ReactElement = tag(block) { ARTICLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.aside(classes: String? = null, block: RDOMBuilder<ASIDE>.() -> Unit): ReactElement = tag(block) { ASIDE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.audio(classes: String? = null, block: RDOMBuilder<AUDIO>.() -> Unit): ReactElement = tag(block) { AUDIO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.b(classes: String? = null, block: RDOMBuilder<B>.() -> Unit): ReactElement = tag(block) { B(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.base(classes: String? = null, block: RDOMBuilder<BASE>.() -> Unit): ReactElement = tag(block) { BASE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdi(classes: String? = null, block: RDOMBuilder<BDI>.() -> Unit): ReactElement = tag(block) { BDI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdo(classes: String? = null, block: RDOMBuilder<BDO>.() -> Unit): ReactElement = tag(block) { BDO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.blockQuote(classes: String? = null, block: RDOMBuilder<BLOCKQUOTE>.() -> Unit): ReactElement = tag(block) { BLOCKQUOTE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.body(classes: String? = null, block: RDOMBuilder<BODY>.() -> Unit): ReactElement = tag(block) { BODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.br(classes: String? = null, block: RDOMBuilder<BR>.() -> Unit): ReactElement = tag(block) { BR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.button(formEncType: ButtonFormEncType? = null, formMethod: ButtonFormMethod? = null, type: ButtonType? = null, classes: String? = null, block: RDOMBuilder<BUTTON>.() -> Unit): ReactElement = tag(block) { BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.canvas(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { CANVAS(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.canvas(classes: String? = null, block: RDOMBuilder<CANVAS>.() -> Unit): ReactElement = tag(block) { CANVAS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.caption(classes: String? = null, block: RDOMBuilder<CAPTION>.() -> Unit): ReactElement = tag(block) { CAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.cite(classes: String? = null, block: RDOMBuilder<CITE>.() -> Unit): ReactElement = tag(block) { CITE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.code(classes: String? = null, block: RDOMBuilder<CODE>.() -> Unit): ReactElement = tag(block) { CODE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.col(classes: String? = null, block: RDOMBuilder<COL>.() -> Unit): ReactElement = tag(block) { COL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.colGroup(classes: String? = null, block: RDOMBuilder<COLGROUP>.() -> Unit): ReactElement = tag(block) { COLGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.command(type: CommandType? = null, classes: String? = null, block: RDOMBuilder<COMMAND>.() -> Unit): ReactElement = tag(block) { COMMAND(attributesMapOf(\"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.dataList(classes: String? = null, block: RDOMBuilder<DATALIST>.() -> Unit): ReactElement = tag(block) { DATALIST(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dd(classes: String? = null, block: RDOMBuilder<DD>.() -> Unit): ReactElement = tag(block) { DD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.del(classes: String? = null, block: RDOMBuilder<DEL>.() -> Unit): ReactElement = tag(block) { DEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.details(classes: String? = null, block: RDOMBuilder<DETAILS>.() -> Unit): ReactElement = tag(block) { DETAILS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dfn(classes: String? = null, block: RDOMBuilder<DFN>.() -> Unit): ReactElement = tag(block) { DFN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dialog(classes: String? = null, block: RDOMBuilder<DIALOG>.() -> Unit): ReactElement = tag(block) { DIALOG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.div(classes: String? = null, block: RDOMBuilder<DIV>.() -> Unit): ReactElement = tag(block) { DIV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dl(classes: String? = null, block: RDOMBuilder<DL>.() -> Unit): ReactElement = tag(block) { DL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dt(classes: String? = null, block: RDOMBuilder<DT>.() -> Unit): ReactElement = tag(block) { DT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.em(classes: String? = null, block: RDOMBuilder<EM>.() -> Unit): ReactElement = tag(block) { EM(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.embed(classes: String? = null, block: RDOMBuilder<EMBED>.() -> Unit): ReactElement = tag(block) { EMBED(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.fieldSet(classes: String? = null, block: RDOMBuilder<FIELDSET>.() -> Unit): ReactElement = tag(block) { FIELDSET(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figcaption(classes: String? = null, block: RDOMBuilder<FIGCAPTION>.() -> Unit): ReactElement = tag(block) { FIGCAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figure(classes: String? = null, block: RDOMBuilder<FIGURE>.() -> Unit): ReactElement = tag(block) { FIGURE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.footer(classes: String? = null, block: RDOMBuilder<FOOTER>.() -> Unit): ReactElement = tag(block) { FOOTER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.form(action: String? = null, encType: FormEncType? = null, method: FormMethod? = null, classes: String? = null, block: RDOMBuilder<FORM>.() -> Unit): ReactElement = tag(block) { FORM(attributesMapOf(\"action\", action, \"enctype\", encType?.enumEncode(), \"method\", method?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.h1(classes: String? = null, block: RDOMBuilder<H1>.() -> Unit): ReactElement = tag(block) { H1(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h2(classes: String? = null, block: RDOMBuilder<H2>.() -> Unit): ReactElement = tag(block) { H2(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h3(classes: String? = null, block: RDOMBuilder<H3>.() -> Unit): ReactElement = tag(block) { H3(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h4(classes: String? = null, block: RDOMBuilder<H4>.() -> Unit): ReactElement = tag(block) { H4(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h5(classes: String? = null, block: RDOMBuilder<H5>.() -> Unit): ReactElement = tag(block) { H5(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h6(classes: String? = null, block: RDOMBuilder<H6>.() -> Unit): ReactElement = tag(block) { H6(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.head(block: RDOMBuilder<HEAD>.() -> Unit): ReactElement = tag(block) { HEAD(emptyMap, it) }\n\ninline fun RBuilder.header(classes: String? = null, block: RDOMBuilder<HEADER>.() -> Unit): ReactElement = tag(block) { HEADER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hGroup(classes: String? = null, block: RDOMBuilder<HGROUP>.() -> Unit): ReactElement = tag(block) { HGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hr(classes: String? = null, block: RDOMBuilder<HR>.() -> Unit): ReactElement = tag(block) { HR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.html(block: RDOMBuilder<HTML>.() -> Unit): ReactElement = tag(block) { HTML(emptyMap, it) }\n\ninline fun RBuilder.i(classes: String? = null, block: RDOMBuilder<I>.() -> Unit): ReactElement = tag(block) { I(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, block: RDOMBuilder<IFRAME>.() -> Unit): ReactElement = tag(block) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.img(alt: String? = null, src: String? = null, classes: String? = null, block: RDOMBuilder<IMG>.() -> Unit): ReactElement = tag(block) { IMG(attributesMapOf(\"alt\", alt, \"src\", src, \"class\", classes), it) }\n\ninline fun RBuilder.input(type: InputType? = null, formEncType: InputFormEncType? = null, formMethod: InputFormMethod? = null, name: String? = null, classes: String? = null, block: RDOMBuilder<INPUT>.() -> Unit): ReactElement = tag(block) { INPUT(attributesMapOf(\"type\", type?.enumEncode(), \"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.ins(classes: String? = null, block: RDOMBuilder<INS>.() -> Unit): ReactElement = tag(block) { INS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.kbd(classes: String? = null, block: RDOMBuilder<KBD>.() -> Unit): ReactElement = tag(block) { KBD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.keyGen(keyType: KeyGenKeyType? = null, classes: String? = null, block: RDOMBuilder<KEYGEN>.() -> Unit): ReactElement = tag(block) { KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.label(classes: String? = null, block: RDOMBuilder<LABEL>.() -> Unit): ReactElement = tag(block) { LABEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.legend(classes: String? = null, block: RDOMBuilder<LEGEND>.() -> Unit): ReactElement = tag(block) { LEGEND(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.li(classes: String? = null, block: RDOMBuilder<LI>.() -> Unit): ReactElement = tag(block) { LI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.link(href: String? = null, rel: String? = null, type: String? = null, block: RDOMBuilder<LINK>.() -> Unit): ReactElement = tag(block) { LINK(attributesMapOf(\"href\", href, \"rel\", rel, \"type\", type), it) }\n\ninline fun RBuilder.map(name: String? = null, classes: String? = null, block: RDOMBuilder<MAP>.() -> Unit): ReactElement = tag(block) { MAP(attributesMapOf(\"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.mark(classes: String? = null, block: RDOMBuilder<MARK>.() -> Unit): ReactElement = tag(block) { MARK(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.math(classes: String? = null, block: RDOMBuilder<MATH>.() -> Unit): ReactElement = tag(block) { MATH(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.mathml(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { MATHML(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.mathml(classes: String? = null, block: RDOMBuilder<MATHML>.() -> Unit): ReactElement = tag(block) { MATHML(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.meta(name: String? = null, content: String? = null, block: RDOMBuilder<META>.() -> Unit): ReactElement = tag(block) { META(attributesMapOf(\"name\", name, \"content\", content), it) }\n\ninline fun RBuilder.meter(classes: String? = null, block: RDOMBuilder<METER>.() -> Unit): ReactElement = tag(block) { METER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.nav(classes: String? = null, block: RDOMBuilder<NAV>.() -> Unit): ReactElement = tag(block) { NAV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.noScript(classes: String? = null, block: RDOMBuilder<NOSCRIPT>.() -> Unit): ReactElement = tag(block) { NOSCRIPT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.object_(classes: String? = null, block: RDOMBuilder<OBJECT>.() -> Unit): ReactElement = tag(block) { OBJECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ol(classes: String? = null, block: RDOMBuilder<OL>.() -> Unit): ReactElement = tag(block) { OL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.optGroup(label: String? = null, classes: String? = null, block: RDOMBuilder<OPTGROUP>.() -> Unit): ReactElement = tag(block) { OPTGROUP(attributesMapOf(\"label\", label, \"class\", classes), it) }\n\ninline fun RBuilder.option(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { OPTION(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.option(classes: String? = null, block: RDOMBuilder<OPTION>.() -> Unit): ReactElement = tag(block) { OPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.output(classes: String? = null, block: RDOMBuilder<OUTPUT>.() -> Unit): ReactElement = tag(block) { OUTPUT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.p(classes: String? = null, block: RDOMBuilder<P>.() -> Unit): ReactElement = tag(block) { P(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.param(name: String? = null, value: String? = null, block: RDOMBuilder<PARAM>.() -> Unit): ReactElement = tag(block) { PARAM(attributesMapOf(\"name\", name, \"value\", value), it) }\n\ninline fun RBuilder.pre(classes: String? = null, block: RDOMBuilder<PRE>.() -> Unit): ReactElement = tag(block) { PRE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.progress(classes: String? = null, block: RDOMBuilder<PROGRESS>.() -> Unit): ReactElement = tag(block) { PROGRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.q(classes: String? = null, block: RDOMBuilder<Q>.() -> Unit): ReactElement = tag(block) { Q(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rp(classes: String? = null, block: RDOMBuilder<RP>.() -> Unit): ReactElement = tag(block) { RP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rt(classes: String? = null, block: RDOMBuilder<RT>.() -> Unit): ReactElement = tag(block) { RT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ruby(classes: String? = null, block: RDOMBuilder<RUBY>.() -> Unit): ReactElement = tag(block) { RUBY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.samp(classes: String? = null, block: RDOMBuilder<SAMP>.() -> Unit): ReactElement = tag(block) { SAMP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.script(type: String? = null, src: String? = null, block: RDOMBuilder<SCRIPT>.() -> Unit): ReactElement = tag(block) { SCRIPT(attributesMapOf(\"type\", type, \"src\", src), it) }\n\ninline fun RBuilder.section(classes: String? = null, block: RDOMBuilder<SECTION>.() -> Unit): ReactElement = tag(block) { SECTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.select(classes: String? = null, block: RDOMBuilder<SELECT>.() -> Unit): ReactElement = tag(block) { SELECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.small(classes: String? = null, block: RDOMBuilder<SMALL>.() -> Unit): ReactElement = tag(block) { SMALL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.source(classes: String? = null, block: RDOMBuilder<SOURCE>.() -> Unit): ReactElement = tag(block) { SOURCE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.span(classes: String? = null, block: RDOMBuilder<SPAN>.() -> Unit): ReactElement = tag(block) { SPAN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.strong(classes: String? = null, block: RDOMBuilder<STRONG>.() -> Unit): ReactElement = tag(block) { STRONG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.style(type: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { STYLE(attributesMapOf(\"type\", type), it) }\ninline fun RBuilder.style(type: String? = null, block: RDOMBuilder<STYLE>.() -> Unit): ReactElement = tag(block) { STYLE(attributesMapOf(\"type\", type), it) }\n\ninline fun RBuilder.sub(classes: String? = null, block: RDOMBuilder<SUB>.() -> Unit): ReactElement = tag(block) { SUB(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.sup(classes: String? = null, block: RDOMBuilder<SUP>.() -> Unit): ReactElement = tag(block) { SUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.svg(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { SVG(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.svg(classes: String? = null, block: RDOMBuilder<SVG>.() -> Unit): ReactElement = tag(block) { SVG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.table(classes: String? = null, block: RDOMBuilder<TABLE>.() -> Unit): ReactElement = tag(block) { TABLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.tbody(classes: String? = null, block: RDOMBuilder<TBODY>.() -> Unit): ReactElement = tag(block) { TBODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.td(classes: String? = null, block: RDOMBuilder<TD>.() -> Unit): ReactElement = tag(block) { TD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, block: RDOMBuilder<TEXTAREA>.() -> Unit): ReactElement = tag(block) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.tfoot(classes: String? = null, block: RDOMBuilder<TFOOT>.() -> Unit): ReactElement = tag(block) { TFOOT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.th(scope: ThScope? = null, classes: String? = null, block: RDOMBuilder<TH>.() -> Unit): ReactElement = tag(block) { TH(attributesMapOf(\"scope\", scope?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.thead(classes: String? = null, block: RDOMBuilder<THEAD>.() -> Unit): ReactElement = tag(block) { THEAD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.time(classes: String? = null, block: RDOMBuilder<TIME>.() -> Unit): ReactElement = tag(block) { TIME(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.title(content: String = \"\"): ReactElement = tag({ +content }) { TITLE(emptyMap, it) }\ninline fun RBuilder.title(block: RDOMBuilder<TITLE>.() -> Unit): ReactElement = tag(block) { TITLE(emptyMap, it) }\n\ninline fun RBuilder.tr(classes: String? = null, block: RDOMBuilder<TR>.() -> Unit): ReactElement = tag(block) { TR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ul(classes: String? = null, block: RDOMBuilder<UL>.() -> Unit): ReactElement = tag(block) { UL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.var_(classes: String? = null, block: RDOMBuilder<VAR>.() -> Unit): ReactElement = tag(block) { VAR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.video(classes: String? = null, block: RDOMBuilder<VIDEO>.() -> Unit): ReactElement = tag(block) { VIDEO(attributesMapOf(\"class\", classes), it) }\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","package component\n\nimport data.*\nimport hoc.withDisplayName\nimport kotlinx.html.InputType\nimport kotlinx.html.id\nimport kotlinx.html.js.onClickFunction\nimport org.w3c.dom.HTMLUListElement\nimport react.*\nimport react.dom.*\nimport react.router.dom.*\nimport redux.*\nimport kotlin.browser.document\n\nclass IndicesWithQuestion(val question:Question, val questionGroupIndex:Int, val questionIndex:Int )/* Класс для группировки индексов вопроса и самого вопроса,\n                                                                                                    нужен для того, чтобы в компонентах renderByTypesFC и Home работали ссылки */\ninterface RootProps : RProps {\n\tvar store: Store<State, RAction, WrapperAction>\n}\n\nfun root() = functionalComponent<RootProps> { props ->\n\tval (visible, setVisible) = useState(true)\n\n\theader {\n\t\t\tnav(\"nav\"){\n\t\t\t\tinput( classes = \"nav__trigger-input\", type = InputType.checkBox ) {\n\t\t\t\t\tattrs.id = \"trigger\"\n\t\t\t\t}\n\t\t\t\tlabel( classes = \"nav__trigger-finger\" ) {\n\t\t\t\t\tattrs.htmlFor = \"trigger\"; span{+\"\"}\n\t\t\t\t\tattrs.onClickFunction = {//при нажатии меняется состояние этого компонента, что приводит к изменению прозначности элемента с классом \"nav__list\"\n\t\t\t\t\t\tsetVisible(!visible)\n\t\t\t\t\t\t(document.querySelector(\".nav__list\") as HTMLUListElement).style.setProperty(\"opacity\", if(visible) \".85\" else \"0\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tul(\"nav__list\") {\n\n\t\t\t\t\tli(\"nav__item\") {\n\t\t\t\t\t\tnavLink(className = \"nav__link\", to = \"\") {\n\t\t\t\t\t\t\tspan {\n\t\t\t\t\t\t\t\t+\"домой\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tli(\"nav__item\") {\n\t\t\t\t\t\tnavLink(className = \"nav__link\", to = \"/question_groups\") {\n\t\t\t\t\t\t\tspan {\n\t\t\t\t\t\t\t\t+\"Список вопросов\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tli(\"nav__item\") {\n\t\t\t\t\t\tnavLink(className = \"nav__link\",to = \"/${types[0]}\"){\n\t\t\t\t\t\t\tspan{ +\"Список вопросов типа \\\"Short answer\\\"\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tli(\"nav__item\") {\n\t\t\t\t\t\tnavLink(className = \"nav__link\",to = \"/${types[1]}\"){\n\t\t\t\t\t\t\tspan{ +\"Список вопросов типа \\\"Numerical response\\\"\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tswitch {\n//\t\t\troute(\"/question_groups\",\n//\t\t\t\t\texact = true,\n//\t\t\t\t\trender = {\n//\t\t\t\t\t\tgroupListFC(props.store.getState().questionGroup, \"Список групп вопросов\")//Компонент со списком всех групп вопросов\n//\t\t\t\t\t}\n//\t\t\t)\n\t\t\troute(\"/question_groups\",\n\t\t\t\texact = true,\n\t\t\t\trender = {\n\t\t\t\t\tcurrentGroupFC(props.store.getState().questionGroup[0], props.store.getState().questionGroup[0].title,0)//компонент отдельной группы вопросов\n\t\t\t\t}\n\t\t\t)\n\t\t\troute(\"/${types[0]}\",\n\t\t\t\t\texact = true,\n\t\t\t\t\trender = {\n\t\t\t\t\t\trenderByTypesFC(getQuestionsByType(props.store.getState().questionGroup, types[0]), \"Short answer\")// Компонент со всеми вопросами типа shortanswer\n\t\t\t\t\t}\n\t\t\t)\n\t\t\troute(\"/${types[1]}\",\n\t\t\t\t\texact = true,\n\t\t\t\t\trender = {\n\t\t\t\t\t\trenderByTypesFC(getQuestionsByType(props.store.getState().questionGroup, types[1]), \"Number response\")// Компонент со всеми вопросами типа numeric\n\t\t\t\t\t}\n\t\t\t)\n\n\t\t\tprops.store.getState().questionGroup.forEachIndexed { questionGroupIndex, questionGroup ->\n\t\t\t\troute(\"/question_groups/group_$questionGroupIndex\",\n\t\t\t\t\texact = true,\n\t\t\t\t\trender = {\n\t\t\t\t\t\tcurrentGroupFC(questionGroup, questionGroup.title, questionGroupIndex)//компонент отдельной группы вопросов\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tquestionGroup.questions.forEachIndexed { index, it ->\n\t\t\t\t\troute(\"/question_groups/group_$questionGroupIndex/$index\",\n\t\t\t\t\t\texact = true,\n\t\t\t\t\t\trender = {\n\t\t\t\t\t\t\tcurrentQuestionFC(it, it.title, questionGroupIndex, index)//компонент отдельного вопроса\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nfun getQuestionsByType(questionGroup:MutableList<QuestionGroup>, type:String):MutableList<IndicesWithQuestion>{// фильтрует список по вопросам и возвращает список экземпляров класса\n\tval temp = mutableListOf<IndicesWithQuestion>()                                                            // IndicesWithQuestion только с вопросами указанного типа\n\tquestionGroup.forEachIndexed {questionGroupIndex, qg ->\n\t\tqg.questions.forEachIndexed {questionIndex, question ->\n\t\t\tif(question.type == type)\n\t\t\t\ttemp.add(IndicesWithQuestion(question, questionGroupIndex, questionIndex))\n\t\t}\n\t}\n\treturn temp\n}\n\nfun RBuilder.root(store: Store<State, RAction, WrapperAction>) =\n\tchild(withDisplayName(\"Root\", root())) {\n\t\tattrs.store = store\n\t}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","package component\n\nimport AddQuestion\nimport DeleteQuestion\nimport ImportQuestions\nimport QuestionListToggleEdit\nimport data.*\nimport hoc.withDisplayName\nimport kotlinx.html.InputType\nimport kotlinx.html.id\nimport kotlinx.html.js.onClickFunction\nimport org.w3c.dom.HTMLTextAreaElement\nimport org.w3c.dom.events.Event\nimport react.*\nimport react.dom.*\nimport react.functionalComponent\nimport react.router.dom.navLink\nimport store\nimport kotlin.browser.document\n\ninterface GroupProps: RProps {\n\tvar questions:QuestionGroup\n}\nexternal fun encodeURIComponent(str: String): String\n\nfun currentGroup(header: String, index:Int) =\n\tfunctionalComponent<GroupProps> { props ->\n\t\tval types = listOf(\"shortanswer\", \"numerical\")\n\n\t\tval (typeIndex, setType) = useState(0)\n\t\tval result = questionGroupXML(store.getState().questionGroup[index])\n\n\t\tval (visibleImport, setVisibleImport) = useState(false)\n\t\tval (visibleExport, setVisibleExport) = useState(false)\n\t\tval (visibleExportFormat, setVisibleExportFormat) = useState(false)\n\t\tval (case, setCase) = useState(false)\n\t\tdiv() {\n\n\t\t\tdiv() {\n\t\t\t\th2 { +header }\n\t\t\t\tbutton {\n\t\t\t\t\tattrs.onClickFunction = questionListToggleEdit()\n\t\t\t\t\t+\"Скрыть\\\\показать элементы редактирования\"\n\t\t\t\t}\n\t\t\t\ttable(classes = \"fl-table\") {\n\t\t\t\t\tthead {\n\t\t\t\t\t\ttr {\n\t\t\t\t\t\t\tth{\n\t\t\t\t\t\t\t\t+\"id\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Заголовок\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Вопрос\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Тип вопроса\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Строгий режим\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Ссылка\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().questionListEditable) // если не была нажата кнопка редактирования, то эта ячейка отрисовываться не будет\n\t\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t\t+\"Удалить\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttbody {\n\t\t\t\t\t\tprops.questions.questions.forEachIndexed{ questionIndex, it ->\n\t\t\t\t\t\t\ttr{\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+\"${it.id}\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.title\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.question\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.type\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+\"${it.useCase}\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tnavLink(\"/question_groups/group_$index/$questionIndex\"){\n\t\t\t\t\t\t\t\t\t\t+\"Подробнее >>\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(store.getState().questionListEditable)\n\t\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t\tbutton(classes = \"btn-2\") {\n\t\t\t\t\t\t\t\t\t\t\t+\"Удалить\"\n\t\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = deleteQuestion(index, questionIndex)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(store.getState().questionListEditable)\n\t\t\t\t\t\t\ttr{\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tinput(InputType.number) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = \"id\"\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"add-id\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tinput(InputType.text) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = \"title\"\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"add-title\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tinput(InputType.text) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = \"question\"\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"add-question\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tbutton(classes = \"btn-2\"){\n\t\t\t\t\t\t\t\t\t\t+types[typeIndex]\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = {\n\t\t\t\t\t\t\t\t\t\t\tsetType(if(typeIndex == 0) 1 else 0)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tbutton(classes = \"btn-2\"){\n\t\t\t\t\t\t\t\t\t\t+\"$case\"\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = {\n\t\t\t\t\t\t\t\t\t\t\tsetCase(!case)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\t\t+\"Добавить\"\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = addQuestion(index, types[typeIndex], case)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdiv(\"export-import\"){\n\t\t\t\t\tdiv(\"exportBlock\"){\n\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t+\"Экспорт\"\n\t\t\t\t\t\t\tattrs.onClickFunction = {setVisibleExport(!visibleExport)}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(visibleExport){\n\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\tattrs.href =\n\t\t\t\t\t\t\t\t\t\"data:application/text; charset=utf-8,\" + encodeURIComponent(\"<xml version=\\\"1.0\\\" />\\n \\n $result\")\n\t\t\t\t\t\t\t\tbutton { +\"Скачать\" }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t+\"Показать/скрыть вопросы в moodle xml\"\n\t\t\t\t\t\t\t\tattrs.onClickFunction = { setVisibleExportFormat(!visibleExportFormat) }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (visibleExportFormat) pre {\n\t\t\t\t\t\t\t\t+result\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdiv(classes = \"inputBlock\") {\n\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t+\"Импорт\"\n\t\t\t\t\t\t\tattrs.onClickFunction = {setVisibleImport(!visibleImport)}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(visibleImport){\n\t\t\t\t\t\t\ttextArea {\n\t\t\t\t\t\t\t\tattrs.id = \"input-import\"\n\t\t\t\t\t\t\t\tattrs.placeholder = \"Вставьте moodleXML сюда\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\tattrs.onClickFunction = submitInput(index)\n\t\t\t\t\t\t\t\t+\"Импортировать\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n//экспорт\nfun answersXML(answers:MutableList<AnswerVariant>):String{\n\tvar result = \"\"\n\tanswers.forEach {\n\t\tresult +=\"<answer fraction=\\\"${it.fraction}\\\">\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\t\"<text>\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\"\\t\" +\t\tit.answer +\"\\n\"+\n\t\t\t\t\"\\t\" +\"\\t\" +\t\"</text>\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\t\t\"<feedback>\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\t\t\"<text>\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\"\\t\" +\t\t\tit.feedback + \"\\n\"+\n\t\t\t\t\"\\t\" +\"\\t\" +\t\"</text>\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\t\"</feedback>\\n\" +\n\t\t\t\t\"\\t\" +\"</answer>\\n\"\n\t}\n\treturn result\n}\n\nfun questionXML(questionGroup:MutableList<Question>):String{\n\tvar result = \"\"\n\tquestionGroup.forEach{\n\t\tresult +=   \"\\t\" +\"<question type = \\\"${it.type}\\\">\\n\" +\n\t\t\t\t\"\\t\" +\t\"<name>\\n\"+\n\t\t\t\t\"\\t\" +\"\\t\" +\t\"<text>\\n${it.title}\\n</text>\\n\"+\n\t\t\t\t\"\\t\" +\t\"</name>\\n\"+\n\t\t\t\t\"\\t\" +\"<questiontext format=\\\"html\\\">\\n\" +\n\t\t\t\t\"\\t\" +\"\\t\" +\tit.question + \"\\n\"+\n\t\t\t\t\"\\t\" +\"</questiontext>\\n\" +\n\t\t\t\t\"\\t\" + answersXML(it.answers) +\"\\n\"+\n\t\t\t\t\"\\t\" +\"</question>\\n\"\n\t}\n\treturn result\n}\nfun questionGroupXML(questionGroup:QuestionGroup):String{\n\treturn \"<quiz>\\n\" +\n\t\t\t\tquestionXML(questionGroup.questions)+\"\\n\"+\n\t\t\t\"</quiz>\\n\"\n}\n\n//импорт\nfun getFormatAnswers(input:String):MutableList<AnswerVariant>{\n\tvar temp = input\n\tval answersFormat = mutableListOf<AnswerVariant>()\n\twhile( \"-1\" != temp.resSubstringAfter(\"<answer fraction\").resSubstringBefore(\"</answer>\")) {\n\t\tanswersFormat.add(AnswerVariant(\n\t\t\tanswer = temp.resSubstringAfter(\"<answer fraction\").resSubstringBefore(\"</answer>\").resSubstringAfter(\"<text>\").resSubstringBefore(\"</text>\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"),\n\t\t\tfeedback = temp.resSubstringAfter(\"<answer fraction\").resSubstringBefore(\"</answer>\").resSubstringAfter(\"<feedback>\").resSubstringBefore(\"</feedback>\").resSubstringAfter(\"<text>\").resSubstringBefore(\"</text>\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"),\n\t\t\tfraction = temp.resSubstringAfter(\"<answer fraction=\\\"\").resSubstringBefore(\"\\\"\").toInt()\n\t\t))\n\t\ttemp = temp.removeRange(temp.indexOf(\"<answer fraction\")..temp.indexOf(\"</answer>\"))\n\t}\n\treturn answersFormat\n}\nfun getFormatQuestions(input:String):MutableList<Question>{\n\tvar temp = input\n\tval questions = mutableListOf<String>()\n\tval res = mutableListOf<Question>()\n\tvar counter = 1\n\twhile( \"-1\" != temp.resSubstringAfter(\"<question type\").resSubstringBefore(\"</question>\")){\n\t\tres.add(Question(\n\t\t\ttype = temp.resSubstringAfter(\"<question type=\\\"\").resSubstringBefore(\"\\\">\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"),\n\t\t\ttitle = temp.resSubstringAfter(\"<name>\").resSubstringBefore(\"</name>\").resSubstringAfter(\"<text>\").resSubstringBefore(\"</text>\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"),\n\t\t\tquestion = temp.resSubstringAfter(\"<questiontext format=\\\"html\\\">\").resSubstringBefore(\"</questiontext>\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"),\n\t\t\tuseCase = false,\n\t\t\tanswers = getFormatAnswers(temp.resSubstringAfter(\"<question type\").resSubstringBefore(\"</question>\")),\n\t\t\tid = store.getState().questionGroup.size + counter++\n\t\t))\n\t\tquestions.add(temp.resSubstringAfter(\"<question type\").resSubstringBefore(\"</question>\"))\n\t\ttemp  = temp.removeRange(temp.indexOf(\"<question type\")..temp.indexOf(\"</question>\"))\n\t}\n\treturn res\n}\nfun getFormatQuestionGroup(input:String):MutableList<Question>{\n\tvar temp = input\n\tval quizs = mutableListOf<String>()\n\tval result = mutableListOf<QuestionGroup>()\n\twhile( \"-1\" != temp.resSubstringAfter(\"<quiz>\").resSubstringBefore(\"</quiz>\")){\n\t\tquizs.add(temp.resSubstringAfter(\"<quiz>\").resSubstringBefore(\"</quiz>\"))\n\t\ttemp  = temp.removeRange(temp.indexOf(\"<quiz>\")..temp.indexOf(\"</quiz>\"))\n\t}\n\tquizs.forEach {\n\t\tresult.add(QuestionGroup(\"IMPORTED\",getFormatQuestions(it)))\n\t}\n\treturn result[0].questions\n}\nfun submitInput(index:Int):(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(ImportQuestions(index,getFormatQuestionGroup((document.querySelector(\"#input-import\") as HTMLTextAreaElement).value)))\n\t}\n}\n\nfun String.resSubstringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n\tval index = indexOf(delimiter)\n\treturn if (index == -1) \"-1\" else substring(index + delimiter.length, length)\n}\nfun String.resSubstringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n\tval index = indexOf(delimiter)\n\treturn if (index == -1) \"-1\" else substring(0, index)\n}\nfun addQuestion(\n\tquestionGroupIndex:Int,\n\tnewType:String,\n\tnewUseCase:Boolean):(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(AddQuestion(\n\t\t\tquestionGroupIndex,\n\t\t\tgetInputValue(\"#add-id\",(store.getState().questionGroup[questionGroupIndex].questions.last().id+1).toString()).toInt(),\n\t\t\tgetInputValue(\"#add-title\"),\n\t\t\tgetInputValue(\"#add-question\"),\n\t\t\tnewType,\n\t\t\tnewUseCase\n\t\t))\n\t}\n}\n\nfun deleteQuestion(groupIndex:Int, questionIndex:Int):(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(DeleteQuestion(groupIndex, questionIndex))\n\t}\n}\n\nfun questionListToggleEdit():(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(QuestionListToggleEdit())\n\t}\n}\n\nfun RBuilder.currentGroupFC(\n\t\tquestions: QuestionGroup,\n\t\theader: String,\n\t\tindexGroup:Int\n) = child(withDisplayName(header, currentGroup(header, indexGroup))){attrs.questions = questions}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","package component\n\nimport AddAnswerVariant\nimport ChangeAnswerVariant\nimport ChangeQuestion\nimport RemoveAnswerVariant\nimport CurrentQuestionToggleEdit\nimport data.*\nimport hoc.withDisplayName\nimport kotlinx.html.InputType\nimport kotlinx.html.id\nimport kotlinx.html.js.onClickFunction\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.Event\nimport react.*\nimport react.dom.*\nimport react.functionalComponent\nimport store\nimport kotlin.browser.document\n\ninterface QuestionProps: RProps {\n\tvar question:Question\n}\n\n\nfun currentQuestion(header: String, questionIndex:Int, groupIndex:Int) =\n\tfunctionalComponent<QuestionProps> { props ->\n\t\tval types = listOf(\"shortanswer\", \"numerical\")\n\n\t\tval (typeIndex, setType) = useState(if(props.question.type == \"shortanswer\")0 else 1)\n\n\t\tval (useCase, setUseCase) = useState(props.question.useCase)\n\n\t\tval (lastIndex, setLastIndex) = useState(props.question.answers.size)\n\n\n\t\tdiv() {\n\t\t\th2 { +props.question.title }\n\t\t\tbutton {\n\t\t\t\tattrs.onClickFunction = toggleEdit()\n\n\t\t\t\t+\"Скрыть\\\\показать элементы редактирования\"\n\t\t\t}\n\t\t\tdiv() {\n\t\t\t\ttable(classes = \"fl-table\") {\n\t\t\t\t\tthead {\n\t\t\t\t\t\ttr {\n\t\t\t\t\t\t\tth{\n\t\t\t\t\t\t\t\t+\"id\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Заголовок\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Вопрос\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Тип вопроса\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Строгий режим\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t\t\t+\"Изменить\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttbody {\n\t\t\t\t\t\ttr{\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+\"${props.question.id}\"\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(InputType.number){\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"input-id\"\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = \"${props.question.id}\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+props.question.title\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(InputType.text){\n\t\t\t\t\t\t\t\t\t\tattrs.id =\"input-title\"\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = props.question.title\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+props.question.question\n\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(InputType.text){\n\t\t\t\t\t\t\t\t\t\tattrs.id =\"input-question\"\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = props.question.question\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\tif(!toggleEdit)\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+types[typeIndex]\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\t\t+types[typeIndex]\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = {\n\t\t\t\t\t\t\t\t\t\t\tsetType(if(typeIndex == 0) 1 else 0)\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(typeIndex)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+\"${props.question.useCase}\"\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\t\t+\"$useCase\"\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = {\n\t\t\t\t\t\t\t\t\t\t\tsetUseCase(!useCase)\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(useCase)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\t\tbutton{\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = changeQuestion(groupIndex, questionIndex, types[typeIndex], useCase)\n\n\t\t\t\t\t\t\t\t\t\t+\"Изменить\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\th2 {\n\t\t\t\t+\"Варианты ответа\"\n\t\t\t}\n\t\t\t\ttable(classes = \"fl-table\") {\n\t\t\t\t\tthead {\n\t\t\t\t\t\ttr {\n\t\t\t\t\t\t\tth{\n\t\t\t\t\t\t\t\t+\"Инекс\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Вариант ответа\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Комментарий\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Баллы за ответ\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t\t+\"Изменить\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t\t+\"Удалить\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttbody {\n\t\t\t\t\t\tprops.question.answers.forEachIndexed{ index, it ->\n\t\t\t\t\t\ttr{\n\t\t\t\t\t\t\tattrs.key = \"$index\"\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t+\"$index\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tattrs.key = \"$index\"\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+it.answer\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(if(props.question.type == types[0]) InputType.text else InputType.number) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = it.answer\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"change_answer_input_${groupIndex}_${questionIndex}_${index}\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+it.feedback\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(InputType.text) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = it.feedback\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"change_feedback_input_${groupIndex}_${questionIndex}_${index}\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tif(!store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\t\t+\"${it.fraction}\"\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tinput(InputType.number) {\n\t\t\t\t\t\t\t\t\t\tattrs.placeholder = \"${it.fraction}\"\n\t\t\t\t\t\t\t\t\t\tattrs.id = \"change_fraction_input_${groupIndex}_${questionIndex}_${index}\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\t\t+\"Изменить\"\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = changeAnswerVariant(groupIndex, questionIndex, index)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\t\t+\"Удалить\"\n\t\t\t\t\t\t\t\t\t\tattrs.onClickFunction = removeAnswerVariant(groupIndex, questionIndex, index)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(store.getState().currentQuestionEditable)\n\t\t\t\t\t\ttr {\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t+\"$lastIndex\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\tinput(if(props.question.type == types[0]) InputType.text else InputType.number) {\n\t\t\t\t\t\t\t\t\tattrs.placeholder = \"Вариант вопроса\"\n\t\t\t\t\t\t\t\t\tattrs.id = \"answer_input\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\tinput(InputType.text) {\n\t\t\t\t\t\t\t\t\tattrs.placeholder = \"Комментарий к ответу\"\n\t\t\t\t\t\t\t\t\tattrs.id = \"feedback_input\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\t\tinput(InputType.number) {\n\t\t\t\t\t\t\t\t\tattrs.placeholder = \"Баллы за ответ\"\n\t\t\t\t\t\t\t\t\tattrs.id = \"fraction_input\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\tbutton{\n\t\t\t\t\t\t\t\t\t+\"Добавить\"\n\t\t\t\t\t\t\t\t\tattrs.onClickFunction =  addAnswerVariant(groupIndex, questionIndex)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nfun changeAnswerVariant(groupIndex: Int, questionIndex: Int, answerIndex: Int):(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(\n\t\t\tChangeAnswerVariant(\n\t\t\t\tgroupIndex,\n\t\t\t\tquestionIndex,\n\t\t\t\tanswerIndex,\n\t\t\t\tgetInputValue(\"#change_answer_input_${groupIndex}_${questionIndex}_${answerIndex}\"),\n\t\t\t\tgetInputValue(\"#change_fraction_input_${groupIndex}_${questionIndex}_${answerIndex}\").toInt(),\n\t\t\t\tgetInputValue(\"#change_feedback_input_${groupIndex}_${questionIndex}_${answerIndex}\")\n\t\t\t)\n\t\t)\n\t}\n}\n\nfun toggleEdit():(Event) -> Unit{\n\treturn {\n\t\tstore.dispatch(CurrentQuestionToggleEdit())\n\t}\n}\n\nfun removeAnswerVariant(groupIndex: Int, questionIndex: Int, answerIndex: Int):(Event) -> Unit{\n\treturn{\n\t\tstore.dispatch(\n\t\t\tRemoveAnswerVariant(\n\t\t\t\tgroupIndex,\n\t\t\t\tquestionIndex,\n\t\t\t\tanswerIndex\n\t\t\t)\n\t\t)\n\t}\n}\n\nfun addAnswerVariant(groupIndex:Int, questionIndex:Int):(Event) -> Unit{\n\n\treturn{\n\t\tstore.dispatch(\n\t\t\tAddAnswerVariant(\n\t\t\t\tgroupIndex,\n\t\t\t\tquestionIndex,\n\t\t\t\tgetInputValue(\"#answer_input\", \"0\"),\n\t\t\t\tgetInputValue(\"#fraction_input\", \"0\").toInt(),\n\t\t\t\tgetInputValue(\"#feedback_input\")\n\t\t\t)\n\t\t)\n\t}\n}\n\nfun changeQuestion(groupIndex:Int, questionIndex:Int,newType:String, newCase:Boolean):(Event) -> Unit{\n\treturn{\n\t\tstore.dispatch(\n\t\t\tChangeQuestion(\n\t\t\t\tgetInputValue(\"#input-id\").toInt(),\n\t\t\t\tgroupIndex,\n\t\t\t\tquestionIndex,\n\t\t\t\tgetInputValue(\"#input-title\"),\n\t\t\t\tgetInputValue(\"#input-question\"),\n\t\t\t\tnewType,\n\t\t\t\tnewCase\n\t\t\t)\n\t\t)\n\t}\n}\n\nfun getInputValue(inputSelector:String, defaultValue:String = \"\"):String  {\n\tval inputElement = document.querySelector(inputSelector) as HTMLInputElement\n\treturn if(inputElement.value != \"\") inputElement.value\n\telse if (defaultValue != \"\") return defaultValue\n\telse return inputElement.placeholder\n}\n\nfun RBuilder.currentQuestionFC(\n\t\tquestion: Question,\n\t\theader: String,\n\t\tgroupIndex:Int,\n\t\tquestionIndex:Int\n) = child(withDisplayName(header, currentQuestion(header, questionIndex, groupIndex))){attrs.question = question}\n\n","package component\n\nimport hoc.withDisplayName\nimport react.*\nimport react.dom.*\nimport react.functionalComponent\nimport react.router.dom.navLink\n\ninterface WorkListProps: RProps {var questions:MutableList<IndicesWithQuestion>}\n\nfun renderByTypes(header: String) =\n\t\tfunctionalComponent<WorkListProps> { props ->\n\t\t\tdiv(\"\"){\n\t\t\t\th2 { +header }\n\t\t\t\ttable(classes = \"fl-table\") {\n\t\t\t\t\tthead {\n\t\t\t\t\t\ttr {\n\t\t\t\t\t\t\tth{\n\t\t\t\t\t\t\t\t+\"id\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Заголовок\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Вопрос\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Тип вопроса\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Строгий режим\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\t+\"Ссылка\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttbody {\n\t\t\t\t\t\tprops.questions.forEach{\n\t\t\t\t\t\t\ttr{\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+\"${it.question.id}\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.question.title\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.question.question\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+it.question.type\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\t+\"${it.question.useCase}\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttd{\n\t\t\t\t\t\t\t\t\tnavLink(\"/question_groups/group_${it.questionGroupIndex}/${it.questionIndex}\"){\n\t\t\t\t\t\t\t\t\t\t+\"Подробнее >>\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nfun RBuilder.renderByTypesFC(\n\t\tquestions: MutableList<IndicesWithQuestion>,\n\t\theader: String\n) = child(withDisplayName(header, renderByTypes(header))){\n\tattrs.questions = questions\n}\n\n","package data\n\nclass AnswerVariant(\n    var answer: String,\n    var fraction:Int,\n    var feedback:String\n)","package data\n\nclass Question(\n        var type:String,\n        var title: String,\n        var question:String,\n        var useCase:Boolean,\n        var answers:MutableList<AnswerVariant>,\n        var id:Int\n){\n    override fun toString(): String = title\n}\n","package data\n\nclass QuestionGroup(\n\t\tvar title:String,\n\t\tvar questions:MutableList<Question>\n) {\n}\n\nval types = listOf<String>(\"shortanswer\", \"numerical\")\n\nvar counterID = 0\n\nvar questionGroupList:MutableList<QuestionGroup> = mutableListOf(\n\tQuestionGroup(\n\t\ttitle = \"GROUP_1\",\n\t\tquestions = mutableListOf(\n\t\t\tQuestion(\n\t\t\t\ttype = types[1],\n\t\t\t\ttitle = \"Решите пример\",\n\t\t\t\tquestion = \"2+2*2\",\n\t\t\t\tuseCase = false,\n\t\t\t\tanswers = mutableListOf(\n\t\t\t\tAnswerVariant(\n\t\t\t\t\tanswer = \"6\",\n\t\t\t\t\tfraction = 100,\n\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t),AnswerVariant(\n\t\t\t\t\tanswer = \"8\",\n\t\t\t\t\tfraction = 50,\n\t\t\t\t\tfeedback = \"неправильный порядок выполнения операций\"\n\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tid = counterID++\n\t\t\t),\n\t\t\tQuestion(\n\t\t\t\ttype = types[0],\n\t\t\t\ttitle = \"Ответьте на вопрос по истории\",\n\t\t\t\tquestion = \"Первый правитель древнерусского государства\",\n\t\t\t\tuseCase = true,\n\t\t\t\tanswers = mutableListOf(\n\t\t\t\tAnswerVariant(\n\t\t\t\t\tanswer = \"Рюрик\",\n\t\t\t\t\tfraction = 100,\n\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t),AnswerVariant(\n\t\t\t\t\tanswer = \"рюрик\",\n\t\t\t\t\tfraction = 90,\n\t\t\t\t\tfeedback = \"Правильно, но имена пишутся с большой буквы\"\n\t\t\t\t),AnswerVariant(\n\t\t\t\t\tanswer = \"Олег\",\n\t\t\t\t\tfraction = 50,\n\t\t\t\t\tfeedback = \"Он был вторым\"\n\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tid = counterID++\n\t\t\t),\n\t\t\tQuestion(\n\t\t\t\ttype = types[0],\n\t\t\t\ttitle = \"Укажите перевод на русский\",\n\t\t\t\tquestion = \"\\\"instance\\\"\",\n\t\t\t\tuseCase = false,\n\t\t\t\tanswers = mutableListOf(\n\t\t\t\t\tAnswerVariant(\n\t\t\t\t\t\tanswer = \"Экземпляр\",\n\t\t\t\t\t\tfraction = 100,\n\t\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tid = counterID++\n\t\t\t),\n\t\t\tQuestion(\n\t\t\t\ttype = types[1],\n\t\t\t\ttitle = \"решите уравнение\",\n\t\t\t\tquestion = \"9*x^2-6*x+1==0\",\n\t\t\t\tuseCase = true,\n\t\t\t\tanswers = mutableListOf(\n\t\t\t\tAnswerVariant(\n\t\t\t\t\tanswer = \"1/3\",\n\t\t\t\t\tfraction = 100,\n\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t),AnswerVariant(\n\t\t\t\t\tanswer = \"6/8\",\n\t\t\t\t\tfraction = 90,\n\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t),AnswerVariant(\n\t\t\t\t\tanswer = \"0.33\",\n\t\t\t\t\tfraction = 50,\n\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tid = counterID++\n\t\t\t),\n\t\t\tQuestion(\n\t\t\t\ttype = types[0],\n\t\t\t\ttitle = \"Ответьте на вопрос\",\n\t\t\t\tquestion = \"Что такое гипотенуза \",\n\t\t\t\tuseCase = false,\n\t\t\t\tanswers = mutableListOf(\n\t\t\t\t\tAnswerVariant(\n\t\t\t\t\t\tanswer = \"Самая длинная сторона прямоугольного треугольника\",\n\t\t\t\t\t\tfraction = 100,\n\t\t\t\t\t\tfeedback = \"правильно\"\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tid = counterID++\n\t\t\t)\n\t\t)\n\t)\n)\n","package data\n\nclass State (\n    var questionGroup:MutableList<QuestionGroup>,//список групп вопросов\n    var currentQuestionEditable:Boolean,//показаны или скрыты элементы редактирования в списке отдельного вопроса\n    var questionListEditable:Boolean,//показаны или скрыты элементы редактирования в списке вопросов\n    var questionGroupEditable:Boolean//показаны или скрыты элементы редактирования в списке групп вопросов\n)","package hoc\n\nimport react.*\nimport kotlin.reflect.KClass\nimport kotlinext.js.*\n\nfun <P : RProps, S : RState, R : RComponent<P, S>> withDisplayName(\n    name: String, kClass: KClass<R>\n): KClass<R> =\n    kClass.apply {\n        rClass.displayName = name\n    }\n\nfun <P : RProps> withDisplayName(\n    name: String, fComp: FunctionalComponent<P>\n): FunctionalComponent<P> =\n    Object.assign(fComp, js {\n        displayName = name\n    })\n\n","import component.root\nimport data.*\nimport react.dom.render\nimport react.router.dom.hashRouter\nimport redux.*\nimport wrapper.reduxLogger\nimport kotlin.browser.document\n\nval store = createStore(\n        ::changeReducer,\n        State(questionGroupList, currentQuestionEditable = false, questionListEditable = false, questionGroupEditable = false),\n        compose(\n                rEnhancer(),\n                applyMiddleware(\n                        reduxLogger.logger as Middleware<State, Action, Action, Action, Action>\n                )\n        )\n)\n\nval rootDiv = document.getElementById(\"root\")\n\nfun render() = render(rootDiv) {\n    hashRouter {\n        root(store)\n    }\n}\n\nfun main() {\n    console.log(questionGroupList)\n    render()\n    store.subscribe {\n        render()\n    }\n}","import data.Question\nimport data.QuestionGroup\nimport redux.RAction\n\n//class zxc() : RAction\n\nclass ChangeQuestion(\n    val newID:Int,\n    val groupIndex:Int,\n    val questionIndex:Int,\n    val newTitle:String,\n    val newQuestion:String,\n    val newType:String,\n    val newCase:Boolean ) : RAction // изменение вопроса и всех его свойств\n\nclass AddAnswerVariant(\n    val groupIndex:Int,\n    val questionIndex:Int,\n    val newAnswer:String,\n    val newFraction:Int,\n    val newFeedback:String ) : RAction// добавление варианта ответа\n\nclass RemoveAnswerVariant(\n    val groupIndex:Int,\n    val questionIndex:Int,\n    val answerIndex:Int ) : RAction// удаление варианта ответа\n\nclass ChangeAnswerVariant(\n        val groupIndex:Int,\n        val questionIndex:Int,\n        val answerIndex:Int,\n        val newAnswer:String,\n        val newFraction:Int,\n        val newFeedback:String) : RAction// изменение варианта ответа\n\nclass DeleteQuestion(\n        val groupIndex:Int,\n        val questionIndex:Int ) : RAction// удаление вопроса\n\nclass AddQuestion(\n        val questionIndex:Int,\n        val newID:Int,\n        val newTitle:String,\n        val newQuestion:String,\n        val newType:String,\n        val newUseCase:Boolean) : RAction// добавление вопроса\n\nclass CurrentQuestionToggleEdit() : RAction //переключение режима редактирования на странице с конкретным вопросом\n\nclass QuestionListToggleEdit() : RAction//переключение режима редактирования на странице со списком вопросов\n\n\n//actions, использованные в лишнем компоненте, они больше не нужны\n//class QuestionGroupToggleEdit() : RAction//переключение режима редактирования на странице со списком групп вопросов\n\n//class AddQuestionGroup(val newTitle:String) : RAction// добавление группы вопросов\n\n//class RemoveQuestionGroup(val questionGroupId:Int) : RAction//удаление группы вопросов\n\n//class EditQuestionGroup(val questionGroupId:Int, val newTitle:String) : RAction//изменение группы вопросов\n\n//class ImportQuestionGroup(val questions:MutableList<QuestionGroup>) : RAction// добавление группы вопросов\n\n\nclass ImportQuestions(val groupIndex:Int,val questions:MutableList<Question>) : RAction// добавление вопросов в группу вопросов\n\n//class QuestionListSetEdit(val newEditable:Boolean) : RAction","package redux\n\nimport AddAnswerVariant\nimport AddQuestion\n//import AddQuestionGroup\nimport ChangeAnswerVariant\nimport ChangeQuestion\nimport RemoveAnswerVariant\nimport CurrentQuestionToggleEdit\nimport DeleteQuestion\n//import QuestionGroupToggleEdit\nimport QuestionListToggleEdit\n//import RemoveQuestionGroup\n//import EditQuestionGroup\nimport ImportQuestions\nimport data.*\n\nfun changeReducer(state: State, action: RAction) =\n\t\twhen (action) {\n\t\t\tis ChangeQuestion -> State(\n\t\t\t\t\tgetWithNewQuestion(questionGroupList,\n\t\t\t\t\t\t\taction.newID,\n\t\t\t\t\t\t\taction.groupIndex,\n\t\t\t\t\t\t\taction.questionIndex,\n\t\t\t\t\t\t\taction.newTitle,\n\t\t\t\t\t\t\taction.newQuestion,\n\t\t\t\t\t\t\taction.newType,\n\t\t\t\t\t\t\taction.newCase),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis AddAnswerVariant -> State(\n\t\t\t\t\tgetWithNewAnswerVariant(\n\t\t\t\t\t\t\tstate.questionGroup,\n\t\t\t\t\t\t\taction.groupIndex,\n\t\t\t\t\t\t\taction.questionIndex,\n\t\t\t\t\t\t\taction.newAnswer,\n\t\t\t\t\t\t\taction.newFraction,\n\t\t\t\t\t\t\taction.newFeedback\n\t\t\t\t\t),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis RemoveAnswerVariant -> State(\n\t\t\t\t\tgetWithRemovedAnswerVariant(\n\t\t\t\t\t\t\tstate.questionGroup,\n\t\t\t\t\t\t\taction.groupIndex,\n\t\t\t\t\t\t\taction.questionIndex,\n\t\t\t\t\t\t\taction.answerIndex\n\t\t\t\t\t),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis CurrentQuestionToggleEdit -> State(\n\t\t\t\t\tstate.questionGroup,\n\t\t\t\t\t!state.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\n\t\t\tis ChangeAnswerVariant -> State(\n\t\t\t\t\tgetWithChangedAnswerVariant(\n\t\t\t\t\t\t\tstate.questionGroup,\n\t\t\t\t\t\t\taction.groupIndex,\n\t\t\t\t\t\t\taction.questionIndex,\n\t\t\t\t\t\t\taction.answerIndex,\n\t\t\t\t\t\t\taction.newAnswer,\n\t\t\t\t\t\t\taction.newFraction,\n\t\t\t\t\t\t\taction.newFeedback\n\t\t\t\t\t),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis QuestionListToggleEdit -> State(\n\t\t\t\t\tstate.questionGroup,\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\t!state.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis DeleteQuestion -> State(\n\t\t\t\t\tgetWithDeletedQuestion(state.questionGroup, action.groupIndex, action.questionIndex),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\tis AddQuestion -> State(\n\t\t\t\t\tgetWithNewQuestion(state.questionGroup,\n\t\t\t\t\t\t\taction.questionIndex,\n\t\t\t\t\t\t\taction.newID,\n\t\t\t\t\t\t\taction.newTitle,\n\t\t\t\t\t\t\taction.newQuestion,\n\t\t\t\t\t\t\taction.newType,\n\t\t\t\t\t\t\taction.newUseCase),\n\t\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\t\tstate.questionListEditable,\n\t\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n//\t\t\tis QuestionGroupToggleEdit -> State(\n//\t\t\t\t\tstate.questionGroup,\n//\t\t\t\t\tstate.currentQuestionEditable,\n//\t\t\t\t\tstate.questionListEditable,\n//\t\t\t\t\t!state.questionGroupEditable\n//\t\t\t)\n//\t\t\tis AddQuestionGroup -> State(\n//\t\t\t\t\tgetWithNewQuestionGroup(state.questionGroup,action.newTitle),\n//\t\t\t\t\tstate.currentQuestionEditable,\n//\t\t\t\t\tstate.questionListEditable,\n//\t\t\t\t\tstate.questionGroupEditable\n//\t\t\t)\n//\t\t\tis RemoveQuestionGroup -> State(\n//\t\t\t\t\tgetWithRemovedQuestionGroup(state.questionGroup,action.questionGroupId),\n//\t\t\t\t\tstate.currentQuestionEditable,\n//\t\t\t\t\tstate.questionListEditable,\n//\t\t\t\t\tstate.questionGroupEditable\n//\t\t\t)\n//\t\t\tis EditQuestionGroup -> State(\n//\t\t\t\t\tgetWithEditedQuestionList(state.questionGroup, action.questionGroupId, action.newTitle),\n//\t\t\t\t\tstate.currentQuestionEditable,\n//\t\t\t\t\tstate.questionListEditable,\n//\t\t\t\t\tstate.questionGroupEditable\n//\t\t\t)\n//\t\t\tis ImportQuestionGroup -> State(\n//\t\t\t\t\tgetWithImportedQuestionGroup(state.questionGroup, action.questions),\n//\t\t\t\t\tstate.currentQuestionEditable,\n//\t\t\t\t\tstate.questionListEditable,\n//\t\t\t\t\tstate.questionGroupEditable\n//\t\t\t)\n\t\t\tis ImportQuestions -> State(\n\t\t\t\tgetWithImportedQuestions(state.questionGroup, action.groupIndex,action.questions),\n\t\t\t\tstate.currentQuestionEditable,\n\t\t\t\tstate.questionListEditable,\n\t\t\t\tstate.questionGroupEditable\n\t\t\t)\n\t\t\telse -> state\n\t\t}\nfun getWithImportedQuestions(questionGroupList:MutableList<QuestionGroup>,\n\t\t\t\t\t\t\t groupIndex:Int,\n\t\t\t\t\t\t\t questions:MutableList<Question>):MutableList<QuestionGroup>{//Добавляет импортированные вопросы\n\treturn questionGroupList.apply {\n\t\tquestions.forEach {\n\t\t\tthis[groupIndex].questions.add(it.apply { this.id =  questionGroupList[0].questions.last().id+1})\n\t\t}\n\t}\n}\n//fun getWithImportedQuestionGroup(questionGroupList:MutableList<QuestionGroup>,\n//                                 questions:MutableList<QuestionGroup>):MutableList<QuestionGroup>{//Добавляет импортированные группы вопросов\n//\treturn questionGroupList.apply {\n//\t\tquestions.forEachIndexed { index, questionGroup ->\n//\t\t\tthis.add(QuestionGroup(questionGroup.title,questionGroup.questions))\n//\n//\t\t}\n//\t}\n//}\n//fun getWithEditedQuestionList(questionGroupList:MutableList<QuestionGroup>,\n//                              questionGroupId:Int, newTitle: String):MutableList<QuestionGroup>{//возвращает список групп вопросов с измененным списком вопросов\n//\treturn questionGroupList.apply {\n//\t\tthis[questionGroupId].title = newTitle\n//\t}\n//}\n//\n//fun getWithRemovedQuestionGroup(questionGroupList:MutableList<QuestionGroup>,\n//                                questionGroupId:Int):MutableList<QuestionGroup>{//возвращает список групп вопросов с удаленной группой вопросов\n//\treturn questionGroupList.apply {\n//\t\tthis.removeAt(questionGroupId)\n//\t}\n//}\n//\n//fun getWithNewQuestionGroup(questionGroupList:MutableList<QuestionGroup>,\n//                            newTitle:String):MutableList<QuestionGroup>{//возвращает список групп вопросов с добавленной группой вопросов\n//\treturn questionGroupList.apply {\n//\t\tthis.add(QuestionGroup(\n//\t\t\t\tnewTitle,\n//\t\t\t\tmutableListOf(\n//\t\t\t\t\t\tQuestion(\n//\t\t\t\t\t\t\t\ttypes[0],\n//\t\t\t\t\t\t\t\t\"Введите заголовок ответа\",\n//\t\t\t\t\t\t\t\t\"Введите вопрос\",\n//\t\t\t\t\t\t\t\tfalse,\n//\t\t\t\t\t\t\t\tmutableListOf(\n//\t\t\t\t\t\t\t\t\t\tAnswerVariant(\n//\t\t\t\t\t\t\t\t\t\t\t\t\"Введите вариант ответа\",\n//\t\t\t\t\t\t\t\t\t\t\t\t0,\n//\t\t\t\t\t\t\t\t\t\t\t\t\"Введите комментарий к ответу\"\n//\t\t\t\t\t\t\t\t\t\t)\n//\t\t\t\t\t\t\t\t),\n//\t\t\t\t\t\t\t\tif(this.lastIndex > 0 /*&& this[this.lastIndex].questions.lastIndex > 0*/) this[this.lastIndex].questions[this[this.lastIndex].questions.lastIndex].id else 1\n//\t\t\t\t\t\t)\n//\t\t\t\t)\n//\t\t))\n//\t}\n//}\n\nfun getWithNewQuestion(questionGroupList:MutableList<QuestionGroup>,\n                       questionIndex:Int,\n                       newID:Int,\n                       newTitle:String,\n                       newQuestion:String,\n                       newType:String,\n                       newUseCase:Boolean):MutableList<QuestionGroup>{//возвращает список групп вопросов с\n\treturn questionGroupList.apply {\n\t\tthis[questionIndex].questions.add(\n\t\t\t\tQuestion(\n\t\t\t\t\t\tnewType,\n\t\t\t\t\t\tnewTitle,\n\t\t\t\t\t\tnewQuestion,\n\t\t\t\t\t\tnewUseCase,\n\t\t\t\t\t\tmutableListOf(AnswerVariant(\n\t\t\t\t\t\t\t\t\"Введите вариант ответа\",\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\"Введите комментарий к ответу\"\n\t\t\t\t\t\t)),\n\t\t\t\t\t\tnewID\n\t\t\t\t)\n\t\t)\n\t}\n}\n\nfun getWithDeletedQuestion(questionGroupList:MutableList<QuestionGroup>,\n                           groupIndex:Int,\n                           questionIndex:Int):MutableList<QuestionGroup>{//возвращает список групп вопросов с удаленным вопросом\n\treturn if(questionGroupList[groupIndex].questions.size > 1)\n\t\tquestionGroupList.apply {\n\n\t\t\tthis[groupIndex].questions.removeAt(questionIndex)\n\t\t}\n\telse questionGroupList\n}\n\nfun getWithChangedAnswerVariant(questionGroupList:MutableList<QuestionGroup>,\n                                groupIndex:Int,\n                                questionIndex:Int,\n                                answerIndex:Int,\n                                newAnswer:String,\n                                newFraction:Int,\n                                newFeedback:String):MutableList<QuestionGroup>{//возвращает список групп вопросов с измененным вариантом ответа\n\treturn questionGroupList.apply {\n\t\tthis[groupIndex].questions[questionIndex].answers[answerIndex].apply {\n\t\t\tthis.answer = newAnswer\n\t\t\tthis.fraction = newFraction\n\t\t\tthis.feedback = newFeedback\n\t\t}\n\t}\n}\n\nfun getWithRemovedAnswerVariant(questionGroupList:MutableList<QuestionGroup>,\n                                groupIndex:Int,\n                                questionIndex:Int,\n                                answerIndex:Int):MutableList<QuestionGroup>{//возвращает список групп вопросов судаленным вариантом ответа\n\treturn questionGroupList.apply {\n\t\tthis[groupIndex].questions[questionIndex].answers.removeAt(answerIndex)\n\t}\n}\n\nfun getWithNewAnswerVariant(questionGroupList:MutableList<QuestionGroup>,\n                            groupIndex:Int,\n                            questionIndex:Int,\n                            newAnswer:String,\n                            newFraction:Int,\n                            newFeedback:String):MutableList<QuestionGroup>{//возвращает список групп вопросов с новым вариантом ответа\n\treturn questionGroupList.apply {\n\t\tthis[groupIndex].questions[questionIndex].answers.add(\n\t\t\t\tAnswerVariant(\n\t\t\t\t\t\tnewAnswer,\n\t\t\t\t\t\tnewFraction,\n\t\t\t\t\t\tnewFeedback\n\t\t\t\t)\n\t\t)\n\t}\n}\n\nfun getWithNewQuestion(questionGroupList:MutableList<QuestionGroup>,\n                       newID:Int,\n                       groupIndex:Int,\n                       questionIndex:Int,\n                       newTitle:String,\n                       newQuestion:String,\n                       newType:String,\n                       newCase:Boolean):MutableList<QuestionGroup>{//возвращает список групп вопросов с новым вопросом\n\treturn questionGroupList.apply {\n\t\tthis[groupIndex].questions[questionIndex].apply {\n\t\t\tthis.id = newID\n\t\t\tthis.title = newTitle\n\t\t\tthis.question = newQuestion\n\t\t\tthis.type = newType\n\t\t\tthis.useCase = newCase\n\t\t}\n\t}\n}","/** @license React v16.13.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.13.0\";\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: String): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: String): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,"package react.dom\n\nimport kotlinext.js.*\nimport kotlinx.html.*\nimport org.w3c.dom.events.*\nimport react.*\n\nclass InnerHTML(\n    val __html: String\n)\n\nexternal interface WithClassName : RProps {\n    var className: String?\n}\n\nexternal interface DOMProps : WithClassName {\n    var dangerouslySetInnerHTML: InnerHTML?\n}\n\nopen class RDOMBuilder<out T : Tag>(factory: (TagConsumer<Unit>) -> T) : RBuilder() {\n    fun setProp(attribute: String, value: Any?) {\n        val key = fixAttributeName(attribute)\n        props.asDynamic()[key] = value\n    }\n\n    val consumer = object : TagConsumer<Unit> {\n        override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n            setProp(attribute, value)\n        }\n\n        override fun onTagComment(content: CharSequence) {\n            throw IllegalStateException(\"Comments are not supported\")\n        }\n\n        override fun onTagContent(content: CharSequence): Unit {\n            childList.add(content)\n        }\n\n        override fun onTagContentEntity(entity: Entities): Unit {\n            childList.add(entity.text)\n        }\n\n        override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n            val sb = StringBuilder()\n            object : Unsafe {\n                override fun String.unaryPlus() {\n                    sb.append(this)\n                }\n            }.block()\n            props.dangerouslySetInnerHTML = InnerHTML(sb.toString())\n        }\n\n        override fun onTagStart(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEnd(tag: Tag) {\n            throw IllegalStateException(\"Don't nest tags inside props block\")\n        }\n\n        override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n            setProp(event, value)\n        }\n\n        override fun finalize() {}\n    }\n\n    val attrs: T = factory(consumer)\n\n    operator fun Tag.get(name: String) = props.asDynamic()[name]\n    operator fun Tag.set(name: String, value: Any) {\n        props.asDynamic()[name] = value\n    }\n\n    // See https://facebook.github.io/react/docs/forms.html\n    var INPUT.defaultChecked: Boolean\n        get() = this[\"defaultChecked\"] ?: false\n        set(value) {\n            this[\"defaultChecked\"] = value\n        }\n\n    var SELECT.values: Set<String>\n        get() {\n            val valuesArr: Array<String> = this[\"value\"] ?: arrayOf()\n            return valuesArr.toSet()\n        }\n        set(value) {\n            this[\"value\"] = value.toTypedArray()\n        }\n\n    var SELECT.value: String\n        get() = \"\"\n        set(value) {\n            values = setOf(value)\n        }\n\n    protected val props: DOMProps = jsObject {}\n\n    init {\n        attrs.attributesEntries.forEach { setProp(it.key, it.value) }\n    }\n\n    inline fun attrs(handler: T.() -> Unit) {\n        attrs.handler()\n    }\n\n    var key: String\n        get() = props.key\n        set(value) {\n            props.key = value\n        }\n\n    var ref: RRef\n        get() = props.ref\n        set(value) {\n            props.ref = value\n        }\n\n    fun ref(handler: (dynamic) -> Unit) {\n        props.ref(handler)\n    }\n\n    open fun create(): ReactElement = createElement(attrs.tagName, props, *childList.toTypedArray())\n}\n\n\n","package react.dom\n\nimport org.w3c.dom.*\nimport react.*\n\nfun render(container: Element?, callback: () -> Unit = {}, handler: RBuilder.() -> Unit) =\n    render(buildElements(handler), container, callback)\n\nfun hydrate(container: Element?, callback: () -> Unit = {}, handler: RBuilder.() -> Unit) =\n    hydrate(buildElements(handler), container, callback)\n\nfun createPortal(container: Element?, handler: RBuilder.() -> Unit) =\n    createPortal(buildElements(handler), container)\n","package react.dom\n\nimport kotlinext.js.*\nimport kotlinx.html.*\nimport kotlin.reflect.*\n\nprivate val events = listOf(\n    \"onCopy\",\n    \"onCut\",\n    \"onPaste\",\n    \"onCompositionEnd\",\n    \"onCompositionStart\",\n    \"onCompositionUpdate\",\n    \"onKeyDown\",\n    \"onKeyPress\",\n    \"onKeyUp\",\n    \"onFocus\",\n    \"onBlur\",\n    \"onChange\",\n    \"onInput\",\n    \"onSubmit\",\n    \"onClick\",\n    \"onContextMenu\",\n    \"onDoubleClick\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onDragEnter\",\n    \"onDragExit\",\n    \"onDragLeave\",\n    \"onDragOver\",\n    \"onDragStart\",\n    \"onDrop\",\n    \"onMouseDown\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseMove\",\n    \"onMouseOut\",\n    \"onMouseOver\",\n    \"onMouseUp\",\n    \"onSelect\",\n    \"onTouchCancel\",\n    \"onTouchEnd\",\n    \"onTouchMove\",\n    \"onTouchStart\",\n    \"onScroll\",\n    \"onWheel\",\n    \"onAbort\",\n    \"onCanPlay\",\n    \"onCanPlayThrough\",\n    \"onDurationChange\",\n    \"onEmptied\",\n    \"onEncrypted\",\n    \"onEnded\",\n    \"onError\",\n    \"onLoadedData\",\n    \"onLoadedMetadata\",\n    \"onLoadStart\",\n    \"onPause\",\n    \"onPlay\",\n    \"onPlaying\",\n    \"onProgress\",\n    \"onRateChange\",\n    \"onSeeked\",\n    \"onSeeking\",\n    \"onStalled\",\n    \"onSuspend\",\n    \"onTimeUpdate\",\n    \"onVolumeChange\",\n    \"onWaiting\",\n    \"onLoad\",\n    \"onError\",\n    \"onAnimationStart\",\n    \"onAnimationEnd\",\n    \"onAnimationIteration\",\n    \"onTransitionEnd\",\n\n\n    // HTML attributes\n    \"accept\",\n    \"acceptCharset\",\n    \"accessKey\",\n    \"action\",\n    \"allowFullScreen\",\n    \"allowTransparency\",\n    \"alt\",\n    \"async\",\n    \"autoComplete\",\n    \"autoFocus\",\n    \"autoPlay\",\n    \"capture\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"challenge\",\n    \"charSet\",\n    \"checked\",\n    \"cite\",\n    \"classID\",\n    \"className\",\n    \"colSpan\",\n    \"cols\",\n    \"content\",\n    \"contentEditable\",\n    \"contextMenu\",\n    \"controls\",\n    \"coords\",\n    \"crossOrigin\",\n    \"data\",\n    \"dateTime\",\n    \"default\",\n    \"defer\",\n    \"dir\",\n    \"disabled\",\n    \"download\",\n    \"draggable\",\n    \"encType\",\n    \"form\",\n    \"formAction\",\n    \"formEncType\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"frameBorder\",\n    \"headers\",\n    \"height\",\n    \"hidden\",\n    \"high\",\n    \"href\",\n    \"hrefLang\",\n    \"htmlFor\",\n    \"httpEquiv\",\n    \"icon\",\n    \"id\",\n    \"inputMode\",\n    \"integrity\",\n    \"is\",\n    \"keyParams\",\n    \"keyType\",\n    \"kind\",\n    \"label\",\n    \"lang\",\n    \"list\",\n    \"loop\",\n    \"low\",\n    \"manifest\",\n    \"marginHeight\",\n    \"marginWidth\",\n    \"max\",\n    \"maxLength\",\n    \"media\",\n    \"mediaGroup\",\n    \"method\",\n    \"min\",\n    \"minLength\",\n    \"multiple\",\n    \"muted\",\n    \"name\",\n    \"noValidate\",\n    \"nonce\",\n    \"open\",\n    \"optimum\",\n    \"pattern\",\n    \"placeholder\",\n    \"poster\",\n    \"preload\",\n    \"profile\",\n    \"radioGroup\",\n    \"readOnly\",\n    \"rel\",\n    \"required\",\n    \"reversed\",\n    \"role\",\n    \"rowSpan\",\n    \"rows\",\n    \"sandbox\",\n    \"scope\",\n    \"scoped\",\n    \"scrolling\",\n    \"seamless\",\n    \"selected\",\n    \"shape\",\n    \"size\",\n    \"sizes\",\n    \"span\",\n    \"spellCheck\",\n    \"src\",\n    \"srcDoc\",\n    \"srcLang\",\n    \"srcSet\",\n    \"start\",\n    \"step\",\n    \"style\",\n    \"summary\",\n    \"tabIndex\",\n    \"target\",\n    \"title\",\n    \"type\",\n    \"useMap\",\n    \"value\",\n    \"width\",\n    \"wmode\",\n    \"wrap\")\n\nprivate val attrsMap = events.map { it.toLowerCase() to it }.toMap().toMutableMap().apply {\n    put(\"class\", \"className\")\n    put(\"ondblclick\", \"onDoubleClick\")\n}\n\nfun fixAttributeName(event: String): String = attrsMap[event] ?: event\n\nobject StringAttr {\n    operator fun getValue(thisRef: Tag, property: KProperty<*>): String =\n        thisRef.attributes[property.name] ?: \"\"\n\n    operator fun setValue(thisRef: Tag, property: KProperty<*>, value: String) {\n        thisRef.attributes[property.name] = value\n    }\n}\n\nvar Tag.key by StringAttr\n\n// See https://facebook.github.io/react/docs/forms.html\nvar INPUT.defaultValue by StringAttr\n\nvar TEXTAREA.defaultValue by StringAttr\n\nvar TEXTAREA.value by StringAttr\n\nvar Tag.jsStyle: dynamic\n    get() {\n        val value = attributes[\"style\"] ?: js {}\n        jsStyle = value\n        return value\n    }\n    set(value) {\n        attributes[\"style\"] = value\n    }\n\ninline fun Tag.jsStyle(handler: dynamic.() -> Unit) =\n    handler(jsStyle)\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/** @license React v16.13.0\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),n=require(\"object-assign\"),r=require(\"scheduler\");function u(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}if(!aa)throw Error(u(227));\nfunction ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;\nfunction oa(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;pa.hasOwnProperty(\"ReactCurrentDispatcher\")||(pa.ReactCurrentDispatcher={current:null});pa.hasOwnProperty(\"ReactCurrentBatchConfig\")||(pa.ReactCurrentBatchConfig={suspense:null});\nvar qa=/^(.*)[\\\\\\/]/,v=\"function\"===typeof Symbol&&Symbol.for,ra=v?Symbol.for(\"react.element\"):60103,sa=v?Symbol.for(\"react.portal\"):60106,ta=v?Symbol.for(\"react.fragment\"):60107,ua=v?Symbol.for(\"react.strict_mode\"):60108,va=v?Symbol.for(\"react.profiler\"):60114,wa=v?Symbol.for(\"react.provider\"):60109,xa=v?Symbol.for(\"react.context\"):60110,ya=v?Symbol.for(\"react.concurrent_mode\"):60111,za=v?Symbol.for(\"react.forward_ref\"):60112,Aa=v?Symbol.for(\"react.suspense\"):60113,Ba=v?Symbol.for(\"react.suspense_list\"):\n60120,Ca=v?Symbol.for(\"react.memo\"):60115,Da=v?Symbol.for(\"react.lazy\"):60116,Ea=v?Symbol.for(\"react.block\"):60121,Fa=\"function\"===typeof Symbol&&Symbol.iterator;function Ga(a){if(null===a||\"object\"!==typeof a)return null;a=Fa&&a[Fa]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}function Ha(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}\nfunction Ia(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ta:return\"Fragment\";case sa:return\"Portal\";case va:return\"Profiler\";case ua:return\"StrictMode\";case Aa:return\"Suspense\";case Ba:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case xa:return\"Context.Consumer\";case wa:return\"Context.Provider\";case za:var b=a.render;b=b.displayName||b.name||\"\";return a.displayName||(\"\"!==b?\"ForwardRef(\"+b+\")\":\n\"ForwardRef\");case Ca:return Ia(a.type);case Ea:return Ia(a.render);case Da:if(a=1===a._status?a._result:null)return Ia(a)}return null}function Ja(a){var b=\"\";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c=\"\";break a;default:var d=a._debugOwner,e=a._debugSource,f=Ia(a.type);c=null;d&&(c=Ia(d.type));d=f;f=\"\";e?f=\" (at \"+e.fileName.replace(qa,\"\")+\":\"+e.lineNumber+\")\":c&&(f=\" (created by \"+c+\")\");c=\"\\n    in \"+(d||\"Unknown\")+f}b+=c;a=a.return}while(a);return b}var Ka=null,La={};\nfunction Ma(){if(Ka)for(var a in La){var b=La[a],c=Ka.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!Na[c]){if(!b.extractEvents)throw Error(u(97,a));Na[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(Oa.hasOwnProperty(h))throw Error(u(99,h));Oa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&Pa(k[e],g,h);e=!0}else f.registrationName?(Pa(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}\nfunction Pa(a,b,c){if(Qa[a])throw Error(u(100,a));Qa[a]=b;Ra[a]=b.eventTypes[c].dependencies}var Na=[],Oa={},Qa={},Ra={};function Sa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!La.hasOwnProperty(c)||La[c]!==d){if(La[c])throw Error(u(102,c));La[c]=d;b=!0}}b&&Ma()}var Ta=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),Ua=null,Va=null,Wa=null;\nfunction Xa(a){if(a=ma(a)){if(\"function\"!==typeof Ua)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),Ua(a.stateNode,a.type,b))}}function Ya(a){Va?Wa?Wa.push(a):Wa=[a]:Va=a}function Za(){if(Va){var a=Va,b=Wa;Wa=Va=null;Xa(a);if(b)for(a=0;a<b.length;a++)Xa(b[a])}}function $a(a,b){return a(b)}function ab(a,b,c,d,e){return a(b,c,d,e)}function bb(){}var cb=$a,db=!1,eb=!1;function fb(){if(null!==Va||null!==Wa)bb(),Za()}\nfunction gb(a,b,c){if(eb)return a(b,c);eb=!0;try{return cb(a,b,c)}finally{eb=!1,fb()}}var hb=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ib=Object.prototype.hasOwnProperty,jb={},kb={};\nfunction lb(a){if(ib.call(kb,a))return!0;if(ib.call(jb,a))return!1;if(hb.test(a))return kb[a]=!0;jb[a]=!0;return!1}function mb(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction nb(a,b,c,d){if(null===b||\"undefined\"===typeof b||mb(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function C(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var E={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){E[a]=new C(a,0,!1,a,null,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];E[b]=new C(b,1,!1,a[1],null,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){E[a]=new C(a,2,!1,a.toLowerCase(),null,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){E[a]=new C(a,2,!1,a,null,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){E[a]=new C(a,3,!1,a.toLowerCase(),null,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){E[a]=new C(a,3,!0,a,null,!1)});[\"capture\",\"download\"].forEach(function(a){E[a]=new C(a,4,!1,a,null,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){E[a]=new C(a,6,!1,a,null,!1)});[\"rowSpan\",\"start\"].forEach(function(a){E[a]=new C(a,5,!1,a.toLowerCase(),null,!1)});var ob=/[\\-:]([a-z])/g;function pb(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ob,\npb);E[b]=new C(b,1,!1,a,null,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ob,pb);E[b]=new C(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ob,pb);E[b]=new C(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){E[a]=new C(a,1,!1,a.toLowerCase(),null,!1)});\nE.xlinkHref=new C(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){E[a]=new C(a,1,!1,a.toLowerCase(),null,!0)});\nfunction qb(a,b,c,d){var e=E.hasOwnProperty(b)?E[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1]?!1:!0;f||(nb(b,c,e,d)&&(c=null),d||null===e?lb(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nfunction rb(a){switch(typeof a){case \"boolean\":case \"number\":case \"object\":case \"string\":case \"undefined\":return a;default:return\"\"}}function sb(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction tb(a){var b=sb(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=sb(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}\nfunction Ab(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&qb(a,\"checked\",b,!1)}\nfunction Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?Db(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction Eb(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction Db(a,b,c){if(\"number\"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}function Fb(a){var b=\"\";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}\nfunction Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:rb(c)}}\nfunction Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}var Mb={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};\nfunction Nb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function Ob(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?Nb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar Pb,Qb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||\"innerHTML\"in a)a.innerHTML=b;else{Pb=Pb||document.createElement(\"div\");Pb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var Tb={animationend:Sb(\"Animation\",\"AnimationEnd\"),animationiteration:Sb(\"Animation\",\"AnimationIteration\"),animationstart:Sb(\"Animation\",\"AnimationStart\"),transitionend:Sb(\"Transition\",\"TransitionEnd\")},Ub={},Vb={};\nTa&&(Vb=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),\"TransitionEvent\"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}\nvar Xb=Wb(\"animationend\"),Yb=Wb(\"animationiteration\"),Zb=Wb(\"animationstart\"),$b=Wb(\"transitionend\"),ac=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),bc=new (\"function\"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}\nfunction dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}\nfunction gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;\nfunction lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}\nfunction nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!Ta)return!1;a=\"on\"+a;var b=a in document;b||(b=document.createElement(\"div\"),b.setAttribute(a,\"return;\"),b=\"function\"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}\nfunction rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}\nfunction sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<Na.length;k++){var l=Na[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=\nic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case \"scroll\":vc(b,\"scroll\",!0);break;case \"focus\":case \"blur\":vc(b,\"focus\",!0);vc(b,\"blur\",!0);c.set(\"blur\",null);c.set(\"focus\",null);break;case \"cancel\":case \"close\":oc(a)&&vc(b,a,!0);break;case \"invalid\":case \"submit\":case \"reset\":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}\nvar wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit\".split(\" \"),Ic=\"focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture\".split(\" \");\nfunction Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}\nfunction Lc(a,b){switch(a){case \"focus\":case \"blur\":Bc=null;break;case \"dragenter\":case \"dragleave\":Cc=null;break;case \"mouseover\":case \"mouseout\":Dc=null;break;case \"pointerover\":case \"pointerout\":Ec.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}\nfunction Oc(a,b,c,d,e){switch(b){case \"focus\":return Bc=Mc(Bc,a,b,c,d,e),!0;case \"dragenter\":return Cc=Mc(Cc,a,b,c,d,e),!0;case \"mouseover\":return Dc=Mc(Dc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}\nfunction Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}\nfunction Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}\nvar Wc={},Yc=new Map,Zc=new Map,$c=[\"abort\",\"abort\",Xb,\"animationEnd\",Yb,\"animationIteration\",Zb,\"animationStart\",\"canplay\",\"canPlay\",\"canplaythrough\",\"canPlayThrough\",\"durationchange\",\"durationChange\",\"emptied\",\"emptied\",\"encrypted\",\"encrypted\",\"ended\",\"ended\",\"error\",\"error\",\"gotpointercapture\",\"gotPointerCapture\",\"load\",\"load\",\"loadeddata\",\"loadedData\",\"loadedmetadata\",\"loadedMetadata\",\"loadstart\",\"loadStart\",\"lostpointercapture\",\"lostPointerCapture\",\"playing\",\"playing\",\"progress\",\"progress\",\"seeking\",\n\"seeking\",\"stalled\",\"stalled\",\"suspend\",\"suspend\",\"timeupdate\",\"timeUpdate\",$b,\"transitionEnd\",\"waiting\",\"waiting\"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f=\"on\"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+\"Capture\"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}\nad(\"blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange\".split(\" \"),0);\nad(\"drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel\".split(\" \"),1);ad($c,2);for(var bd=\"change selectionchange textInput compositionstart compositionend compositionupdate\".split(\" \"),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);\nvar dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){db||bb();var e=id,f=db;db=!0;try{ab(e,a,b,c,d)}finally{(db=f)||fb()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}\nfunction id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{gb(sc,a)}finally{qc(a)}}}}\nfunction Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{gb(sc,a)}finally{qc(a)}return null}\nvar jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(\"\"+b).trim():b+\"px\"}\nfunction md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=ld(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,\"\"));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!(\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(u(62,\"\"));}}\nfunction pd(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=Ra[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}\nfunction td(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}\nfunction wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}\nfunction yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}var zd=\"$\",Ad=\"/$\",Bd=\"$?\",Cd=\"$!\",Dd=null,Ed=null;function Fd(a,b){switch(a){case \"button\":case \"input\":case \"select\":case \"textarea\":return!!b.autoFocus}return!1}\nfunction Gd(a,b){return\"textarea\"===a||\"option\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd=\"function\"===typeof setTimeout?setTimeout:void 0,Id=\"function\"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}\nfunction Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md=\"__reactInternalInstance$\"+Ld,Nd=\"__reactEventHandlers$\"+Ld,Od=\"__reactContainere$\"+Ld;\nfunction tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}\nfunction Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==typeof c)throw Error(u(231,\nb,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],\"captured\",a);for(b=0;b<c.length;b++)Td(c[b],\"bubbled\",a)}}\nfunction Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;\nfunction ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e=\"value\"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}\nfunction G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):\"target\"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}\nn(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,\nb;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nG.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=Ta&&\"CompositionEvent\"in window,ke=null;Ta&&\"documentMode\"in document&&(ke=document.documentMode);\nvar le=Ta&&\"TextEvent\"in window&&!ke,me=Ta&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:\"onBeforeInput\",captured:\"onBeforeInputCapture\"},dependencies:[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]},compositionEnd:{phasedRegistrationNames:{bubbled:\"onCompositionEnd\",captured:\"onCompositionEndCapture\"},dependencies:\"blur compositionend keydown keypress keyup mousedown\".split(\" \")},compositionStart:{phasedRegistrationNames:{bubbled:\"onCompositionStart\",\ncaptured:\"onCompositionStartCapture\"},dependencies:\"blur compositionstart keydown keypress keyup mousedown\".split(\" \")},compositionUpdate:{phasedRegistrationNames:{bubbled:\"onCompositionUpdate\",captured:\"onCompositionUpdateCapture\"},dependencies:\"blur compositionupdate keydown keypress keyup mousedown\".split(\" \")}},pe=!1;\nfunction qe(a,b){switch(a){case \"keyup\":return-1!==ie.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"blur\":return!0;default:return!1}}function re(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var se=!1;function te(a,b){switch(a){case \"compositionend\":return re(b);case \"keypress\":if(32!==b.which)return null;pe=!0;return ne;case \"textInput\":return a=b.data,a===ne&&pe?null:a;default:return null}}\nfunction ue(a,b){if(se)return\"compositionend\"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return me&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case \"compositionstart\":var f=oe.compositionStart;break b;case \"compositionend\":f=oe.compositionEnd;break b;case \"compositionupdate\":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):\"keydown\"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&\"ko\"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd=\"value\"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,\nb,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!we[a.type]:\"textarea\"===b?!0:!1}\nvar ye={change:{phasedRegistrationNames:{bubbled:\"onChange\",captured:\"onChangeCapture\"},dependencies:\"blur change click focus input keydown keyup selectionchange\".split(\" \")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type=\"change\";Ya(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if(\"change\"===a)return b}var Fe=!1;Ta&&(Fe=oc(\"input\")&&(!document.documentMode||9<document.documentMode));\nfunction Ge(){Ae&&(Ae.detachEvent(\"onpropertychange\",He),Be=Ae=null)}function He(a){if(\"value\"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),db)mc(a);else{db=!0;try{$a(Ce,a)}finally{db=!1,fb()}}}function Ie(a,b,c){\"focus\"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent(\"onpropertychange\",He)):\"blur\"===a&&Ge()}function Je(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return De(Be)}function Ke(a,b){if(\"click\"===a)return De(b)}function Le(a,b){if(\"input\"===a||\"change\"===a)return De(b)}\nvar Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if(\"select\"===f||\"input\"===f&&\"file\"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&\"input\"===f.toLowerCase()&&(\"checkbox\"===e.type||\"radio\"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);\"blur\"===a&&(a=e._wrapperState)&&a.controlled&&\"number\"===e.type&&Db(e,\"number\",e.value)}},Ne=G.extend({view:null,detail:null}),\nOe={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}\nvar Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if(\"movementX\"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?\"mousemove\"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if(\"movementY\"in a)return a.movementY;\nvar b=Se;Se=a.screenY;return Ue?\"mousemove\"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:\"onMouseEnter\",dependencies:[\"mouseout\",\"mouseover\"]},mouseLeave:{registrationName:\"onMouseLeave\",dependencies:[\"mouseout\",\"mouseover\"]},pointerEnter:{registrationName:\"onPointerEnter\",dependencies:[\"pointerout\",\"pointerover\"]},pointerLeave:{registrationName:\"onPointerLeave\",\ndependencies:[\"pointerout\",\"pointerover\"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f=\"mouseover\"===a||\"pointerover\"===a,g=\"mouseout\"===a||\"pointerout\"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if(\"mouseout\"===a||\"mouseover\"===\na){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p=\"mouse\"}else if(\"pointerout\"===a||\"pointerover\"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p=\"pointer\";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+\"leave\";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+\"enter\";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;\nk=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],\"bubbled\",l);for(p=d.length;0<p--;)Vd(d[p],\"captured\",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e=\"function\"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;\nfunction bf(a,b){if($e(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}\nvar cf=Ta&&\"documentMode\"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:\"onSelect\",captured:\"onSelectCapture\"},dependencies:\"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange\".split(\" \")}},ef=null,ff=null,gf=null,hf=!1;\nfunction jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;\"selectionStart\"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type=\"select\",a.target=ef,Xd(a),a)}\nvar kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=Ra.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case \"focus\":if(xe(e)||\"true\"===e.contentEditable)ef=e,ff=b,gf=null;break;case \"blur\":gf=ff=ef=null;break;case \"mousedown\":hf=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":return hf=!1,jf(c,d);case \"selectionchange\":if(cf)break;\ncase \"keydown\":case \"keyup\":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}\nvar pf={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},qf={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",\n116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=of(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?qf[a.keyCode]||\"Unidentified\":\"\"},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return\"keypress\"===\na.type?of(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===a.type?of(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in\na?-a.wheelDeltaX:0},deltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case \"keypress\":if(0===of(c))return null;case \"keydown\":case \"keyup\":a=rf;break;case \"blur\":case \"focus\":a=nf;break;case \"click\":if(2===c.button)return null;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":a=\nVe;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":a=sf;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case \"scroll\":a=Ne;break;case \"wheel\":a=vf;break;case \"copy\":case \"cut\":case \"paste\":a=mf;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":a=\nWe;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(Ka)throw Error(u(101));Ka=Array.prototype.slice.call(\"ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));Ma();var xf=Nc;la=Qd;ma=xf;na=Pd;Sa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}\nfunction I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}\nfunction Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,Ia(b)||\"Unknown\",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}\nfunction Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}\nvar If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};\nfunction ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}\nfunction fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}\nfunction og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}\nfunction sg(a,b){if(mg!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}\nfunction vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}\nfunction zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=\nca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if(\"function\"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g=\"function\"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&\n(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}\nfunction Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if(\"function\"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=pa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}\nvar Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;\nc=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}\nfunction Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;\"object\"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Mg(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}\nfunction Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||\n(b=e.state,\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;\nfunction Pg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if(\"string\"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}\nfunction Qg(a,b){if(\"textarea\"!==a.type)throw Error(u(31,\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b,\"\"));}\nfunction Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=\n2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==\nc.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=Tg(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case ra:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case sa:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||\nGa(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case ra:return c.key===e?c.type===ta?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case sa:return c.key===e?l(a,b,c,d):null}if(Og(c)||Ga(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=\na.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case ra:return a=a.get(null===d.key?c:d.key)||null,d.type===ta?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case sa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||Ga(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&\nm&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=Ga(h);if(\"function\"!==typeof k)throw Error(u(150));h=k.call(h);\nif(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==\nq.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k=\"object\"===typeof f&&null!==f&&f.type===ta&&null===f.key;k&&(f=f.props.children);var l=\"object\"===typeof f&&null!==f;if(l)switch(f.$$typeof){case ra:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ta){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,\nk.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ta?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case sa:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=\nd.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if(\"string\"===typeof f||\"number\"===typeof f)return f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(Ga(f))return D(a,d,f,h);l&&Qg(a,f);if(\"undefined\"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||\"Component\"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};\nfunction ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};\nfunction hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}\nvar jh=pa.ReactCurrentDispatcher,kh=pa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}\nfunction oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}\nfunction th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction vh(a,b){return\"function\"===typeof b?b(a):b}\nfunction wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&\n(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction yh(a){var b=th();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}\nfunction Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}\nfunction Hh(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}\nfunction zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,\nd)}}\nvar sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,\nb];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=\nc}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=\nwh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,\nb,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType=\"DELETED\";c.type=\"DELETED\";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}\nfunction Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}\nfunction Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||\"head\"!==b&&\"body\"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}\nfunction Xh(){Ph=Oh=null;Qh=!1}var Yh=pa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}\nfunction ai(a,b,c,d,e,f){if(null===a){var g=c.type;if(\"function\"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}\nfunction fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;p||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\n\"function\"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?(\"function\"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===\ntypeof g.componentDidMount&&(b.effectTag|=4)):(\"function\"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,\"object\"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p=\"function\"===typeof m||\"function\"===\ntypeof g.getSnapshotBeforeUpdate)||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?(\"function\"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,l),\"function\"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),\"function\"===typeof g.componentDidUpdate&&(b.effectTag|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):\n(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}\nfunction gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}\nvar ii={dehydrated:null,retryTime:0};\nfunction ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=\nb;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=\nc}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}\nfunction ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case \"together\":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;\nni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};\npi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case \"input\":f=zb(g,f);d=zb(g,d);a=[];break;case \"option\":f=Gb(g,f);d=Gb(g,d);a=[];break;case \"select\":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case \"textarea\":f=Ib(g,f);d=Ib(g,d);a=[];break;default:\"function\"!==typeof f.onClick&&\"function\"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if(\"style\"===\nh)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]=\"\");else\"dangerouslySetInnerHTML\"!==h&&\"children\"!==h&&\"suppressContentEditableWarning\"!==h&&\"suppressHydrationWarning\"!==h&&\"autoFocus\"!==h&&(Qa.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if(\"style\"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]=\"\");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),\nc[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else\"dangerouslySetInnerHTML\"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):\"children\"===h?g===l||\"string\"!==typeof l&&\"number\"!==typeof l||(a=a||[]).push(h,\"\"+l):\"suppressContentEditableWarning\"!==h&&\"suppressHydrationWarning\"!==h&&(Qa.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push(\"style\",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};\nqi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));\nreturn null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case \"iframe\":case \"object\":case \"embed\":F(\"load\",d);break;case \"video\":case \"audio\":for(a=0;a<ac.length;a++)F(ac[a],d);break;case \"source\":F(\"error\",d);break;case \"img\":case \"image\":case \"link\":F(\"error\",d);F(\"load\",d);break;case \"form\":F(\"reset\",d);F(\"submit\",d);break;case \"details\":F(\"toggle\",d);break;case \"input\":Ab(d,f);F(\"invalid\",d);rd(c,\"onChange\");break;case \"select\":d._wrapperState=\n{wasMultiple:!!f.multiple};F(\"invalid\",d);rd(c,\"onChange\");break;case \"textarea\":Jb(d,f),F(\"invalid\",d),rd(c,\"onChange\")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(a=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(a=[\"children\",\"\"+h]):Qa.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case \"input\":xb(d);Eb(d,f,!0);break;case \"textarea\":xb(d);Lb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&\n(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?\"script\"===e?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\"string\"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),\"select\"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case \"iframe\":case \"object\":case \"embed\":F(\"load\",\na);h=d;break;case \"video\":case \"audio\":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case \"source\":F(\"error\",a);h=d;break;case \"img\":case \"image\":case \"link\":F(\"error\",a);F(\"load\",a);h=d;break;case \"form\":F(\"reset\",a);F(\"submit\",a);h=d;break;case \"details\":F(\"toggle\",a);h=d;break;case \"input\":Ab(a,d);h=zb(a,d);F(\"invalid\",a);rd(c,\"onChange\");break;case \"option\":h=Gb(a,d);break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F(\"invalid\",a);rd(c,\"onChange\");break;case \"textarea\":Jb(a,\nd);h=Ib(a,d);F(\"invalid\",a);rd(c,\"onChange\");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];\"style\"===f?md(a,l):\"dangerouslySetInnerHTML\"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):\"children\"===f?\"string\"===typeof l?(\"textarea\"!==e||\"\"!==l)&&Rb(a,l):\"number\"===typeof l&&Rb(a,\"\"+l):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(Qa.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&qb(a,f,l,g))}switch(e){case \"input\":xb(a);Eb(a,d,!1);\nbreak;case \"textarea\":xb(a);Lb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+rb(d.value));break;case \"select\":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:\"function\"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(u(166));\nc=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=\ne,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&\n64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,\ne.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&\"hidden\"===d.tailMode&&!f.alternate)return b=\nb.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,\nb.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:Ja(b)}}\nvar Bi=\"function\"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=Ja(c));null!==c&&Ia(c.type);b=b.value;null!==a&&1===a.tag&&Ia(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if(\"function\"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}\nfunction Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}\nfunction Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}\nfunction Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;\ncase 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}\nfunction Ki(a,b,c){\"function\"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;\"function\"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}\nfunction Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,\"\"),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;\nif(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}\nfunction Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}\nfunction Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}\nfunction Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=\nf,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}\nfunction Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;\"input\"===a&&\"radio\"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];\"style\"===g?md(c,h):\"dangerouslySetInnerHTML\"===g?Qb(c,h):\"children\"===g?Rb(c,h):qb(c,g,h,b)}switch(a){case \"input\":Cb(c,d);break;\ncase \"textarea\":Kb(c,d);break;case \"select\":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:\"\",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?\nd=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty(\"display\")?e.display:null,f.style.display=ld(\"display\",e));else if(6===a.tag)a.stateNode.nodeValue=d?\"\":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=\nf;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nvar Wi=\"function\"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}\nfunction $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){\"function\"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nvar bj=Math.ceil,cj=pa.ReactCurrentDispatcher,dj=pa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}\nfunction Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}\nfunction Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}\nfunction xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}\nfunction zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}\nfunction Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=\nb;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}\nfunction Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;\nc===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=\nd;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=\nHd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}\nfunction yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}\nfunction Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}\nfunction Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}\nfunction Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&\"object\"===typeof h&&\"function\"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):g.memoizedState=null}var m=0!==\n(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;break a}h=void 0;g=b;var A=e.pingCache;\nnull===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((Ia(g.type)||\"A React component\")+\" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\"+Ja(g))}S!==jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=\nh;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&(\"function\"===typeof w.getDerivedStateFromError||null!==ub&&\"function\"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}\nfunction Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}\nfunction Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==\na.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}\nfunction Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=\nd-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if(\"selectionStart\"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,\nm=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=\nnull;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,\"\");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&(\"function\"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=\n-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),\"selectionStart\"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&\n(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,\ntop:w.scrollTop});\"function\"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}\"function\"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=\nnull;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;\"function\"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}\nfunction Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}\nfunction Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if(\"function\"===typeof c.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}\nfunction Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;\nRj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;\nif(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,\nb,d,a,e,c);b.effectTag|=1;if(\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;\"function\"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=\nnull,b.alternate=null,b.effectTag|=2);a=b.pendingProps;Ha(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);\ncase 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:\nnull,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,\nb,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:(\"function\"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==\nk){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=\ng}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,\nb,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if(\"undefined\"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}\nfunction Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}\nfunction bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if(\"function\"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===za)return 11;if(a===Ca)return 14}return 2}\nfunction Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,\nfirstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Ug(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bi(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ta:return Wg(c.children,e,f,b);case ya:g=8;e|=7;break;case ua:g=8;e|=1;break;case va:return a=Sh(12,c,b,e|8),a.elementType=va,a.type=va,a.expirationTime=f,a;case Aa:return a=Sh(13,c,b,e),a.type=Aa,a.elementType=Aa,a.expirationTime=f,a;case Ba:return a=Sh(19,c,b,e),a.elementType=Ba,a.expirationTime=f,a;default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case wa:g=\n10;break a;case xa:g=9;break a;case za:g=11;break a;case Ca:g=14;break a;case Da:g=16;d=null;break a;case Ea:g=22;break a}throw Error(u(130,null==a?a:typeof a,\"\"));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}\nfunction Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}\nfunction Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}\nfunction yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}\nfunction bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===\nd?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}\nfunction fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};\nfunction gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute(\"data-reactroot\")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}\nfunction ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if(\"function\"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if(\"function\"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:sa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nwc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};\nUa=function(a,b,c){switch(b){case \"input\":Cb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case \"textarea\":Kb(a,c);break;case \"select\":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};$a=Mj;\nab=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};bb=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};cb=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,Sa,Oa,Xd,function(a){jc(a,Wd)},Ya,Za,id,mc,Dj,{current:!1}]};\n(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:pa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:\"16.13.0\",\nrendererPackageName:\"react-dom\"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if(\"function\"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};\nexports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};\nexports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version=\"16.13.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","/** @license React v0.19.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var f,g,h,k,l;\nif(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,\ny=window.setTimeout,z=window.clearTimeout;if(\"undefined\"!==typeof console){var A=window.cancelAnimationFrame;\"function\"!==typeof window.requestAnimationFrame&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\");\"function\"!==typeof A&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\")}if(\"object\"===\ntypeof w&&\"function\"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported\"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=\nfunction(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}\nfunction M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;\nfunction V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}\nfunction X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}\nfunction Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};\nexports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if(\"object\"===typeof c&&null!==c){var e=c.delay;e=\"number\"===typeof e&&0<e?d+e:d;c=\"number\"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};\nexports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};\n","package react.router.dom\n\nimport react.*\nimport kotlin.reflect.*\n\nfun RBuilder.hashRouter(handler: RHandler<RProps>) = child(HashRouterComponent::class, handler)\n\nfun RBuilder.browserRouter(handler: RHandler<RProps>) = child(BrowserRouterComponent::class, handler)\n\nfun RBuilder.switch(handler: RHandler<RProps>) = child(SwitchComponent::class, handler)\n\nfun RBuilder.route(\n    path: String,\n    component: KClass<out Component<*, *>>,\n    exact: Boolean = false,\n    strict: Boolean = false\n): ReactElement {\n    return child<RouteProps<RProps>, RouteComponent<RProps>> {\n        attrs {\n            this.path = path\n            this.exact = exact\n            this.strict = strict\n            this.component = component.js.unsafeCast<RClass<RProps>>()\n        }\n    }\n}\n\nfun <T : RProps> RBuilder.route(\n    path: String,\n    exact: Boolean = false,\n    strict: Boolean = false,\n    render: (props: RouteResultProps<T>) -> ReactElement?\n): ReactElement {\n    return child<RouteProps<T>, RouteComponent<T>> {\n        attrs {\n            this.path = path\n            this.exact = exact\n            this.strict = strict\n            this.render = render\n        }\n    }\n}\n\nfun RBuilder.route(\n    path: String,\n    exact: Boolean = false,\n    strict: Boolean = false,\n    render: () -> ReactElement?\n): ReactElement {\n    return child<RouteProps<RProps>, RouteComponent<RProps>> {\n        attrs {\n            this.path = path\n            this.exact = exact\n            this.strict = strict\n            this.render = { render() }\n        }\n    }\n}\n\nfun RBuilder.routeLink(\n    to: String,\n    replace: Boolean = false,\n    className: String? = null,\n    handler: RHandler<RProps>?\n) = child(LinkComponent::class) {\n    attrs {\n        this.to = to\n        this.replace = replace\n        this.className = className\n    }\n    handler?.invoke(this)\n}\n\nfun RBuilder.navLink(\n    to: String,\n    replace: Boolean = false,\n    className: String? = null,\n    activeClassName: String = \"active\",\n    exact: Boolean = false,\n    strict: Boolean = false,\n    isActive: (() -> Unit)? = null,\n    handler: RHandler<RProps>?\n) = child(NavLinkComponent::class) {\n    attrs {\n        this.to = to\n        this.replace = replace\n        this.className = className\n        this.activeClassName = activeClassName\n        this.exact = exact\n        this.strict = strict\n        this.isActive = isActive\n    }\n    handler?.invoke(this)\n}\n\nfun RBuilder.redirect(\n    from: String,\n    to: String,\n    push: Boolean = false,\n    exact: Boolean = false,\n    strict: Boolean = false\n) = child(RedirectComponent::class) {\n    attrs {\n        this.from = from\n        this.to = to\n        this.push = push\n        this.exact = exact\n        this.strict = strict\n    }\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","package redux\n\nimport kotlinext.js.*\n\nval <S> Store<S, *, *>.state: S get() = getState()\n\nfun <S, A> combineReducers(reducers: Map<String, Reducer<*, A>>): Reducer<S, A> = combineReducers(js {\n    reducers.forEach { this[it.key] = it.value }\n}.unsafeCast<ReducerContainer<S, A>>())\n\nfun <A, R> bindActionCreators(actionCreators: Map<String, (Array<Any>) -> A>, dispatch: (A) -> R): Map<String, (Array<Any>) -> R> {\n    val result = mutableMapOf<String, (Array<Any>) -> R>()\n    with(bindActionCreators(js {\n        actionCreators.forEach { this[it.key] = it.value }\n    }.unsafeCast<ActionCreatorContainer<A>>(), dispatch)) {\n        Object.keys(this).forEach {\n            result[it] = asDynamic()[it]\n        }\n    }\n    return result\n}\n\nfun <S> rEnhancer(): Enhancer<S, Action, Action, RAction, WrapperAction> = { next ->\n    { reducer, initialState ->\n        fun wrapperReducer(reducer: Reducer<S, RAction>): Reducer<S, WrapperAction> {\n            return { state, action -> reducer(state, action.action) }\n        }\n\n        val store = (next.unsafeCast<StoreCreator<S, WrapperAction, WrapperAction>>())(wrapperReducer(reducer), initialState)\n        assign(Object.assign(js {}, store)) {\n            dispatch = { action: RAction ->\n                val result = store.dispatch(js {\n                    type = action::class.simpleName\n                    this.action = action\n                }.unsafeCast<WrapperAction>())\n                result\n            }\n            replaceReducer = { nextReducer: Reducer<S, RAction> ->\n                store.replaceReducer(wrapperReducer(nextReducer))\n            }\n        }.unsafeCast<Store<S, RAction, WrapperAction>>()\n    }\n}\n\ninterface WrapperAction : Action {\n    override val type: String\n    val action: RAction\n}\n\ninterface RAction\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t(e.reduxLogger=e.reduxLogger||{})}(this,function(e){\"use strict\";function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,\"kind\",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,\"path\",{value:t,enumerable:!0})}function n(e,t,r){n.super_.call(this,\"E\",e),Object.defineProperty(this,\"lhs\",{value:t,enumerable:!0}),Object.defineProperty(this,\"rhs\",{value:r,enumerable:!0})}function o(e,t){o.super_.call(this,\"N\",e),Object.defineProperty(this,\"rhs\",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,\"D\",e),Object.defineProperty(this,\"lhs\",{value:t,enumerable:!0})}function a(e,t,r){a.super_.call(this,\"A\",e),Object.defineProperty(this,\"index\",{value:t,enumerable:!0}),Object.defineProperty(this,\"item\",{value:r,enumerable:!0})}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t=\"undefined\"==typeof e?\"undefined\":N(e);return\"object\"!==t?t:e===Math?\"math\":null===e?\"null\":Array.isArray(e)?\"array\":\"[object Date]\"===Object.prototype.toString.call(e)?\"date\":\"function\"==typeof e.toString&&/^\\/.*\\//.test(e.toString())?\"regexp\":\"object\"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if(\"undefined\"!=typeof d){if(c){if(\"function\"==typeof c&&c(g,d))return;if(\"object\"===(\"undefined\"==typeof c?\"undefined\":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1])}}}g.push(d)}\"regexp\"===u(e)&&\"regexp\"===u(t)&&(e=e.toString(),t=t.toString());var y=\"undefined\"==typeof e?\"undefined\":N(e),v=\"undefined\"==typeof t?\"undefined\":N(t),b=\"undefined\"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m=\"undefined\"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if(\"date\"===u(e)&&e-t!==0)r(new n(g,e,t));else if(\"object\"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])))}else{var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p)}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p)})}p.length=p.length-1}else e!==t&&(\"number\"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)))}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e)},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case\"A\":s(o[r.path[n]],r.index,r.item);break;case\"D\":delete o[r.path[n]];break;case\"E\":case\"N\":o[r.path[n]]=r.rhs}}else switch(r.kind){case\"A\":s(e[t],r.index,r.item);break;case\"D\":e=f(e,t);break;case\"E\":case\"N\":e[t]=r.rhs}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)\"undefined\"==typeof n[r.path[o]]&&(n[r.path[o]]=\"number\"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case\"A\":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case\"D\":delete n[r.path[o]];break;case\"E\":case\"N\":n[r.path[o]]=r.rhs}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case\"A\":p(o[r.path[n]],r.index,r.item);break;case\"D\":o[r.path[n]]=r.lhs;break;case\"E\":o[r.path[n]]=r.lhs;break;case\"N\":delete o[r.path[n]]}}else switch(r.kind){case\"A\":p(e[t],r.index,r.item);break;case\"D\":e[t]=r.lhs;break;case\"E\":e[t]=r.lhs;break;case\"N\":e=f(e,t)}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)\"undefined\"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case\"A\":p(i[r.path[n]],r.index,r.item);break;case\"D\":i[r.path[n]]=r.lhs;break;case\"E\":i[r.path[n]]=r.lhs;break;case\"N\":delete i[r.path[n]]}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n)};l(e,t,n)}}function y(e){return\"color: \"+F[e].color+\"; font-weight: bold\"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case\"E\":return[r.join(\".\"),n,\"→\",o];case\"N\":return[r.join(\".\"),o];case\"D\":return[r.join(\".\")];case\"A\":return[r.join(\".\")+\"[\"+i+\"]\",a];default:return[]}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed(\"diff\"):r.group(\"diff\")}catch(e){r.log(\"diff\")}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,[\"%c \"+F[t].text,y(t)].concat(P(n)))}):r.log(\"—— no diff ——\");try{r.groupEnd()}catch(e){r.log(\"—— diff end —— \")}}function m(e,t,r,n){switch(\"undefined\"==typeof e?\"undefined\":N(e)){case\"object\":return\"function\"==typeof e[n]?e[n].apply(e,P(r)):e[n];case\"function\":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=[\"action\"];return i.push(\"%c\"+String(e.type)),t&&i.push(\"%c@ \"+n),r&&i.push(\"%c(in \"+o.toFixed(2)+\" ms)\"),i.join(\" \")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c=\"undefined\"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k=\"function\"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?\"color: \"+f.title(S)+\";\":\"\",A=[\"color: gray; font-weight: lighter;\"];A.push(E),t.timestamp&&A.push(\"color: gray; font-weight: lighter;\"),t.duration&&A.push(\"color: gray; font-weight: lighter;\");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,[\"%c \"+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,[\"%c \"+O].concat(A)):r.group(O)}catch(e){r.log(O)}var N=m(u,S,[h],\"prevState\"),P=m(u,S,[S],\"action\"),C=m(u,S,[y,h],\"error\"),F=m(u,S,[w],\"nextState\");if(N)if(f.prevState){var L=\"color: \"+f.prevState(h)+\"; font-weight: bold\";r[N](\"%c prev state\",L,h)}else r[N](\"prev state\",h);if(P)if(f.action){var T=\"color: \"+f.action(S)+\"; font-weight: bold\";r[P](\"%c action    \",T,S)}else r[P](\"action    \",S);if(y&&C)if(f.error){var M=\"color: \"+f.error(y,h)+\"; font-weight: bold;\";r[C](\"%c error     \",M,y)}else r[C](\"error     \",y);if(F)if(f.nextState){var _=\"color: \"+f.nextState(w)+\"; font-weight: bold\";r[F](\"%c next state\",_,w)}else r[F](\"next state\",w);l&&b(h,w,r,k);try{r.groupEnd()}catch(e){r.log(\"—— log end ——\")}})}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if(\"undefined\"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error(\"[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from 'redux-logger'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport createLogger from 'redux-logger'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n\"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if(\"function\"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l)}catch(e){c.error=o(e)}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&\"function\"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E(\"0\",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+\":\"+A(e.getMinutes(),2)+\":\"+A(e.getSeconds(),2)+\".\"+A(e.getMilliseconds(),3)},O=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance:Date,N=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k=\"object\"===(\"undefined\"==typeof global?\"undefined\":N(global))&&global?global:\"undefined\"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){\"undefined\"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0)}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return\"undefined\"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e()}),C=null),c},enumerable:!0}});var F={E:{color:\"#2196F3\",text:\"CHANGED:\"},N:{color:\"#4CAF50\",text:\"ADDED:\"},D:{color:\"#F44336\",text:\"DELETED:\"},A:{color:\"#2196F3\",text:\"ARRAY:\"}},L={level:\"log\",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return\"inherit\"},prevState:function(){return\"#9E9E9E\"},action:function(){return\"#03A9F4\"},nextState:function(){return\"#4CAF50\"},error:function(){return\"#F20404\"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return\"function\"==typeof t||\"function\"==typeof r?S()({dispatch:t,getState:r}):void console.error(\"\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from 'redux-logger'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from 'redux-logger'\\n\")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,\"__esModule\",{value:!0})});\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;\n","function valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true;\n\n  // Otherwise, if either of them == null they are not equal.\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every(function(item, index) {\n        return valueEqual(item, b[index]);\n      })\n    );\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    var aValue = valueOf(a);\n    var bValue = valueOf(b);\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    return Object.keys(Object.assign({}, a, b)).every(function(key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\nexport default valueEqual;\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport resolvePathname from 'resolve-pathname';\nimport valueEqual from 'value-equal';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || '/';\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : \"?\" + search;\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : \"#\" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n    process.env.NODE_ENV !== \"production\" ? warning(prompt == null, 'A history supports only one prompt at a time') : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n  return window.history && 'pushState' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n}\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Browser history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = 'hashchange';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + '#' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Hash history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector('base');\n    var href = '';\n\n    if (baseTag && baseTag.getAttribute('href')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + '#' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    process.env.NODE_ENV !== \"production\" ? warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = 'POP';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: 'POP',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nexport { createBrowserHistory, createHashHistory, createMemoryHistory, createLocation, locationsAreEqual, parsePath, createPath };\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport invariant from \"invariant\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * The public API for putting history on context.\n */\n\nvar Router = function (_React$Component) {\n  _inherits(Router, _React$Component);\n\n  function Router() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Router);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      match: _this.computeMatch(_this.props.history.location.pathname)\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Router.prototype.getChildContext = function getChildContext() {\n    return {\n      router: _extends({}, this.context.router, {\n        history: this.props.history,\n        route: {\n          location: this.props.history.location,\n          match: this.state.match\n        }\n      })\n    };\n  };\n\n  Router.prototype.computeMatch = function computeMatch(pathname) {\n    return {\n      path: \"/\",\n      url: \"/\",\n      params: {},\n      isExact: pathname === \"/\"\n    };\n  };\n\n  Router.prototype.componentWillMount = function componentWillMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        children = _props.children,\n        history = _props.history;\n\n\n    invariant(children == null || React.Children.count(children) === 1, \"A <Router> may have only one child element\");\n\n    // Do this here so we can setState when a <Redirect> changes the\n    // location in componentWillMount. This happens e.g. when doing\n    // server rendering using a <StaticRouter>.\n    this.unlisten = history.listen(function () {\n      _this2.setState({\n        match: _this2.computeMatch(history.location.pathname)\n      });\n    });\n  };\n\n  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    warning(this.props.history === nextProps.history, \"You cannot change <Router history>\");\n  };\n\n  Router.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unlisten();\n  };\n\n  Router.prototype.render = function render() {\n    var children = this.props.children;\n\n    return children ? React.Children.only(children) : null;\n  };\n\n  return Router;\n}(React.Component);\n\nRouter.propTypes = {\n  history: PropTypes.object.isRequired,\n  children: PropTypes.node\n};\nRouter.contextTypes = {\n  router: PropTypes.object\n};\nRouter.childContextTypes = {\n  router: PropTypes.object.isRequired\n};\n\n\nexport default Router;","// Written in this round about way for babel-transform-imports\nimport Router from \"react-router/es/Router\";\n\nexport default Router;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createBrowserHistory as createHistory } from \"history\";\nimport Router from \"./Router\";\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = function (_React$Component) {\n  _inherits(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, BrowserRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory(_this.props), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  BrowserRouter.prototype.componentWillMount = function componentWillMount() {\n    warning(!this.props.history, \"<BrowserRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\");\n  };\n\n  BrowserRouter.prototype.render = function render() {\n    return React.createElement(Router, { history: this.history, children: this.props.children });\n  };\n\n  return BrowserRouter;\n}(React.Component);\n\nBrowserRouter.propTypes = {\n  basename: PropTypes.string,\n  forceRefresh: PropTypes.bool,\n  getUserConfirmation: PropTypes.func,\n  keyLength: PropTypes.number,\n  children: PropTypes.node\n};\n\n\nexport default BrowserRouter;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createHashHistory as createHistory } from \"history\";\nimport Router from \"./Router\";\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter = function (_React$Component) {\n  _inherits(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, HashRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory(_this.props), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  HashRouter.prototype.componentWillMount = function componentWillMount() {\n    warning(!this.props.history, \"<HashRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { HashRouter as Router }`.\");\n  };\n\n  HashRouter.prototype.render = function render() {\n    return React.createElement(Router, { history: this.history, children: this.props.children });\n  };\n\n  return HashRouter;\n}(React.Component);\n\nHashRouter.propTypes = {\n  basename: PropTypes.string,\n  getUserConfirmation: PropTypes.func,\n  hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"]),\n  children: PropTypes.node\n};\n\n\nexport default HashRouter;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport { createLocation } from \"history\";\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        innerRef = _props.innerRef,\n        props = _objectWithoutProperties(_props, [\"replace\", \"to\", \"innerRef\"]); // eslint-disable-line no-unused-vars\n\n    invariant(this.context.router, \"You should not use <Link> outside a <Router>\");\n\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n\n    var history = this.context.router.history;\n\n    var location = typeof to === \"string\" ? createLocation(to, null, null, history.location) : to;\n\n    var href = history.createHref(location);\n    return React.createElement(\"a\", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));\n  };\n\n  return Link;\n}(React.Component);\n\nLink.propTypes = {\n  onClick: PropTypes.func,\n  target: PropTypes.string,\n  replace: PropTypes.bool,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  innerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired,\n      createHref: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\n\n\nexport default Link;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createMemoryHistory as createHistory } from \"history\";\nimport Router from \"./Router\";\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\nvar MemoryRouter = function (_React$Component) {\n  _inherits(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, MemoryRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory(_this.props), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  MemoryRouter.prototype.componentWillMount = function componentWillMount() {\n    warning(!this.props.history, \"<MemoryRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { MemoryRouter as Router }`.\");\n  };\n\n  MemoryRouter.prototype.render = function render() {\n    return React.createElement(Router, { history: this.history, children: this.props.children });\n  };\n\n  return MemoryRouter;\n}(React.Component);\n\nMemoryRouter.propTypes = {\n  initialEntries: PropTypes.array,\n  initialIndex: PropTypes.number,\n  getUserConfirmation: PropTypes.func,\n  keyLength: PropTypes.number,\n  children: PropTypes.node\n};\n\n\nexport default MemoryRouter;","// Written in this round about way for babel-transform-imports\nimport MemoryRouter from \"react-router/es/MemoryRouter\";\n\nexport default MemoryRouter;","import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compilePath = function compilePath(pattern, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var keys = [];\n  var re = pathToRegexp(pattern, keys, options);\n  var compiledPattern = { re: re, keys: keys };\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledPattern;\n    cacheCount++;\n  }\n\n  return compiledPattern;\n};\n\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\nvar matchPath = function matchPath(pathname) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments[2];\n\n  if (typeof options === \"string\") options = { path: options };\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === undefined ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === undefined ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === undefined ? false : _options$sensitive;\n\n\n  if (path == null) return parent;\n\n  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),\n      re = _compilePath.re,\n      keys = _compilePath.keys;\n\n  var match = re.exec(pathname);\n\n  if (!match) return null;\n\n  var url = match[0],\n      values = match.slice(1);\n\n  var isExact = pathname === url;\n\n  if (exact && !isExact) return null;\n\n  return {\n    path: path, // the path pattern used to match\n    url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n    isExact: isExact, // whether or not we matched exactly\n    params: keys.reduce(function (memo, key, index) {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  };\n};\n\nexport default matchPath;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport invariant from \"invariant\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport matchPath from \"./matchPath\";\n\nvar isEmptyChildren = function isEmptyChildren(children) {\n  return React.Children.count(children) === 0;\n};\n\n/**\n * The public API for matching a single path and rendering.\n */\n\nvar Route = function (_React$Component) {\n  _inherits(Route, _React$Component);\n\n  function Route() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Route);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      match: _this.computeMatch(_this.props, _this.context.router)\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Route.prototype.getChildContext = function getChildContext() {\n    return {\n      router: _extends({}, this.context.router, {\n        route: {\n          location: this.props.location || this.context.router.route.location,\n          match: this.state.match\n        }\n      })\n    };\n  };\n\n  Route.prototype.computeMatch = function computeMatch(_ref, router) {\n    var computedMatch = _ref.computedMatch,\n        location = _ref.location,\n        path = _ref.path,\n        strict = _ref.strict,\n        exact = _ref.exact,\n        sensitive = _ref.sensitive;\n\n    if (computedMatch) return computedMatch; // <Switch> already computed the match for us\n\n    invariant(router, \"You should not use <Route> or withRouter() outside a <Router>\");\n\n    var route = router.route;\n\n    var pathname = (location || route.location).pathname;\n\n    return matchPath(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);\n  };\n\n  Route.prototype.componentWillMount = function componentWillMount() {\n    warning(!(this.props.component && this.props.render), \"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored\");\n\n    warning(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), \"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored\");\n\n    warning(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), \"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored\");\n  };\n\n  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {\n    warning(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.');\n\n    warning(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.');\n\n    this.setState({\n      match: this.computeMatch(nextProps, nextContext.router)\n    });\n  };\n\n  Route.prototype.render = function render() {\n    var match = this.state.match;\n    var _props = this.props,\n        children = _props.children,\n        component = _props.component,\n        render = _props.render;\n    var _context$router = this.context.router,\n        history = _context$router.history,\n        route = _context$router.route,\n        staticContext = _context$router.staticContext;\n\n    var location = this.props.location || route.location;\n    var props = { match: match, location: location, history: history, staticContext: staticContext };\n\n    if (component) return match ? React.createElement(component, props) : null;\n\n    if (render) return match ? render(props) : null;\n\n    if (typeof children === \"function\") return children(props);\n\n    if (children && !isEmptyChildren(children)) return React.Children.only(children);\n\n    return null;\n  };\n\n  return Route;\n}(React.Component);\n\nRoute.propTypes = {\n  computedMatch: PropTypes.object, // private, from <Switch>\n  path: PropTypes.string,\n  exact: PropTypes.bool,\n  strict: PropTypes.bool,\n  sensitive: PropTypes.bool,\n  component: PropTypes.func,\n  render: PropTypes.func,\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  location: PropTypes.object\n};\nRoute.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.object.isRequired,\n    route: PropTypes.object.isRequired,\n    staticContext: PropTypes.object\n  })\n};\nRoute.childContextTypes = {\n  router: PropTypes.object.isRequired\n};\n\n\nexport default Route;","// Written in this round about way for babel-transform-imports\nimport Route from \"react-router/es/Route\";\n\nexport default Route;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Route from \"./Route\";\nimport Link from \"./Link\";\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nvar NavLink = function NavLink(_ref) {\n  var to = _ref.to,\n      exact = _ref.exact,\n      strict = _ref.strict,\n      location = _ref.location,\n      activeClassName = _ref.activeClassName,\n      className = _ref.className,\n      activeStyle = _ref.activeStyle,\n      style = _ref.style,\n      getIsActive = _ref.isActive,\n      ariaCurrent = _ref[\"aria-current\"],\n      rest = _objectWithoutProperties(_ref, [\"to\", \"exact\", \"strict\", \"location\", \"activeClassName\", \"className\", \"activeStyle\", \"style\", \"isActive\", \"aria-current\"]);\n\n  var path = (typeof to === \"undefined\" ? \"undefined\" : _typeof(to)) === \"object\" ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n  return React.createElement(Route, {\n    path: escapedPath,\n    exact: exact,\n    strict: strict,\n    location: location,\n    children: function children(_ref2) {\n      var location = _ref2.location,\n          match = _ref2.match;\n\n      var isActive = !!(getIsActive ? getIsActive(match, location) : match);\n\n      return React.createElement(Link, _extends({\n        to: to,\n        className: isActive ? [className, activeClassName].filter(function (i) {\n          return i;\n        }).join(\" \") : className,\n        style: isActive ? _extends({}, style, activeStyle) : style,\n        \"aria-current\": isActive && ariaCurrent || null\n      }, rest));\n    }\n  });\n};\n\nNavLink.propTypes = {\n  to: Link.propTypes.to,\n  exact: PropTypes.bool,\n  strict: PropTypes.bool,\n  location: PropTypes.object,\n  activeClassName: PropTypes.string,\n  className: PropTypes.string,\n  activeStyle: PropTypes.object,\n  style: PropTypes.object,\n  isActive: PropTypes.func,\n  \"aria-current\": PropTypes.oneOf([\"page\", \"step\", \"location\", \"date\", \"time\", \"true\"])\n};\n\nNavLink.defaultProps = {\n  activeClassName: \"active\",\n  \"aria-current\": \"page\"\n};\n\nexport default NavLink;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\n\n/**\n * The public API for prompting the user before navigating away\n * from a screen with a component.\n */\n\nvar Prompt = function (_React$Component) {\n  _inherits(Prompt, _React$Component);\n\n  function Prompt() {\n    _classCallCheck(this, Prompt);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Prompt.prototype.enable = function enable(message) {\n    if (this.unblock) this.unblock();\n\n    this.unblock = this.context.router.history.block(message);\n  };\n\n  Prompt.prototype.disable = function disable() {\n    if (this.unblock) {\n      this.unblock();\n      this.unblock = null;\n    }\n  };\n\n  Prompt.prototype.componentWillMount = function componentWillMount() {\n    invariant(this.context.router, \"You should not use <Prompt> outside a <Router>\");\n\n    if (this.props.when) this.enable(this.props.message);\n  };\n\n  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.when) {\n      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);\n    } else {\n      this.disable();\n    }\n  };\n\n  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.disable();\n  };\n\n  Prompt.prototype.render = function render() {\n    return null;\n  };\n\n  return Prompt;\n}(React.Component);\n\nPrompt.propTypes = {\n  when: PropTypes.bool,\n  message: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired\n};\nPrompt.defaultProps = {\n  when: true\n};\nPrompt.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      block: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\n\n\nexport default Prompt;","// Written in this round about way for babel-transform-imports\nimport Prompt from \"react-router/es/Prompt\";\n\nexport default Prompt;","import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compileGenerator = function compileGenerator(pattern) {\n  var cacheKey = pattern;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var compiledGenerator = pathToRegexp.compile(pattern);\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledGenerator;\n    cacheCount++;\n  }\n\n  return compiledGenerator;\n};\n\n/**\n * Public API for generating a URL pathname from a pattern and parameters.\n */\nvar generatePath = function generatePath() {\n  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (pattern === \"/\") {\n    return pattern;\n  }\n  var generator = compileGenerator(pattern);\n  return generator(params, { pretty: true });\n};\n\nexport default generatePath;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport invariant from \"invariant\";\nimport { createLocation, locationsAreEqual } from \"history\";\nimport generatePath from \"./generatePath\";\n\n/**\n * The public API for updating the location programmatically\n * with a component.\n */\n\nvar Redirect = function (_React$Component) {\n  _inherits(Redirect, _React$Component);\n\n  function Redirect() {\n    _classCallCheck(this, Redirect);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Redirect.prototype.isStatic = function isStatic() {\n    return this.context.router && this.context.router.staticContext;\n  };\n\n  Redirect.prototype.componentWillMount = function componentWillMount() {\n    invariant(this.context.router, \"You should not use <Redirect> outside a <Router>\");\n\n    if (this.isStatic()) this.perform();\n  };\n\n  Redirect.prototype.componentDidMount = function componentDidMount() {\n    if (!this.isStatic()) this.perform();\n  };\n\n  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var prevTo = createLocation(prevProps.to);\n    var nextTo = createLocation(this.props.to);\n\n    if (locationsAreEqual(prevTo, nextTo)) {\n      warning(false, \"You tried to redirect to the same route you're currently on: \" + (\"\\\"\" + nextTo.pathname + nextTo.search + \"\\\"\"));\n      return;\n    }\n\n    this.perform();\n  };\n\n  Redirect.prototype.computeTo = function computeTo(_ref) {\n    var computedMatch = _ref.computedMatch,\n        to = _ref.to;\n\n    if (computedMatch) {\n      if (typeof to === \"string\") {\n        return generatePath(to, computedMatch.params);\n      } else {\n        return _extends({}, to, {\n          pathname: generatePath(to.pathname, computedMatch.params)\n        });\n      }\n    }\n\n    return to;\n  };\n\n  Redirect.prototype.perform = function perform() {\n    var history = this.context.router.history;\n    var push = this.props.push;\n\n    var to = this.computeTo(this.props);\n\n    if (push) {\n      history.push(to);\n    } else {\n      history.replace(to);\n    }\n  };\n\n  Redirect.prototype.render = function render() {\n    return null;\n  };\n\n  return Redirect;\n}(React.Component);\n\nRedirect.propTypes = {\n  computedMatch: PropTypes.object, // private, from <Switch>\n  push: PropTypes.bool,\n  from: PropTypes.string,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired\n};\nRedirect.defaultProps = {\n  push: false\n};\nRedirect.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired\n    }).isRequired,\n    staticContext: PropTypes.object\n  }).isRequired\n};\n\n\nexport default Redirect;","// Written in this round about way for babel-transform-imports\nimport Redirect from \"react-router/es/Redirect\";\n\nexport default Redirect;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport warning from \"warning\";\nimport invariant from \"invariant\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createLocation, createPath } from \"history\";\nimport Router from \"./Router\";\n\nvar addLeadingSlash = function addLeadingSlash(path) {\n  return path.charAt(0) === \"/\" ? path : \"/\" + path;\n};\n\nvar addBasename = function addBasename(basename, location) {\n  if (!basename) return location;\n\n  return _extends({}, location, {\n    pathname: addLeadingSlash(basename) + location.pathname\n  });\n};\n\nvar stripBasename = function stripBasename(basename, location) {\n  if (!basename) return location;\n\n  var base = addLeadingSlash(basename);\n\n  if (location.pathname.indexOf(base) !== 0) return location;\n\n  return _extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n};\n\nvar createURL = function createURL(location) {\n  return typeof location === \"string\" ? location : createPath(location);\n};\n\nvar staticHandler = function staticHandler(methodName) {\n  return function () {\n    invariant(false, \"You cannot %s with <StaticRouter>\", methodName);\n  };\n};\n\nvar noop = function noop() {};\n\n/**\n * The public top-level API for a \"static\" <Router>, so-called because it\n * can't actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\nvar StaticRouter = function (_React$Component) {\n  _inherits(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, StaticRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {\n      return addLeadingSlash(_this.props.basename + createURL(path));\n    }, _this.handlePush = function (location) {\n      var _this$props = _this.props,\n          basename = _this$props.basename,\n          context = _this$props.context;\n\n      context.action = \"PUSH\";\n      context.location = addBasename(basename, createLocation(location));\n      context.url = createURL(context.location);\n    }, _this.handleReplace = function (location) {\n      var _this$props2 = _this.props,\n          basename = _this$props2.basename,\n          context = _this$props2.context;\n\n      context.action = \"REPLACE\";\n      context.location = addBasename(basename, createLocation(location));\n      context.url = createURL(context.location);\n    }, _this.handleListen = function () {\n      return noop;\n    }, _this.handleBlock = function () {\n      return noop;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  StaticRouter.prototype.getChildContext = function getChildContext() {\n    return {\n      router: {\n        staticContext: this.props.context\n      }\n    };\n  };\n\n  StaticRouter.prototype.componentWillMount = function componentWillMount() {\n    warning(!this.props.history, \"<StaticRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { StaticRouter as Router }`.\");\n  };\n\n  StaticRouter.prototype.render = function render() {\n    var _props = this.props,\n        basename = _props.basename,\n        context = _props.context,\n        location = _props.location,\n        props = _objectWithoutProperties(_props, [\"basename\", \"context\", \"location\"]);\n\n    var history = {\n      createHref: this.createHref,\n      action: \"POP\",\n      location: stripBasename(basename, createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler(\"go\"),\n      goBack: staticHandler(\"goBack\"),\n      goForward: staticHandler(\"goForward\"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n\n    return React.createElement(Router, _extends({}, props, { history: history }));\n  };\n\n  return StaticRouter;\n}(React.Component);\n\nStaticRouter.propTypes = {\n  basename: PropTypes.string,\n  context: PropTypes.object.isRequired,\n  location: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n};\nStaticRouter.defaultProps = {\n  basename: \"\",\n  location: \"/\"\n};\nStaticRouter.childContextTypes = {\n  router: PropTypes.object.isRequired\n};\n\n\nexport default StaticRouter;","// Written in this round about way for babel-transform-imports\nimport StaticRouter from \"react-router/es/StaticRouter\";\n\nexport default StaticRouter;","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport invariant from \"invariant\";\nimport matchPath from \"./matchPath\";\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Switch.prototype.componentWillMount = function componentWillMount() {\n    invariant(this.context.router, \"You should not use <Switch> outside a <Router>\");\n  };\n\n  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    warning(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.');\n\n    warning(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.');\n  };\n\n  Switch.prototype.render = function render() {\n    var route = this.context.router.route;\n    var children = this.props.children;\n\n    var location = this.props.location || route.location;\n\n    var match = void 0,\n        child = void 0;\n    React.Children.forEach(children, function (element) {\n      if (match == null && React.isValidElement(element)) {\n        var _element$props = element.props,\n            pathProp = _element$props.path,\n            exact = _element$props.exact,\n            strict = _element$props.strict,\n            sensitive = _element$props.sensitive,\n            from = _element$props.from;\n\n        var path = pathProp || from;\n\n        child = element;\n        match = matchPath(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);\n      }\n    });\n\n    return match ? React.cloneElement(child, { location: location, computedMatch: match }) : null;\n  };\n\n  return Switch;\n}(React.Component);\n\nSwitch.contextTypes = {\n  router: PropTypes.shape({\n    route: PropTypes.object.isRequired\n  }).isRequired\n};\nSwitch.propTypes = {\n  children: PropTypes.node,\n  location: PropTypes.object\n};\n\n\nexport default Switch;","// Written in this round about way for babel-transform-imports\nimport Switch from \"react-router/es/Switch\";\n\nexport default Switch;","// Written in this round about way for babel-transform-imports\nimport generatePath from \"react-router/es/generatePath\";\n\nexport default generatePath;","// Written in this round about way for babel-transform-imports\nimport matchPath from \"react-router/es/matchPath\";\n\nexport default matchPath;","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hoistStatics from \"hoist-non-react-statics\";\nimport Route from \"./Route\";\n\n/**\n * A public higher-order component to access the imperative API\n */\nvar withRouter = function withRouter(Component) {\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutProperties(props, [\"wrappedComponentRef\"]);\n\n    return React.createElement(Route, {\n      children: function children(routeComponentProps) {\n        return React.createElement(Component, _extends({}, remainingProps, routeComponentProps, {\n          ref: wrappedComponentRef\n        }));\n      }\n    });\n  };\n\n  C.displayName = \"withRouter(\" + (Component.displayName || Component.name) + \")\";\n  C.WrappedComponent = Component;\n  C.propTypes = {\n    wrappedComponentRef: PropTypes.func\n  };\n\n  return hoistStatics(C, Component);\n};\n\nexport default withRouter;","// Written in this round about way for babel-transform-imports\nimport withRouter from \"react-router/es/withRouter\";\n\nexport default withRouter;","import _BrowserRouter from \"./BrowserRouter\";\nexport { _BrowserRouter as BrowserRouter };\nimport _HashRouter from \"./HashRouter\";\nexport { _HashRouter as HashRouter };\nimport _Link from \"./Link\";\nexport { _Link as Link };\nimport _MemoryRouter from \"./MemoryRouter\";\nexport { _MemoryRouter as MemoryRouter };\nimport _NavLink from \"./NavLink\";\nexport { _NavLink as NavLink };\nimport _Prompt from \"./Prompt\";\nexport { _Prompt as Prompt };\nimport _Redirect from \"./Redirect\";\nexport { _Redirect as Redirect };\nimport _Route from \"./Route\";\nexport { _Route as Route };\nimport _Router from \"./Router\";\nexport { _Router as Router };\nimport _StaticRouter from \"./StaticRouter\";\nexport { _StaticRouter as StaticRouter };\nimport _Switch from \"./Switch\";\nexport { _Switch as Switch };\nimport _generatePath from \"./generatePath\";\nexport { _generatePath as generatePath };\nimport _matchPath from \"./matchPath\";\nexport { _matchPath as matchPath };\nimport _withRouter from \"./withRouter\";\nexport { _withRouter as withRouter };"],"sourceRoot":""}